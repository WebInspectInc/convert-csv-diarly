ID,Title,Content,"HTML Content",Excerpt,Slug,Categories,"Author Email","Created date","Updated date","Published date"
2,"Redesign & New Blog","Nearly 2 years ago, Kyle and I created Ninjality a company under which we could organize our various projects. We also wanted to share our experiences in design and coding with others by offering services for clients. We have slowly progressed with our skills and created a portfolio of all the work that we've done. However, the site itself quickly grew stale and we decided that it was time to take Ninjality in a new direction.

We started this redesign with Kyle creating a new logo and mocking up a new layout. I'm personally not that great when it comes to starting new ideas or designs, but Kyle usually comes up with some cool stuff which I later give feedback on. We both agreed on a more professional approach to the company's brand and so a simple color scheme and layout is what you see today. I then started coding the design into a fully-functioning website.

To make editing and updating content on the site easier, I decided to use Anchor CMS. It's a dead-simple blogging platform that also doubles as a Content Management System. With this new blog, we will now be able to start posting updates about the company, projects, and other interesting things. Make sure to check back from time to time and see what we're currently working on.

It doesn't stop there, because I'm happy to say that Ninjality is responsive. This means that no matter what size device you're using, the website will adapt to your screen. I used Bootstrap, a front-end development framework that made the process of creating a responsive grid easier.

But with all this good news we also have some bad news. We decided to cut off production of WeOrderin'. We felt as if this project was not unique enough to stand out, and that we could focus on better things. So with the addition of our newest team member, Thomas Moll, we will be starting redevelopment on Hylus. We hope to completely overhaul the site and keep up with Hylus a lot more than in the past.

Thanks for your continued support of Ninjality and we hope you become a part of our community by leaving us a comment.","<p>Nearly 2 years ago, Kyle and I created Ninjality a company under which we could organize our various projects. We also wanted to share our experiences in design and coding with others by offering services for clients. We have slowly progressed with our skills and created a portfolio of all the work that we've done. However, the site itself quickly grew stale and we decided that it was time to take Ninjality in a new direction.</p>
<p>We started this redesign with Kyle creating a new logo and mocking up a new layout. I'm personally not that great when it comes to starting new ideas or designs, but Kyle usually comes up with some cool stuff which I later give feedback on. We both agreed on a more professional approach to the company's brand and so a simple color scheme and layout is what you see today. I then started coding the design into a fully-functioning website.</p>
<p>To make editing and updating content on the site easier, I decided to use Anchor CMS. It's a dead-simple blogging platform that also doubles as a Content Management System. With this new blog, we will now be able to start posting updates about the company, projects, and other interesting things. Make sure to check back from time to time and see what we're currently working on.</p>
<p>It doesn't stop there, because I'm happy to say that Ninjality is responsive. This means that no matter what size device you're using, the website will adapt to your screen. I used Bootstrap, a front-end development framework that made the process of creating a responsive grid easier.</p>
<p>But with all this good news we also have some bad news. We decided to cut off production of WeOrderin'. We felt as if this project was not unique enough to stand out, and that we could focus on better things. So with the addition of our newest team member, Thomas Moll, we will be starting redevelopment on Hylus. We hope to completely overhaul the site and keep up with Hylus a lot more than in the past.</p>
<p>Thanks for your continued support of Ninjality and we hope you become a part of our community by leaving us a comment.</p>","A post announcing the redesign of Ninjality and the addition of a blog.",redesign,News,sunny@ninjality.com,"2017-02-13 05:01:31","2017-02-13 05:02:43","2014-01-19 00:00:00"
3,"What Have We Been Up To?","So you really haven't heard from us in a while so I just wanted to let you know what we have been up to!

We have recently started work on the Digital Bounds redesign and we are very excited to share that with you when we complete it! It is going to feature a fully redesigned, responsive website that I'm sure you will love! We will be writing a full article about the redesign itself.
	
You may have also noticed that Hylus has been down the last week or so. No, this is not on purpose. We have tried fixing it but have kept coming up empty. When we get some time to really focus on this we will be sure to let you know when it's back up! On top of the Hylus issues we also experienced some server outage the last couple days but  have no fear, Digital Ocean is here and they fixed the problem as soon as it happened!

As for YouTube, I can personally attest that I have been slacking in this area, with the company itself keeping me pretty busy I haven't had much time to focus on Speed Art videos. But don't get upset, I will definitely be pushing one out in the next few days!

Overall, we have been really busy and we are definitely excited to be this busy and moving the company in a whole new direction. With that direction we also plan on releasing a ""Labs"" portion of Ninjality, which we will reveal more details when we get closer to release. But don't worry! We haven't fell off just yet! We just can't wait to see what everyone thinks of the work we have been doing!","<p>So you really haven't heard from us in a while so I just wanted to let you know what we have been up to!</p>
<p>We have recently started work on the Digital Bounds redesign and we are very excited to share that with you when we complete it! It is going to feature a fully redesigned, responsive website that I'm sure you will love! We will be writing a full article about the redesign itself.</p>
<p>You may have also noticed that Hylus has been down the last week or so. No, this is not on purpose. We have tried fixing it but have kept coming up empty. When we get some time to really focus on this we will be sure to let you know when it's back up! On top of the Hylus issues we also experienced some server outage the last couple days but  have no fear, Digital Ocean is here and they fixed the problem as soon as it happened!</p>
<p>As for YouTube, I can personally attest that I have been slacking in this area, with the company itself keeping me pretty busy I haven't had much time to focus on Speed Art videos. But don't get upset, I will definitely be pushing one out in the next few days!</p>
<p>Overall, we have been really busy and we are definitely excited to be this busy and moving the company in a whole new direction. With that direction we also plan on releasing a &quot;Labs&quot; portion of Ninjality, which we will reveal more details when we get closer to release. But don't worry! We haven't fell off just yet! We just can't wait to see what everyone thinks of the work we have been doing!</p>","A post keeping you updated on the work we have been doing lately",what-have-we-been-up-to,News,sunny@ninjality.com,"2017-02-13 05:07:35","2017-02-13 05:07:35","2014-03-05 05:07:31"
4,"A Look Into 2015","The team at Ninjality wishes you all a happy new year! 2014 was a great year for us, and we'd like for the new year to be even better by releasing a refresh to the site's design; we changed the logo  in the header, created new icons for the services, and overall improved our homepage to make it look more appealing. The blog should be better to read as well. On top of that, you should notice some of the content changes thanks to our recent work on [Pimp My Setup](/portfolio/web/).

To get you guys up-to-speed on what will be going on this year, we're happy to talk about the current development of [Hylus](http://hylus.com/). The current site is stagnant, but we've decided sometime last year that a complete restart was needed on the project. A fresh codebase, modern design, and overall better user experience are what we're aiming for with the new Hylus. It's too early for sneak peeks, but an early release should be ready by quarter 1 or quarter 2 of this year.

As far as our blog and [YouTube channel](http://www.youtube.com/user/NinjalityDesign) goes, we'll be posting more tutorials and even coding-related videos/screencasts, so [subscribe](http://www.youtube.com/NinjalityDesign?sub_confirmation=1) if you want to be notified of that.

That's all for now. If you have any suggestions you can let us know with a comment.","<p>The team at Ninjality wishes you all a happy new year! 2014 was a great year for us, and we'd like for the new year to be even better by releasing a refresh to the site's design; we changed the logo  in the header, created new icons for the services, and overall improved our homepage to make it look more appealing. The blog should be better to read as well. On top of that, you should notice some of the content changes thanks to our recent work on <a href=""/portfolio/web/"">Pimp My Setup</a>.</p>
<p>To get you guys up-to-speed on what will be going on this year, we're happy to talk about the current development of <a href=""http://hylus.com/"">Hylus</a>. The current site is stagnant, but we've decided sometime last year that a complete restart was needed on the project. A fresh codebase, modern design, and overall better user experience are what we're aiming for with the new Hylus. It's too early for sneak peeks, but an early release should be ready by quarter 1 or quarter 2 of this year.</p>
<p>As far as our blog and <a href=""http://www.youtube.com/user/NinjalityDesign"">YouTube channel</a> goes, we'll be posting more tutorials and even coding-related videos/screencasts, so <a href=""http://www.youtube.com/NinjalityDesign?sub_confirmation=1"">subscribe</a> if you want to be notified of that.</p>
<p>That's all for now. If you have any suggestions you can let us know with a comment.</p>","We talk about the new year, design refresh, and future plans for Hylus and our YouTube channel.",new-years-2015,News,sunny@ninjality.com,"2017-02-13 05:08:30","2017-02-13 05:08:30","2015-01-01 05:08:27"
6,"Design Process: Digital Bounds Theme","In the last few months we've been busy with a brand spanking new theme for the [Digital Bounds Technology Blog](http://digitalbounds.com). This new theme is a totally different take on our previous version because it puts a lot of content beautifully in front of the viewer. The main focus of the redesign was to make navigating the site a lot simpler, in the past version every thing was really crammed together and a lot of unnecessary information was being displayed. With that being a major downfall of the last theme we decided to keep the new one sleek, interesting, and well spaced out. 

The sleek part of the theme is really taken into full consideration on the homepage where the articles are displayed. In the previous theme the cover image was displayed with a very hard to read title and an unnecessary blurb from the article. With this new theme we wanted to make the article titles really easy to read and also to display the author and the date published which not previously displayed. We also felt that the blurb from the article was not necessary and didn't provide anything towards the user so we cut that part out. 

The interesting part of the theme is really taken into account in the top bar. We wanted something that caught the users eye right when they navigated to the website. The background image on the top of the page can also be changed to be themed towards an event that Leon is at or anything else he wants to change it to. This makes the top very functional on top of all the other article and social links that made a home there too.

The spaced out part of this new theme was personally a very big concentration of mine. In the last theme everything was very crammed together which did not make the site flow together well at all. We made sure that everything had a well deserved amount of padding and also made the text in articles spaced out and bigger to make it more pleasurable to read. 

This theme is by far my favorite one that we have done so far, it brings a lot of elements together and nicely displays them to the user. Leon has said countless times how we cannot keep his eyes off this theme and we really do hope that it servers him well in the future.","<p>In the last few months we've been busy with a brand spanking new theme for the <a href=""http://digitalbounds.com"">Digital Bounds Technology Blog</a>. This new theme is a totally different take on our previous version because it puts a lot of content beautifully in front of the viewer. The main focus of the redesign was to make navigating the site a lot simpler, in the past version every thing was really crammed together and a lot of unnecessary information was being displayed. With that being a major downfall of the last theme we decided to keep the new one sleek, interesting, and well spaced out. </p>
<p>The sleek part of the theme is really taken into full consideration on the homepage where the articles are displayed. In the previous theme the cover image was displayed with a very hard to read title and an unnecessary blurb from the article. With this new theme we wanted to make the article titles really easy to read and also to display the author and the date published which not previously displayed. We also felt that the blurb from the article was not necessary and didn't provide anything towards the user so we cut that part out. </p>
<p>The interesting part of the theme is really taken into account in the top bar. We wanted something that caught the users eye right when they navigated to the website. The background image on the top of the page can also be changed to be themed towards an event that Leon is at or anything else he wants to change it to. This makes the top very functional on top of all the other article and social links that made a home there too.</p>
<p>The spaced out part of this new theme was personally a very big concentration of mine. In the last theme everything was very crammed together which did not make the site flow together well at all. We made sure that everything had a well deserved amount of padding and also made the text in articles spaced out and bigger to make it more pleasurable to read. </p>
<p>This theme is by far my favorite one that we have done so far, it brings a lot of elements together and nicely displays them to the user. Leon has said countless times how we cannot keep his eyes off this theme and we really do hope that it servers him well in the future.</p>","We discuss our design process with the Digital Bounds redesign.",design-process-digital-bounds-theme,Design,sunny@ninjality.com,"2017-02-13 05:18:13","2017-02-13 05:18:13","2015-04-01 05:17:50"
7,"A Speedy New Server: NGINX, HHVM, and more!","We've been discussing a possible server restructure for a few weeks, and it's nice to finally be able to say that all Ninjality sites (internal and client projects), along with our personal sites, are now running on a new and really fast server. In this article, I want to explain the reasoning and process of this move.

## Why Restructure?

A good question to ask is why restructure at all? The old server ran our sites just fine, and we didn't run into any huge issues. However, it is always good to keep improving and our server infrastructure was not the best. It was a basic [LAMP](http://en.wikipedia.org/wiki/LAMP_%28software_bundle%29) stack: Linux (CentOS), Apache, MySQL, and PHP. We've worked with this stack for so long that there really was no reason to consider anything else.

The event that changed this thinking is when we began working on multiple projects that were built with the [Laravel PHP framework](http://laravel.com/). When developing locally, Laravel provides a Vagrant virtual machine called [Homestead](http://laravel.com/docs/5.0/homestead). This box has all the installations needed to run Laravel projects, and is a stack involving Ubuntu and NGINX. The cool part is that Homestead is not limited to just Laravel projects; it's trivial to get other sites running WordPress or just pure PHP to work. This made us realize that we weren't using Apache or CentOS for any legitimate reason, only because we were used it.

The other reason that came about was the opportunity to start fresh. The old server was our first instance on [DigitalOcean](https://www.digitalocean.com/), and included a bunch of failed project ideas, old client sites, unused packages, and broken configurations. Managing this server became a pain, and we thought it'd be really nice to just start things from scratch again.

## Hello, Laravel Forge

Considering that we were already using Laravel for building web apps and developing locally, we looked into [Laravel Forge](https://forge.laravel.com/). This is a service that integrates into popular cloud hosts including DigitalOcean, and instantly installs platforms for PHP development. Think of it as a Heroku for PHP/Laravel.

While Laravel Forge is not free, the added $10/mo. is worth the time and effort that the service will save us in managing the server. It already comes installed with NGINX, HHVM, MySQL, Redis, Composer, and a bunch of other stuff that we're either already using, or were unable to use because it was too complicated. Making WordPress work on NGINX was [a little tricky](https://sunnyis.me/blog/running-wordpress-on-laravel-forge), but we made it work. There is nothing that we really miss from Apache, and we can't say that we're big enough fans of .htaccess to miss that either (although nginx.conf isn't a huge improvement).

But, let's talk about [HHVM](http://hhvm.com/). The support for HHVM on Forge is meant to be experimental, but we encountered zero issues so far. It runs everything that regular PHP can, and it's so freaking fast. Scripts process a lot faster, and pages load almost instantly. Serious props need to be given to the folks over at Facebook. Combining NGINX and HHVM feels really good too, because both are speed boosts to the typical Apache and PHP stack.

Only complaint about Forge so far is that it doesn't have an option to automatically install [MariaDB](https://mariadb.org/) over MySQL. Maria is an ""enhanced, drop-in replacement for MySQL"" and it would be nice if we could gain some speed from that as well.

Overall, Laravel Forge is an amazingly awesome service. Even if we didn't use the Laravel framework, we would still use Forge just because it makes common server and PHP stuff so simple. It can install SSH keys, environment variables, cron jobs, daemons, and firewall rules. There's also integrations with monitoring services such as [New Relic](http://newrelic.com/). It also makes deployments really easy, which we'll get to... now.

## Git & Deployments

To be honest, we used Git on like, 2 projects. Some sites were still only editable through SFTP, and this was due to the complexity of setting up repositories and doing deployments. Switching to Laravel Forge meant that we'd have to setup each site with its own Git repo, and we decided to do that with [Bitbucket](https://bitbucket.org/). The simple decision to use Bitbucket over GitHub or a custom solution is because it provides free private repos and we are already using their other product, [SourceTree](http://sourcetreeapp.com/) (a Git client).

Once again, Forge makes the process of adding a repo to the server and deploying really easy. Just link up a Bitbucket account, install a repo for a site, and boom. Deployments are already setup for Laravel projects, but a quick change in the deploy script allows for any type of project. There is also an option to enable quick deploy, which automatically does a deployment when a `git push` is made.

We realized the advantages of Git early on, but being forced to use it on all of our projects now allows us to collaborate on any site and deploy code faster.

## Our Projects

So, what does this actually mean for our projects? First of all, the performance boost gives users a better and faster experience. Second, this server restructure is part of our motive to keep improving our workflow. An efficient and modern way to work on web projects makes us excited to design and code, and hopefully gets projects released sooner.

We hope you enjoyed reading this article. If you have any questions or suggestions, let us know!","<p>We've been discussing a possible server restructure for a few weeks, and it's nice to finally be able to say that all Ninjality sites (internal and client projects), along with our personal sites, are now running on a new and really fast server. In this article, I want to explain the reasoning and process of this move.</p>
<h2>Why Restructure?</h2>
<p>A good question to ask is why restructure at all? The old server ran our sites just fine, and we didn't run into any huge issues. However, it is always good to keep improving and our server infrastructure was not the best. It was a basic <a href=""http://en.wikipedia.org/wiki/LAMP_%28software_bundle%29"">LAMP</a> stack: Linux (CentOS), Apache, MySQL, and PHP. We've worked with this stack for so long that there really was no reason to consider anything else.</p>
<p>The event that changed this thinking is when we began working on multiple projects that were built with the <a href=""http://laravel.com/"">Laravel PHP framework</a>. When developing locally, Laravel provides a Vagrant virtual machine called <a href=""http://laravel.com/docs/5.0/homestead"">Homestead</a>. This box has all the installations needed to run Laravel projects, and is a stack involving Ubuntu and NGINX. The cool part is that Homestead is not limited to just Laravel projects; it's trivial to get other sites running WordPress or just pure PHP to work. This made us realize that we weren't using Apache or CentOS for any legitimate reason, only because we were used it.</p>
<p>The other reason that came about was the opportunity to start fresh. The old server was our first instance on <a href=""https://www.digitalocean.com/"">DigitalOcean</a>, and included a bunch of failed project ideas, old client sites, unused packages, and broken configurations. Managing this server became a pain, and we thought it'd be really nice to just start things from scratch again.</p>
<h2>Hello, Laravel Forge</h2>
<p>Considering that we were already using Laravel for building web apps and developing locally, we looked into <a href=""https://forge.laravel.com/"">Laravel Forge</a>. This is a service that integrates into popular cloud hosts including DigitalOcean, and instantly installs platforms for PHP development. Think of it as a Heroku for PHP/Laravel.</p>
<p>While Laravel Forge is not free, the added $10/mo. is worth the time and effort that the service will save us in managing the server. It already comes installed with NGINX, HHVM, MySQL, Redis, Composer, and a bunch of other stuff that we're either already using, or were unable to use because it was too complicated. Making WordPress work on NGINX was <a href=""https://sunnyis.me/blog/running-wordpress-on-laravel-forge"">a little tricky</a>, but we made it work. There is nothing that we really miss from Apache, and we can't say that we're big enough fans of .htaccess to miss that either (although nginx.conf isn't a huge improvement).</p>
<p>But, let's talk about <a href=""http://hhvm.com/"">HHVM</a>. The support for HHVM on Forge is meant to be experimental, but we encountered zero issues so far. It runs everything that regular PHP can, and it's so freaking fast. Scripts process a lot faster, and pages load almost instantly. Serious props need to be given to the folks over at Facebook. Combining NGINX and HHVM feels really good too, because both are speed boosts to the typical Apache and PHP stack.</p>
<p>Only complaint about Forge so far is that it doesn't have an option to automatically install <a href=""https://mariadb.org/"">MariaDB</a> over MySQL. Maria is an &quot;enhanced, drop-in replacement for MySQL&quot; and it would be nice if we could gain some speed from that as well.</p>
<p>Overall, Laravel Forge is an amazingly awesome service. Even if we didn't use the Laravel framework, we would still use Forge just because it makes common server and PHP stuff so simple. It can install SSH keys, environment variables, cron jobs, daemons, and firewall rules. There's also integrations with monitoring services such as <a href=""http://newrelic.com/"">New Relic</a>. It also makes deployments really easy, which we'll get to... now.</p>
<h2>Git &amp; Deployments</h2>
<p>To be honest, we used Git on like, 2 projects. Some sites were still only editable through SFTP, and this was due to the complexity of setting up repositories and doing deployments. Switching to Laravel Forge meant that we'd have to setup each site with its own Git repo, and we decided to do that with <a href=""https://bitbucket.org/"">Bitbucket</a>. The simple decision to use Bitbucket over GitHub or a custom solution is because it provides free private repos and we are already using their other product, <a href=""http://sourcetreeapp.com/"">SourceTree</a> (a Git client).</p>
<p>Once again, Forge makes the process of adding a repo to the server and deploying really easy. Just link up a Bitbucket account, install a repo for a site, and boom. Deployments are already setup for Laravel projects, but a quick change in the deploy script allows for any type of project. There is also an option to enable quick deploy, which automatically does a deployment when a <code>git push</code> is made.</p>
<p>We realized the advantages of Git early on, but being forced to use it on all of our projects now allows us to collaborate on any site and deploy code faster.</p>
<h2>Our Projects</h2>
<p>So, what does this actually mean for our projects? First of all, the performance boost gives users a better and faster experience. Second, this server restructure is part of our motive to keep improving our workflow. An efficient and modern way to work on web projects makes us excited to design and code, and hopefully gets projects released sooner.</p>
<p>We hope you enjoyed reading this article. If you have any questions or suggestions, let us know!</p>","An article discussing how we moved over to a new server infrastructure with Laravel Forge. We're now running faster with NGINX and HHVM.",server-restructure-nginx-hhvm,News,sunny@ninjality.com,"2017-02-13 05:21:44","2017-02-13 05:21:44","2015-04-29 05:21:42"
8,"Streamlining Our Design","At Ninjality, we like to constantly iterate on everything that we do. We market ourselves as ninjas, but we're far from perfect, and so we decided that we could do better with our current design. Not only that, but our goals for the company are evolving as we move to improving our services and overall image. With that, let's check out everything that is new.

## The Redesign

As with any redesign process, we decide what the feel of the new design should be. We wanted a much cleaner look that portrayed a professional service. We changed absolute everything: the logo, slogan, and overall layout.

The logo is quite clever and we're very proud of it. The `</>` symbol is common in the web development industry, and we wrapped a ninja headband around it to combine what Ninjality is about (web development and being awesome ninjas of course). The navigation that you see to the right of the header has been refined as well, only displaying 4 links and giving importance to working with us.

What you will probably notice on the home page is the large background image with our new slogan on it. This is a common technique that we think works well visually. You can then find out more by reading and viewing our projects.

The entire site matches very well with this new design (or we like to think so). We gave importance to our projects by creating case study pages, which all feature a vivid image at the top.

The technology behind this redesign is somewhat interesting. We decided to go with a no-framework approach, and simply used the CSS Flexbox approach to layout. While we still love to use frameworks to quicken our process, we wanted to learn new things and display our skill set with the site itself.

## Our New Goal

We still adhere to our original goal of doing a web design service for people, and creating our own ideas. However, we want to focus on what we do best, which is creating an entire business and centering a social community around it. We are great at building social applications, which you can see within our project portfolio.

This approach hopefully streamlines our entire business and attracts clients that we would love to work with. Of course, we are still open to hearing from anyone so if you have a great idea or need a web service, [let us know](https://ninjality.com/contact).

## Projects, projects, projects!

We've also been working on other things, of course. If you've been following us on social media, you've probably heard about [CodeBee](https://codebee.io/). It's an upcoming project that we hope to release this month. We've actually been very active in streaming the development process on the new platform Livecoding.tv. Typically our lead developer, Sunny, streams it on [his account](https://www.livecoding.tv/sunny/). CodeBee will be mainly for developers and designers who want to learn or share their work through tutorials, questions, and projects. We hope that it will be a great social platform.

Another project that we recently released is [socialshares](https://socialshar.es/). It's a great way to embed social sharing buttons without the hassle of slow web pages, privacy concerns, or inconsistently designed buttons.

That's all from us this time. Let us know what you think of the redesign!","<p>At Ninjality, we like to constantly iterate on everything that we do. We market ourselves as ninjas, but we're far from perfect, and so we decided that we could do better with our current design. Not only that, but our goals for the company are evolving as we move to improving our services and overall image. With that, let's check out everything that is new.</p>
<h2>The Redesign</h2>
<p>As with any redesign process, we decide what the feel of the new design should be. We wanted a much cleaner look that portrayed a professional service. We changed absolute everything: the logo, slogan, and overall layout.</p>
<p>The logo is quite clever and we're very proud of it. The <code>&lt;/&gt;</code> symbol is common in the web development industry, and we wrapped a ninja headband around it to combine what Ninjality is about (web development and being awesome ninjas of course). The navigation that you see to the right of the header has been refined as well, only displaying 4 links and giving importance to working with us.</p>
<p>What you will probably notice on the home page is the large background image with our new slogan on it. This is a common technique that we think works well visually. You can then find out more by reading and viewing our projects.</p>
<p>The entire site matches very well with this new design (or we like to think so). We gave importance to our projects by creating case study pages, which all feature a vivid image at the top.</p>
<p>The technology behind this redesign is somewhat interesting. We decided to go with a no-framework approach, and simply used the CSS Flexbox approach to layout. While we still love to use frameworks to quicken our process, we wanted to learn new things and display our skill set with the site itself.</p>
<h2>Our New Goal</h2>
<p>We still adhere to our original goal of doing a web design service for people, and creating our own ideas. However, we want to focus on what we do best, which is creating an entire business and centering a social community around it. We are great at building social applications, which you can see within our project portfolio.</p>
<p>This approach hopefully streamlines our entire business and attracts clients that we would love to work with. Of course, we are still open to hearing from anyone so if you have a great idea or need a web service, <a href=""https://ninjality.com/contact"">let us know</a>.</p>
<h2>Projects, projects, projects!</h2>
<p>We've also been working on other things, of course. If you've been following us on social media, you've probably heard about <a href=""https://codebee.io/"">CodeBee</a>. It's an upcoming project that we hope to release this month. We've actually been very active in streaming the development process on the new platform Livecoding.tv. Typically our lead developer, Sunny, streams it on <a href=""https://www.livecoding.tv/sunny/"">his account</a>. CodeBee will be mainly for developers and designers who want to learn or share their work through tutorials, questions, and projects. We hope that it will be a great social platform.</p>
<p>Another project that we recently released is <a href=""https://socialshar.es/"">socialshares</a>. It's a great way to embed social sharing buttons without the hassle of slow web pages, privacy concerns, or inconsistently designed buttons.</p>
<p>That's all from us this time. Let us know what you think of the redesign!</p>","At Ninjality, we like to constantly iterate on everything that we do. We market ourselves as ninjas, but we're far from perfect, and so we decided that we could do better with our current design. Not only that, but our goals for the company are evolving as we move to improving our services and overall image. With that, let's check out everything that is new.",streamlining-our-design,News,sunny@ninjality.com,"2017-02-13 05:22:52","2017-02-13 05:22:52","2015-08-01 05:22:50"
9,"How To Become A WordPress Ninja","I’ve been using WordPress since early 2010 and have seen the blogging platform become a larger Content Management System (CMS). I have become an expert with WordPress, learning the in's and out's, and mistakes people make when they're first starting to set up a site. 

First off a lot of folks confuse WordPress self-hosted, the open source CMS, with WordPress.com, the blogging platform. WordPress self-hosted is not only open source but offers a lot of flexibility and customization for your business or blog. WordPress.com is more like Blogger or Tumblr in the sense that its hosted for you, and the platform offers a lot of paid upgrades to add features and customization. Starting a small blog WordPress.com is amazing, but doesn’t offer the flexibility a self-hosted WordPress site would. On a self-hosted site, you can change everything from the theme, to how pages look and feel. 

The WordPress tips and tricks will make using WordPress easier, and make you a ninja at using the CMS.

## Choose the best host

A fast and efficient website is an important part of making a successful website, especially with the rise of Google’s AMP and Facebook’s Instant Articles. Users on the web want a website to load in mere seconds, and anything longer than 2 or 3 seconds could mean a lost view. 

A lot of web host do shared hosting; where each website is given space on a larger server where they all share the resources from that one server. This is a cheap way to find hosting, however, it means your website is slow and could be taken down by other websites over the use of resources on the server. Sunny, Ninjality's back-end developer, always recommends using a cloud hosting platform like DigitalOcean. The resources of your websites distributed across servers around the world, and up time is almost at 100%.  On top of that, a cloud solution would mean a faster website. While many people think a cloud hosting service is hard to set up, DigitalOcean offers one-click installs or Ninjality offers the option for the team to fully manage your website each month. 

## Organize your media library

Uploading an image or two to each post on the site is important to keep readers interested and make your website pop. However, if you upload the images and don’t name them or give them descriptions your media library can become unruly and hard to use. 

When I upload images to any WordPress site I always name them with not only general words like ""phone"" or “LG”, but also include more descriptive explanation like “LG G5 Images from press event”. It allows me to go back and search for the G5 or press event photos.  Of course, any photos will be linked to a post, but searching for images to reuse is always important. You don’t want to have books without titles, and the same goes for photos without descriptions. 

## Custom permalinks 

WordPress generally does a good job creating URLs for your pages or posts, but sometimes you'll need to adjust. 

Your post might include special characters like %, &, $, @, or *. These characters make it difficult for search engines to read and can be problematic for mobile browsers, potentially preventing some of your pages from loading. If a post title is long it’s worth shortening it for your permalink. A post title could go from ""a developer built a WordPress plugin that would make everything easy"" to “a WordPress plugin makes everything easier.” The URL would be more appealing and optimized for search engines. 

## Use Jetpack

Automattic, the parent company of WordPress.com and the company behind the WordPress open source project, runs a plugin that blurs the line between a self-hosted site and a WordPress.com site. The plugin is easy to install and offers paid upgrades like VaultPress which backs up your whole WordPress site if some glitch deleted all your hard work. Trust me, things happen even in 2016. Backups from VaultPress have saved me time and a huge headache. Kyle, the front-end designer at Ninjality, recommends backing up your site even if they’re managing backups for you. 

Jetpack also offers features to share your post to social media, and an option to have your photos uploaded to a Content Distribution Network (CDN). A CDN host your photos off from your server on a server optimized for photos, which in turn makes your site load faster and more smoothly. In addition to to those features, Jetpack offers an analytic service built on your self-hosted site. It allows you to see who's reading what and all from the comfort of your website admin area. 

## Use a unique theme

Looking like everyone else is painful. It means users are looking at dozens of sites with the same look and feel. The users won’t remember what they read on your site or if they read it on another. It puts your website within a small window of what you can do and alter to make your site stand out. However, a custom theme on a WordPress self-hosted site would be an amazing way to brand your website and make it stand out from other business in your market. 

The Ninjality team does custom WordPress themes that offer a unique take on your business brand and identity. They offer free quotes to help you understand how inexpensive and easy getting a custom built theme. The team can build custom pages, custom post pages, and built a brand around what your business offers. Everything is custom built and custom branded so no other website on the web will look like your site. It will surely make other business owners jealous, and bring in more customers and readers.  

## Overview

Using a WordPress site isn’t as time-consuming or difficult as you may think. At first, the options and admin panel can be overwhelming, but once you know the direction you want your site to go it becomes much easier. 

I’ve started hundreds of WordPress sites, and every time I’ve used these tips to help me create the best site out there that no one else could rival. A WordPress site doesn’t have to look like a blog, and in fact, large business like Walmart and TechCrunch use WordPress to run blogs and full-fledged websites. 

If you want more WordPress tips to tell us in the comments below what problems you’ve faced when you're setting up a WordPress site!","<p>I’ve been using WordPress since early 2010 and have seen the blogging platform become a larger Content Management System (CMS). I have become an expert with WordPress, learning the in's and out's, and mistakes people make when they're first starting to set up a site. </p>
<p>First off a lot of folks confuse WordPress self-hosted, the open source CMS, with WordPress.com, the blogging platform. WordPress self-hosted is not only open source but offers a lot of flexibility and customization for your business or blog. WordPress.com is more like Blogger or Tumblr in the sense that its hosted for you, and the platform offers a lot of paid upgrades to add features and customization. Starting a small blog WordPress.com is amazing, but doesn’t offer the flexibility a self-hosted WordPress site would. On a self-hosted site, you can change everything from the theme, to how pages look and feel. </p>
<p>The WordPress tips and tricks will make using WordPress easier, and make you a ninja at using the CMS.</p>
<h2>Choose the best host</h2>
<p>A fast and efficient website is an important part of making a successful website, especially with the rise of Google’s AMP and Facebook’s Instant Articles. Users on the web want a website to load in mere seconds, and anything longer than 2 or 3 seconds could mean a lost view. </p>
<p>A lot of web host do shared hosting; where each website is given space on a larger server where they all share the resources from that one server. This is a cheap way to find hosting, however, it means your website is slow and could be taken down by other websites over the use of resources on the server. Sunny, Ninjality's back-end developer, always recommends using a cloud hosting platform like DigitalOcean. The resources of your websites distributed across servers around the world, and up time is almost at 100%.  On top of that, a cloud solution would mean a faster website. While many people think a cloud hosting service is hard to set up, DigitalOcean offers one-click installs or Ninjality offers the option for the team to fully manage your website each month. </p>
<h2>Organize your media library</h2>
<p>Uploading an image or two to each post on the site is important to keep readers interested and make your website pop. However, if you upload the images and don’t name them or give them descriptions your media library can become unruly and hard to use. </p>
<p>When I upload images to any WordPress site I always name them with not only general words like &quot;phone&quot; or “LG”, but also include more descriptive explanation like “LG G5 Images from press event”. It allows me to go back and search for the G5 or press event photos.  Of course, any photos will be linked to a post, but searching for images to reuse is always important. You don’t want to have books without titles, and the same goes for photos without descriptions. </p>
<h2>Custom permalinks</h2>
<p>WordPress generally does a good job creating URLs for your pages or posts, but sometimes you'll need to adjust. </p>
<p>Your post might include special characters like %, &amp;, $, @, or *. These characters make it difficult for search engines to read and can be problematic for mobile browsers, potentially preventing some of your pages from loading. If a post title is long it’s worth shortening it for your permalink. A post title could go from &quot;a developer built a WordPress plugin that would make everything easy&quot; to “a WordPress plugin makes everything easier.” The URL would be more appealing and optimized for search engines. </p>
<h2>Use Jetpack</h2>
<p>Automattic, the parent company of WordPress.com and the company behind the WordPress open source project, runs a plugin that blurs the line between a self-hosted site and a WordPress.com site. The plugin is easy to install and offers paid upgrades like VaultPress which backs up your whole WordPress site if some glitch deleted all your hard work. Trust me, things happen even in 2016. Backups from VaultPress have saved me time and a huge headache. Kyle, the front-end designer at Ninjality, recommends backing up your site even if they’re managing backups for you. </p>
<p>Jetpack also offers features to share your post to social media, and an option to have your photos uploaded to a Content Distribution Network (CDN). A CDN host your photos off from your server on a server optimized for photos, which in turn makes your site load faster and more smoothly. In addition to to those features, Jetpack offers an analytic service built on your self-hosted site. It allows you to see who's reading what and all from the comfort of your website admin area. </p>
<h2>Use a unique theme</h2>
<p>Looking like everyone else is painful. It means users are looking at dozens of sites with the same look and feel. The users won’t remember what they read on your site or if they read it on another. It puts your website within a small window of what you can do and alter to make your site stand out. However, a custom theme on a WordPress self-hosted site would be an amazing way to brand your website and make it stand out from other business in your market. </p>
<p>The Ninjality team does custom WordPress themes that offer a unique take on your business brand and identity. They offer free quotes to help you understand how inexpensive and easy getting a custom built theme. The team can build custom pages, custom post pages, and built a brand around what your business offers. Everything is custom built and custom branded so no other website on the web will look like your site. It will surely make other business owners jealous, and bring in more customers and readers.  </p>
<h2>Overview</h2>
<p>Using a WordPress site isn’t as time-consuming or difficult as you may think. At first, the options and admin panel can be overwhelming, but once you know the direction you want your site to go it becomes much easier. </p>
<p>I’ve started hundreds of WordPress sites, and every time I’ve used these tips to help me create the best site out there that no one else could rival. A WordPress site doesn’t have to look like a blog, and in fact, large business like Walmart and TechCrunch use WordPress to run blogs and full-fledged websites. </p>
<p>If you want more WordPress tips to tell us in the comments below what problems you’ve faced when you're setting up a WordPress site!</p>","I’ve been using WordPress since early 2010 and have seen the blogging platform become a larger Content Management System (CMS). I have become an expert with WordPress, learning the in's and out's, and mistakes people make when they're first starting to set up a site.",how-to-become-a-wordpress-ninja,General,leon@ninjality.com,"2017-02-13 05:29:52","2017-02-13 05:29:52","2016-03-04 05:29:50"
10,"Let's Learn React Together: Part 1 - Concepts","This article is the first part in a series of tutorials where I will be writing about [ReactJS](https://facebook.github.io/react/). I am in the process of learning React and I think it would be valuable for you to join me on this journey as I explain things from a lower point of view. In this part, I will focus on the concepts of React and show what writing this code would look like. In the next part I will get into setting up an actual project.

## Why React?

React, Facebook's JavaScript library for building UIs, is catching the front-end developer community by storm. There are a couple reasons that I think React is worth learning and using.

First, it is easy to understand how React works because from the start they talk about the virtual DOM. Under the hood, React will re-render the entire UI but will not make any changes to the actual HTML (the DOM). Instead, it will render a virtual version of it and then compare the changes with the actual DOM to decide what to actually change on the page. This as you might guess is good for performance, but also makes you think about the state of your UI, and let React worry about keeping that up to date on the page. This might be new for you if you're coming from jQuery, and familiar if you're coming from Angular. Nonetheless, understanding this concept makes it easier to understand the what/why/how of React.

Second, learning React is mainly learning JavaScript. You have to memorize a couple of methods, but the rest is just using pure JavaScript methods such as `Array.map` for looping over items. This is also one of the benefits of how React forces you to write your HTML in JavaScript, rather than adding a templating language to HTML.

Third and last, React is able to render server-side. This I believe is a huge benefit over other frameworks (e.g. Angular, Ember, Vue). It is a heated topic for debate, but at the end of the day you shouldn't have to give up SEO when creating a single page app with a JavaScript framework. There are also other benefits such as performance and being able to write components a single time and render them anywhere.

## Components

The UI that you build out in React is made up of components. You can think of these components as building blocks, and are synonymous for modules or widgets. The best way to understand this concept is by looking at other websites or even your own, and seeing how you would break it up. Look at the Facebook website and you will notice a ""search box"" component, ""nav bar"" component, ""news feed"" component, ""status box"" component, and so on. Within these components you might also have other sub components such as a ""news feed item"".

The reasoning behind components is simply for organizational purposes. By separating code, you make it easier on yourself and others to manage or reuse pieces of UI.

## State

State is the other important concept that you should understand. I imagine most of you (like myself) are coming from using DOM manipulation libraries such as jQuery to make your UIs interactive. Let's take a simple example of a button:

	<button id=""MyButton"">Click Me!</button>

Now let's make it where the user can click on the button to change the text to ""Clicked!"":

	$('#MyButton').on('click', function () {
	  $(this).text('Clicked!');
	});

You can see how jQuery is heavily focused on the DOM, meaning that you are referencing the specific element and then manually changing its text on click. With React, you can't simply reference elements like that. Instead, you build out components that describe all the states that they could be in. Here's the same example written in React:

	var MyButton = React.createClass({
	  getInitialState: function () {
	    return {
	      text: 'Click Me!'
	    };
	  },
	  handleClick: function () {
	    this.setState({ text: 'Clicked!' });
	  },
	  render: function () {
	    return (
	      <button onClick={this.handleClick}>{this.state.text}</button>
	    );
	  }
	});

The much larger amount of code may seem off-putting, but it makes complex UIs a lot more manageable. Don't worry about understanding every piece of this code either. The important lesson from this is that we're defining our ""MyButton"" component, specifying all the different states (initial and clicked states), and then rendering the button. 

Also you might have noticed that we write our HTML in JavaScript. While this seems ""dirty"", it makes sense to keep the functionality together with the markup. This also allows us to utilize the full power of JavaScript to render out our components however we want.

## Closing

That's it for this part of the series. Hopefully you understand why React is gaining traction and the basic concepts of components and state.

[Go to Part 2 to start coding!](https://ninjality.com/blog/lets-learn-react-together-part-2)","<p>This article is the first part in a series of tutorials where I will be writing about <a href=""https://facebook.github.io/react/"">ReactJS</a>. I am in the process of learning React and I think it would be valuable for you to join me on this journey as I explain things from a lower point of view. In this part, I will focus on the concepts of React and show what writing this code would look like. In the next part I will get into setting up an actual project.</p>
<h2>Why React?</h2>
<p>React, Facebook's JavaScript library for building UIs, is catching the front-end developer community by storm. There are a couple reasons that I think React is worth learning and using.</p>
<p>First, it is easy to understand how React works because from the start they talk about the virtual DOM. Under the hood, React will re-render the entire UI but will not make any changes to the actual HTML (the DOM). Instead, it will render a virtual version of it and then compare the changes with the actual DOM to decide what to actually change on the page. This as you might guess is good for performance, but also makes you think about the state of your UI, and let React worry about keeping that up to date on the page. This might be new for you if you're coming from jQuery, and familiar if you're coming from Angular. Nonetheless, understanding this concept makes it easier to understand the what/why/how of React.</p>
<p>Second, learning React is mainly learning JavaScript. You have to memorize a couple of methods, but the rest is just using pure JavaScript methods such as <code>Array.map</code> for looping over items. This is also one of the benefits of how React forces you to write your HTML in JavaScript, rather than adding a templating language to HTML.</p>
<p>Third and last, React is able to render server-side. This I believe is a huge benefit over other frameworks (e.g. Angular, Ember, Vue). It is a heated topic for debate, but at the end of the day you shouldn't have to give up SEO when creating a single page app with a JavaScript framework. There are also other benefits such as performance and being able to write components a single time and render them anywhere.</p>
<h2>Components</h2>
<p>The UI that you build out in React is made up of components. You can think of these components as building blocks, and are synonymous for modules or widgets. The best way to understand this concept is by looking at other websites or even your own, and seeing how you would break it up. Look at the Facebook website and you will notice a &quot;search box&quot; component, &quot;nav bar&quot; component, &quot;news feed&quot; component, &quot;status box&quot; component, and so on. Within these components you might also have other sub components such as a &quot;news feed item&quot;.</p>
<p>The reasoning behind components is simply for organizational purposes. By separating code, you make it easier on yourself and others to manage or reuse pieces of UI.</p>
<h2>State</h2>
<p>State is the other important concept that you should understand. I imagine most of you (like myself) are coming from using DOM manipulation libraries such as jQuery to make your UIs interactive. Let's take a simple example of a button:</p>
<pre><code>&lt;button id=""MyButton""&gt;Click Me!&lt;/button&gt;</code></pre>
<p>Now let's make it where the user can click on the button to change the text to &quot;Clicked!&quot;:</p>
<pre><code>$('#MyButton').on('click', function () {
  $(this).text('Clicked!');
});</code></pre>
<p>You can see how jQuery is heavily focused on the DOM, meaning that you are referencing the specific element and then manually changing its text on click. With React, you can't simply reference elements like that. Instead, you build out components that describe all the states that they could be in. Here's the same example written in React:</p>
<pre><code>var MyButton = React.createClass({
  getInitialState: function () {
    return {
      text: 'Click Me!'
    };
  },
  handleClick: function () {
    this.setState({ text: 'Clicked!' });
  },
  render: function () {
    return (
      &lt;button onClick={this.handleClick}&gt;{this.state.text}&lt;/button&gt;
    );
  }
});</code></pre>
<p>The much larger amount of code may seem off-putting, but it makes complex UIs a lot more manageable. Don't worry about understanding every piece of this code either. The important lesson from this is that we're defining our &quot;MyButton&quot; component, specifying all the different states (initial and clicked states), and then rendering the button. </p>
<p>Also you might have noticed that we write our HTML in JavaScript. While this seems &quot;dirty&quot;, it makes sense to keep the functionality together with the markup. This also allows us to utilize the full power of JavaScript to render out our components however we want.</p>
<h2>Closing</h2>
<p>That's it for this part of the series. Hopefully you understand why React is gaining traction and the basic concepts of components and state.</p>
<p><a href=""https://ninjality.com/blog/lets-learn-react-together-part-2"">Go to Part 2 to start coding!</a></p>","This article is the first part in a series of tutorials that I will be writing about ReactJS. I am in the process of learning React and I think it would be valuable for you to join me on this journey as I explain things from a lower point of view. In this part, I will focus on the concepts of React and show what writing this code would look like. In the next part I will get into setting up an actual project.",lets-learn-react-together,Tutorials|Coding,sunny@ninjality.com,"2017-02-13 05:32:36","2017-02-13 05:36:27","2016-03-08 05:32:34"
11,"How To Be A Twitter Ninja","Twitter has incredible value for any small business, brand, or internet dweller looking to grow their influence.  I’m an active Twitter user since early 2010, and I’ve met amazing friends and colleagues on the social media service. Twitter is complicated and not easy to break it, especially with millions of users on the site. 

Marketing in a world of buzz is increasingly hard, but quality content and sometimes perfect timing is what it takes to break through. Finding an audience and connecting with them is the most difficult part, but the most rewarding experience. Along with the conversation, you’ll get your product or service in front of thousands of followers by just interacting with users. It’s free advertising and builds a brand where customers will want to return to you because they trust you and, in the end, they feel like they’re friends with the people behind your brand. 

## Follow Influencers

Twitter is the one service you’re given the attention of millions of people even if they’re not following you. On top attention of ordinary users you’re given the opportunity to talk to famous users who run Fortune 500 companies, are YouTube stars, or movie stars. Those users are bombarded with tweets and hearts but time to time a great tweet could get to them, and they could retweet it or respond to what you said. 

Beyond interacting with users, you’re able to reach potential customers on the platform. Following trends, following hashtags, and following influential users can make growing your business easier. Being a technology journalist I follow fellow tech journalists, but I also follow other blogs, technology companies, and founders of startups. It gives me access to the thoughts and ideas of the founders and startups, along with the opportunity to talk to these amazing folks. 

## Interact With Users

Tweeting out links and how you can sell some products is dandy. However, it’s not going to help your business in any way. If you’re only tweeting out and not responding to users, it can make your brand feel cold and removed from what your potential customers want. Talking to users who send out cool links or have problems makes them see you’re an active Twitter user but also someone who’d they ought to follow. 

Replying to those users means they’re replying back, and in turn, their followers will wonder who they’re replying to. It means more exposure to more users, which isn’t possible with traditional advertising. Those users can answer to you, ask questions, or even ask if you can do work or where they could buy your product. 

## Use TweetDeck & Buffer

Now managing replies, hashtags, trends, and marketing campaigns is a hassle with the official Twitter app or Twitter website. If you’re on any computer, you’re able to use [TweetDeck](https://tweetdeck.twitter.com/), which lets you manage multiple Twitter accounts, separate different columns for hashtags or trends. I would recommend setting up replies, your feed, and having different columns for hashtags relating to your business. Let’s say you’re selling shoes to customers, and you find a hashtag relating to people looking for shoes. You can reply to those users telling them to head over to your site for the best shoes on the internet. 

The other important part of Twitter is staying relevant. If you don’t tweet at the right time, you’re going to miss out on the primary customers. [Buffer](https://buffer.com/) and [KUKU.io](https://kuku.io/) are places where you can schedule tweets to go out when your customers are most active. They also let you manage your Facebook, Google+, and other social accounts. You’re able to post videos, pictures, and other amazing content for your social accounts. If you have tweets, 3 or 4 times a day customers will always see your content even if they miss something earlier. 

## Overview

Twitter is a powerful tool for advertising and marketing. A lot of businesses dismiss the service because everyone says Twitter is dead or isn’t popular around normals. Twitter is a place where artists, creatives, business men and women, and highly affluent users all interact together. If you watch any newscast, TV show, or see content, you’ll understand everyone with an influence is on Twitter, and as the service grows even more potential users could join the service. 

We (Ninjality) not only offer website designs, but provide help with understanding the audience you want to target. We’ll provide branding advice and tips to help you take your new website's design to your social profiles from Facebook, Twitter, or even Peach. 

Hit the contact page for more info on how we can help you build the most powerful branding and website!","<p>Twitter has incredible value for any small business, brand, or internet dweller looking to grow their influence.  I’m an active Twitter user since early 2010, and I’ve met amazing friends and colleagues on the social media service. Twitter is complicated and not easy to break it, especially with millions of users on the site. </p>
<p>Marketing in a world of buzz is increasingly hard, but quality content and sometimes perfect timing is what it takes to break through. Finding an audience and connecting with them is the most difficult part, but the most rewarding experience. Along with the conversation, you’ll get your product or service in front of thousands of followers by just interacting with users. It’s free advertising and builds a brand where customers will want to return to you because they trust you and, in the end, they feel like they’re friends with the people behind your brand. </p>
<h2>Follow Influencers</h2>
<p>Twitter is the one service you’re given the attention of millions of people even if they’re not following you. On top attention of ordinary users you’re given the opportunity to talk to famous users who run Fortune 500 companies, are YouTube stars, or movie stars. Those users are bombarded with tweets and hearts but time to time a great tweet could get to them, and they could retweet it or respond to what you said. </p>
<p>Beyond interacting with users, you’re able to reach potential customers on the platform. Following trends, following hashtags, and following influential users can make growing your business easier. Being a technology journalist I follow fellow tech journalists, but I also follow other blogs, technology companies, and founders of startups. It gives me access to the thoughts and ideas of the founders and startups, along with the opportunity to talk to these amazing folks. </p>
<h2>Interact With Users</h2>
<p>Tweeting out links and how you can sell some products is dandy. However, it’s not going to help your business in any way. If you’re only tweeting out and not responding to users, it can make your brand feel cold and removed from what your potential customers want. Talking to users who send out cool links or have problems makes them see you’re an active Twitter user but also someone who’d they ought to follow. </p>
<p>Replying to those users means they’re replying back, and in turn, their followers will wonder who they’re replying to. It means more exposure to more users, which isn’t possible with traditional advertising. Those users can answer to you, ask questions, or even ask if you can do work or where they could buy your product. </p>
<h2>Use TweetDeck &amp; Buffer</h2>
<p>Now managing replies, hashtags, trends, and marketing campaigns is a hassle with the official Twitter app or Twitter website. If you’re on any computer, you’re able to use <a href=""https://tweetdeck.twitter.com/"">TweetDeck</a>, which lets you manage multiple Twitter accounts, separate different columns for hashtags or trends. I would recommend setting up replies, your feed, and having different columns for hashtags relating to your business. Let’s say you’re selling shoes to customers, and you find a hashtag relating to people looking for shoes. You can reply to those users telling them to head over to your site for the best shoes on the internet. </p>
<p>The other important part of Twitter is staying relevant. If you don’t tweet at the right time, you’re going to miss out on the primary customers. <a href=""https://buffer.com/"">Buffer</a> and <a href=""https://kuku.io/"">KUKU.io</a> are places where you can schedule tweets to go out when your customers are most active. They also let you manage your Facebook, Google+, and other social accounts. You’re able to post videos, pictures, and other amazing content for your social accounts. If you have tweets, 3 or 4 times a day customers will always see your content even if they miss something earlier. </p>
<h2>Overview</h2>
<p>Twitter is a powerful tool for advertising and marketing. A lot of businesses dismiss the service because everyone says Twitter is dead or isn’t popular around normals. Twitter is a place where artists, creatives, business men and women, and highly affluent users all interact together. If you watch any newscast, TV show, or see content, you’ll understand everyone with an influence is on Twitter, and as the service grows even more potential users could join the service. </p>
<p>We (Ninjality) not only offer website designs, but provide help with understanding the audience you want to target. We’ll provide branding advice and tips to help you take your new website's design to your social profiles from Facebook, Twitter, or even Peach. </p>
<p>Hit the contact page for more info on how we can help you build the most powerful branding and website!</p>","Twitter has incredible value for any small business, brand, or internet dweller looking to grow their influence.  I’m an active Twitter user since early 2010, and I’ve met amazing friends and colleagues on the social media service. Twitter is complicated and not easy to break it, especially with millions of users on the site.",how-to-be-a-twitter-ninja,General,leon@ninjality.com,"2017-02-13 05:38:18","2017-02-13 05:38:18","2016-03-12 05:38:15"
12,"Our Design Process","At Ninjality we take pride in creating the highest quality designs for our users. This is always applicable to any design job that we do including web and graphic design. I will honestly say our design process is not that unique or too groundbreaking but it is a solid structure that always seems to do the trick for us. Our design process has four main steps which include: sketch, mockup, program, and make changes. These steps help us keep a consistent workflow in each project and not only that but it also helps us keep in mind why we made the design choices we did. So with this in mind I'll take you into more detail for each step of our design process.

#### Sketch
During these phase of our design process is when we really gather the ideas that we want to do in our design. Most of these ideas come from either the client or by doing research on comparable things that relate to the design. With this step we establish a rough sketch of the website and lay it out in the most user friendly way we can. This also gives us an opportunity to really fine-tune the design from the beginning. Most of the time our sketches occur on graph paper and are then shared throughout the team. Doing it through this sort of medium makes it really easy to make quick changes to the design so we don't waste our time later down the road.

#### Mockup
The mockup phase of our design process is where we take the previously drawn sketch and turn it into a visually appealing design that we can show the client. This step helps us a lot because sometimes our sketch doesn't translate over to the digital world as well as we originally thought. This gives an opportunity to tinker with the design a bit more before we start writing actual code for the website. This phase as stated previously is also shown to the client. We want to make sure the client is satisfied completely with the design before we start putting in the longer man hours to actually code the site. This is not only beneficial to us but it helps get a design into the clients hands a lot faster.

#### Program
This step is pretty simple; we take all the information gathered from the sketch and mockup phase and turn it into code. Depending on the project we use different things but for web design we obviously code the website in HTML and some kind of CSS framework. This process varies in length depending on the complexity of the project but with the previous steps completed it is definitely a lot faster than starting from scratch at this step. 

#### Make Changes
This step as well is pretty self explanatory. Sometimes either we or the client don't like some design elements once it is turned into a usable site. So from the program step we make the necessary changes to satisfy not only us but also, and more importantly, the client. Normally this step is the last but sometimes we have to go back in steps to make sure we have the perfect end product for the client.

##### Conclusion
So as stated before our design process isn't too revolutionary but it does get the job done. We take pride in looking at every detail when starting a new project for a client and this process definitely gives us the opportunity to do so. If you have any questions or recommendations to add to our process we would love to hear your feedback!","<p>At Ninjality we take pride in creating the highest quality designs for our users. This is always applicable to any design job that we do including web and graphic design. I will honestly say our design process is not that unique or too groundbreaking but it is a solid structure that always seems to do the trick for us. Our design process has four main steps which include: sketch, mockup, program, and make changes. These steps help us keep a consistent workflow in each project and not only that but it also helps us keep in mind why we made the design choices we did. So with this in mind I'll take you into more detail for each step of our design process.</p>
<h4>Sketch</h4>
<p>During these phase of our design process is when we really gather the ideas that we want to do in our design. Most of these ideas come from either the client or by doing research on comparable things that relate to the design. With this step we establish a rough sketch of the website and lay it out in the most user friendly way we can. This also gives us an opportunity to really fine-tune the design from the beginning. Most of the time our sketches occur on graph paper and are then shared throughout the team. Doing it through this sort of medium makes it really easy to make quick changes to the design so we don't waste our time later down the road.</p>
<h4>Mockup</h4>
<p>The mockup phase of our design process is where we take the previously drawn sketch and turn it into a visually appealing design that we can show the client. This step helps us a lot because sometimes our sketch doesn't translate over to the digital world as well as we originally thought. This gives an opportunity to tinker with the design a bit more before we start writing actual code for the website. This phase as stated previously is also shown to the client. We want to make sure the client is satisfied completely with the design before we start putting in the longer man hours to actually code the site. This is not only beneficial to us but it helps get a design into the clients hands a lot faster.</p>
<h4>Program</h4>
<p>This step is pretty simple; we take all the information gathered from the sketch and mockup phase and turn it into code. Depending on the project we use different things but for web design we obviously code the website in HTML and some kind of CSS framework. This process varies in length depending on the complexity of the project but with the previous steps completed it is definitely a lot faster than starting from scratch at this step. </p>
<h4>Make Changes</h4>
<p>This step as well is pretty self explanatory. Sometimes either we or the client don't like some design elements once it is turned into a usable site. So from the program step we make the necessary changes to satisfy not only us but also, and more importantly, the client. Normally this step is the last but sometimes we have to go back in steps to make sure we have the perfect end product for the client.</p>
<h5>Conclusion</h5>
<p>So as stated before our design process isn't too revolutionary but it does get the job done. We take pride in looking at every detail when starting a new project for a client and this process definitely gives us the opportunity to do so. If you have any questions or recommendations to add to our process we would love to hear your feedback!</p>","Discusses the design process that Ninjality uses for their projects and client projects.",our-design-process,Design,kyle@ninjality.com,"2017-02-13 05:39:43","2017-02-13 05:39:43","2016-03-15 05:39:41"
13,"How To Be A Writing Ninja","Writing isn’t easy. We may write tweets, texts, or Facebook statuses, however writing a blog post or something more substantial can be challenging and daunting. With the rise of [Medium](https://medium.com/), Svbtle, or other long-form blogging platforms, writing a blog post with 500 or 1000 or 2000 words is commonplace. While I write on a daily basis, most folks on the internet don’t write more than 140 characters. 

Starting a new blog can be daunting, but with a little creativity, writing can be expressive.  Either way writing for a business blog, yourself, or for Medium doesn’t have to be daunting or something you put off until it's too late. 

If you want to be a writing ninja, take these tips and tricks from us to get the most out of your writing adventure. 

### Write an outline

Writing an outline of what you want to write is a necessity, especially if you are easily distracted or not motivated enough. We plan ahead for dinner, for family events, or vacations so planning ahead for writing a blog post will take less time, and likely fewer objections from others. What I’ve come to do is write a headline, intro paragraph, the first sentence of each paragraph, and a conclusion. Now I’m going to catch some slack for writing the headline first, but I think of the headline as the topic. It’s what I’m writing about, so I typically set a normal none click bait headline and as the blog post is written I change it. I’ve changed the headlines for some articles 4 or 5 times, and sometimes even after they’re published. What I’m trying to get at is even though I’m planning ahead, and setting myself up for success, I'm also flexible because you cannot plan for everything. 

### Have a drink

You have the outline done, and you’ve checked Facebook, Twitter, and checked Facebook one more time. Grab a drink, something for adults. You’re stressed out and looking for any excuse to get away from the computer and not write. Grab a beer, relax and get your mind off the blog post for a few minutes.  Once you’ve gotten away for long enough go back and start writing the full post. 

Don’t forget the drink, though! It’ll keep you refreshed and stress-free as you’re writing the post. 

### Write in Google Docs

This is a major key. Google Docs is hands down the best document editor that I’ve found on the internet. I prefer Google Docs over Microsoft Office because the document is saved in the cloud; meaning I can go from my MacBook to my Windows PC to my iPhone and still have the ability to edit and view the document.  Along with autosaving to the cloud, Google Docs lets anyone view, edit or comment on the what you're writing in real time. 

I have a preference for Google Docs because you can share, edit and save all within the browser. The editor is still powerful, making it easy to change the style or add tables and pictures. The text editor is a minimalist without too many bells and whistles to distract from writing. 

### Use Grammarly

[Grammarly](http://gram.ly/gRG9) is a new tool I’ve started using to help correct spelling and advanced grammar errors. Unfortunately, Grammarly doesn’t work within Google Docs, which I hate and if anyone with Grammarly can fix I’d love them. The paid version of the tool catches advance errors with grammar and spelling. It’s especially nice if you’re writing and struggling with where to put a comma or a semicolon. 

### Have someone edit for you

Even if you’re using Grammarly, I still recommend asking a friend, family member, or a coworker to read over and edit what you wrote. It’s always a good idea to get fresh eyes and have someone challenge or question your thought process. A different set of eyes will have will see the misspelled word, misplaced comma or the run on sentence.

It’s the best time to get honest feedback before the piece hits the internet, and everyone with a keyboard wants to comment their position. 

### Overview

While writing isn’t hard, it’s about getting started and staying on track. We live in a world of constant distractions from our phones or wearables, and if you're trying to focus it can be almost impossible to drown out all the excess noise. Maybe you won’t write every day like I’m doing, but you’ll become a writing ninja when you want to pound out that much needed Medium article. 

We love hearing from everyone on what they do to make their writing experience easier so drop us a comment below or tweet at us [@ninjalitydesign](https://twitter.com/ninjalitydesign).","<p>Writing isn’t easy. We may write tweets, texts, or Facebook statuses, however writing a blog post or something more substantial can be challenging and daunting. With the rise of <a href=""https://medium.com/"">Medium</a>, Svbtle, or other long-form blogging platforms, writing a blog post with 500 or 1000 or 2000 words is commonplace. While I write on a daily basis, most folks on the internet don’t write more than 140 characters. </p>
<p>Starting a new blog can be daunting, but with a little creativity, writing can be expressive.  Either way writing for a business blog, yourself, or for Medium doesn’t have to be daunting or something you put off until it's too late. </p>
<p>If you want to be a writing ninja, take these tips and tricks from us to get the most out of your writing adventure. </p>
<h3>Write an outline</h3>
<p>Writing an outline of what you want to write is a necessity, especially if you are easily distracted or not motivated enough. We plan ahead for dinner, for family events, or vacations so planning ahead for writing a blog post will take less time, and likely fewer objections from others. What I’ve come to do is write a headline, intro paragraph, the first sentence of each paragraph, and a conclusion. Now I’m going to catch some slack for writing the headline first, but I think of the headline as the topic. It’s what I’m writing about, so I typically set a normal none click bait headline and as the blog post is written I change it. I’ve changed the headlines for some articles 4 or 5 times, and sometimes even after they’re published. What I’m trying to get at is even though I’m planning ahead, and setting myself up for success, I'm also flexible because you cannot plan for everything. </p>
<h3>Have a drink</h3>
<p>You have the outline done, and you’ve checked Facebook, Twitter, and checked Facebook one more time. Grab a drink, something for adults. You’re stressed out and looking for any excuse to get away from the computer and not write. Grab a beer, relax and get your mind off the blog post for a few minutes.  Once you’ve gotten away for long enough go back and start writing the full post. </p>
<p>Don’t forget the drink, though! It’ll keep you refreshed and stress-free as you’re writing the post. </p>
<h3>Write in Google Docs</h3>
<p>This is a major key. Google Docs is hands down the best document editor that I’ve found on the internet. I prefer Google Docs over Microsoft Office because the document is saved in the cloud; meaning I can go from my MacBook to my Windows PC to my iPhone and still have the ability to edit and view the document.  Along with autosaving to the cloud, Google Docs lets anyone view, edit or comment on the what you're writing in real time. </p>
<p>I have a preference for Google Docs because you can share, edit and save all within the browser. The editor is still powerful, making it easy to change the style or add tables and pictures. The text editor is a minimalist without too many bells and whistles to distract from writing. </p>
<h3>Use Grammarly</h3>
<p><a href=""http://gram.ly/gRG9"">Grammarly</a> is a new tool I’ve started using to help correct spelling and advanced grammar errors. Unfortunately, Grammarly doesn’t work within Google Docs, which I hate and if anyone with Grammarly can fix I’d love them. The paid version of the tool catches advance errors with grammar and spelling. It’s especially nice if you’re writing and struggling with where to put a comma or a semicolon. </p>
<h3>Have someone edit for you</h3>
<p>Even if you’re using Grammarly, I still recommend asking a friend, family member, or a coworker to read over and edit what you wrote. It’s always a good idea to get fresh eyes and have someone challenge or question your thought process. A different set of eyes will have will see the misspelled word, misplaced comma or the run on sentence.</p>
<p>It’s the best time to get honest feedback before the piece hits the internet, and everyone with a keyboard wants to comment their position. </p>
<h3>Overview</h3>
<p>While writing isn’t hard, it’s about getting started and staying on track. We live in a world of constant distractions from our phones or wearables, and if you're trying to focus it can be almost impossible to drown out all the excess noise. Maybe you won’t write every day like I’m doing, but you’ll become a writing ninja when you want to pound out that much needed Medium article. </p>
<p>We love hearing from everyone on what they do to make their writing experience easier so drop us a comment below or tweet at us <a href=""https://twitter.com/ninjalitydesign"">@ninjalitydesign</a>.</p>","Writing isn’t easy. We may write tweets, texts, or Facebook statuses, however writing a blog post or something more substantial can be challenging and daunting. With the rise of Medium, Svbtle, or other long-form blogging platforms, writing a blog post with 500 or 1000 or 2000 words is commonplace. While I write on a daily basis, most folks on the internet don’t write more than 140 characters.",how-to-be-a-writing-ninja,General,leon@ninjality.com,"2017-02-13 05:40:45","2017-02-13 05:41:01","2016-03-23 05:40:36"
14,"Let's Learn React Together: Part 2 - Code","In the [first part](https://ninjality.com/blog/lets-learn-react-together) of this tutorial series, I explained why you would want to use React and the concepts of components and state. If you are unfamiliar with these concepts, I highly recommend for you to read that article. In this second part, I want to get into the fun stuff—writing code.

## Intro to JSX

Writing React code without any build tools is actually really annoying, since you'd have to construct your markup like this:
	
	React.createElement('div', {className: 'container'}, 'This is hard...');

Thankfully, React introduces a language extension called JSX which makes writing your markup a lot easier. The above example turns into this:

	<div className=""container"">Much better!</div>

The advantage is that you get the full power of JavaScript while still being able to write your markup as you would normally. Keep in mind that certain keywords are reserved, so this means writing `className` instead of `class`. This does mean that you will need to have a compiler that can take JSX and turn it into regular JS code (the `React.createElement` stuff). Build tools are not the focus of this tutorial, mainly because you can set this up in [Gulp](http://gulpjs.com/), [Grunt](http://gruntjs.com/), or [Webpack](http://webpack.github.io/). Thankfully, a tool exists that has very minimal setup so that we can get straight into coding.

## Environment Setup

Okay, let's get started. As I said, we need something to compile our React code. For this, you need to make sure that you have [Node.js](https://nodejs.org/) installed so please do that if you haven't already. I'm going to use the command line to set things up, so let's create a new project folder:

	mkdir react-tutorial && cd react-tutorial

This will create a folder called `react-tutorial` and open it. Now let's initialize it so that we can install Node packages:

	npm init

Press enter for all the questions.

Now, let's install [Enclave](https://github.com/eanplatter/enclave) which includes [Webpack](http://webpack.github.io/) and [Babel](https://babeljs.io/). It includes a lot of fancy features but for the sake of simplicity we will use it as a simple JSX compiler. To install it run the following:

	npm install enclave -save

Note: At the time of this writing, [create-react-app](https://github.com/facebookincubator/create-react-app) did not exist and thus Enclave was used. This series will continue to use Enclave, but its only purpose is to compile our project so feel free to use create-react-app if you wish.

This may take a while, but once it finishes you will be taken through a list of questions. Enter the following for the questions:

1. `src/index.js`
2. Press enter.
3. Press enter.
4. `src/index.html`
5. `true`

Open up the project folder in your favorite editor and make sure that your `enclave.js` file looks like the following:

	exports.entry = ""src/index.js""
	exports.output = ""dist""
	exports.port = 8080
	exports.index = ""src/index.html""
	exports.live = true

We can now start the server by running `npm run enclave-serve`. You will also have to open `http://localhost:8080/` in your browser. You will see an error because we haven't written any code yet, so let's fix that.

## Writing Your First Component

If you ever get stuck, feel free to reference the accompanying [repository on GitHub](https://github.com/ninjality/react-tutorial/tree/part-2). The code for this part is in the ""part-2"" branch. I highly suggest for you to use the repository as a reference and try to write all of the code yourself. This makes learning a lot easier, trust me.

First, create a `src` folder and within it create an `index.html` file. Put the following in that file:

	<!doctype html>
	<html>
	
	<head>
	
	    <title>React Tutorial</title>
	
	</head>
	
	<body>
	
	    <div id=""root""></div>
	
	</body>
	</html>

This is just a very basic boilerplate that includes a ""root div"" for attaching our React application to.

Now, in the same `src` folder create an `index.js` file. Put the following:

	var React = require('react');
	var ReactDOM = require('react-dom');
	var App = require('./components/App');
	
	ReactDOM.render(<App />, document.getElementById('root'));

Let's slow down a bit here since a couple things are going on here. First, we are importing the React and React DOM libraries. These are being pulled in from the `node_modules` folder which were installed by Enclave. If you are unfamiliar with the `require()` syntax, it basically let's you include JS files without having to add a `<script>` tag to your markup. Next, we are importing an App component, which we will create in a moment. Finally, we need to render this component to the DOM which in this case is the `<div id=""root""></div>` element that we added earlier to our `index.html` file.

If you grasped all of that, let's move on to creating an actual component. Create a new folder in the `src` directory called `components`. This is a good practice for separating out your various components. Within this folder, create an `App.js` file and put the following:

	var React = require('react');
	
	var App = React.createClass({
	
	    render: function () {
	
	        return (
	            <div>
	                Hello!
	            </div>
	        )
	
	    }
	
	});
	
	module.exports = App;

The first line should be familiar now, this imports the React library. Next, we are calling `React.createClass()` to create a new component. The `module.exports = App` line simply exports this component so that we can `require()` it in `index.js`.

The good stuff is within the render method. This is simply a function that returns some HTML (more specifically, JSX). There are a few things to keep in mind: you want to always keep the parentheses and have some outer element for your markup. This means that if you have a bunch of elements, wrap them within some generic `<div>`.

To fix the error that you got in the browser, go back to the command line and run `npm run enclave-serve` again and refresh your browser. This time you should see a ""Hello!"". This is where you can freely experiment with the render method by putting in different types of markup. The browser will automatically reload whenever you save your component.

## Including Other Components

You may be really excited at this point, or you might be wanting something more; after all, in a full project you would have multiple components working with each other. Let's fix that by creating another component. Remember the button that I showed in [part 1](https://ninjality.com/blog/lets-learn-react-together)? Let's create that by adding a new file called `Button` in the `src/components` folder and putting the following:

	var React = require('react');
	
	var Button = React.createClass({
	
	    getInitialState: function () {
	        return {
	            text: 'Click Me!'
	        };
	    },
	
	    handleClick: function () {
	        this.setState({ text: 'Clicked!' });
	    },
	
	    render: function () {
	        return (
	            <button onClick={this.handleClick}>{this.state.text}</button>
	        );
	    }
	
	});
	
	module.exports = Button;

This is fairly similar to the App component, but we've added some extra functionality to it. This simply renders a button that says ""Click Me!"", and when you click it, it says ""Clicked!"". Let's go through each method:


- `getInitialState` sets up the default object of data. In this case, the button's text which says ""Click Me!"".
- `handleClick` allows us to handle what happens when the button will be clicked. You can use `this.setState()` to update that initial state object.
- `render` obviously renders the button, but notice how `onClick` is added to call the `handleClick` method. There are many other attributes such as `onSubmit` that you may be familiar with already from HTML. Also notice how we reference other JavaScript code within our markup via the curly braces. In this case, we can output the text by writing `{this.state.text}`.

Now that our Button component is ready, let's add it to the App component. Go back to `App.js` and update it with the following:

	var React = require('react');
	var Button = require('./Button');
	
	var App = React.createClass({
	
	    render: function () {
	
	        return (
	            <div>
	                <h1>Hello!</h1>
	                <Button />
	            </div>
	        )
	
	    }
	
	});
	
	module.exports = App;

At the top, simply import the button with the `require()` statement. Then, we can use it like a custom HTML element by simply writing `<Button />`. Keep in mind that the trailing backslash is necessary, since this is JSX.

## Closing

That is all for this part since I don't want to include too much. I hope that you're feeling really comfortable at this point and are understanding React better. If not, feel free to let me know in the comments or on [our Twitter](https://twitter.com/ninjalitydesign).

[Go to Part 3 to learn about props!](https://ninjality.com/blog/lets-learn-react-together-part-3)","<p>In the <a href=""https://ninjality.com/blog/lets-learn-react-together"">first part</a> of this tutorial series, I explained why you would want to use React and the concepts of components and state. If you are unfamiliar with these concepts, I highly recommend for you to read that article. In this second part, I want to get into the fun stuff—writing code.</p>
<h2>Intro to JSX</h2>
<p>Writing React code without any build tools is actually really annoying, since you'd have to construct your markup like this:</p>
<pre><code>React.createElement('div', {className: 'container'}, 'This is hard...');</code></pre>
<p>Thankfully, React introduces a language extension called JSX which makes writing your markup a lot easier. The above example turns into this:</p>
<pre><code>&lt;div className=""container""&gt;Much better!&lt;/div&gt;</code></pre>
<p>The advantage is that you get the full power of JavaScript while still being able to write your markup as you would normally. Keep in mind that certain keywords are reserved, so this means writing <code>className</code> instead of <code>class</code>. This does mean that you will need to have a compiler that can take JSX and turn it into regular JS code (the <code>React.createElement</code> stuff). Build tools are not the focus of this tutorial, mainly because you can set this up in <a href=""http://gulpjs.com/"">Gulp</a>, <a href=""http://gruntjs.com/"">Grunt</a>, or <a href=""http://webpack.github.io/"">Webpack</a>. Thankfully, a tool exists that has very minimal setup so that we can get straight into coding.</p>
<h2>Environment Setup</h2>
<p>Okay, let's get started. As I said, we need something to compile our React code. For this, you need to make sure that you have <a href=""https://nodejs.org/"">Node.js</a> installed so please do that if you haven't already. I'm going to use the command line to set things up, so let's create a new project folder:</p>
<pre><code>mkdir react-tutorial &amp;&amp; cd react-tutorial</code></pre>
<p>This will create a folder called <code>react-tutorial</code> and open it. Now let's initialize it so that we can install Node packages:</p>
<pre><code>npm init</code></pre>
<p>Press enter for all the questions.</p>
<p>Now, let's install <a href=""https://github.com/eanplatter/enclave"">Enclave</a> which includes <a href=""http://webpack.github.io/"">Webpack</a> and <a href=""https://babeljs.io/"">Babel</a>. It includes a lot of fancy features but for the sake of simplicity we will use it as a simple JSX compiler. To install it run the following:</p>
<pre><code>npm install enclave -save</code></pre>
<p>Note: At the time of this writing, <a href=""https://github.com/facebookincubator/create-react-app"">create-react-app</a> did not exist and thus Enclave was used. This series will continue to use Enclave, but its only purpose is to compile our project so feel free to use create-react-app if you wish.</p>
<p>This may take a while, but once it finishes you will be taken through a list of questions. Enter the following for the questions:</p>
<ol>
<li><code>src/index.js</code></li>
<li>Press enter.</li>
<li>Press enter.</li>
<li><code>src/index.html</code></li>
<li><code>true</code></li>
</ol>
<p>Open up the project folder in your favorite editor and make sure that your <code>enclave.js</code> file looks like the following:</p>
<pre><code>exports.entry = ""src/index.js""
exports.output = ""dist""
exports.port = 8080
exports.index = ""src/index.html""
exports.live = true</code></pre>
<p>We can now start the server by running <code>npm run enclave-serve</code>. You will also have to open <code>http://localhost:8080/</code> in your browser. You will see an error because we haven't written any code yet, so let's fix that.</p>
<h2>Writing Your First Component</h2>
<p>If you ever get stuck, feel free to reference the accompanying <a href=""https://github.com/ninjality/react-tutorial/tree/part-2"">repository on GitHub</a>. The code for this part is in the &quot;part-2&quot; branch. I highly suggest for you to use the repository as a reference and try to write all of the code yourself. This makes learning a lot easier, trust me.</p>
<p>First, create a <code>src</code> folder and within it create an <code>index.html</code> file. Put the following in that file:</p>
<pre><code>&lt;!doctype html&gt;
&lt;html&gt;

&lt;head&gt;

    &lt;title&gt;React Tutorial&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;

    &lt;div id=""root""&gt;&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>This is just a very basic boilerplate that includes a &quot;root div&quot; for attaching our React application to.</p>
<p>Now, in the same <code>src</code> folder create an <code>index.js</code> file. Put the following:</p>
<pre><code>var React = require('react');
var ReactDOM = require('react-dom');
var App = require('./components/App');

ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));</code></pre>
<p>Let's slow down a bit here since a couple things are going on here. First, we are importing the React and React DOM libraries. These are being pulled in from the <code>node_modules</code> folder which were installed by Enclave. If you are unfamiliar with the <code>require()</code> syntax, it basically let's you include JS files without having to add a <code>&lt;script&gt;</code> tag to your markup. Next, we are importing an App component, which we will create in a moment. Finally, we need to render this component to the DOM which in this case is the <code>&lt;div id=""root""&gt;&lt;/div&gt;</code> element that we added earlier to our <code>index.html</code> file.</p>
<p>If you grasped all of that, let's move on to creating an actual component. Create a new folder in the <code>src</code> directory called <code>components</code>. This is a good practice for separating out your various components. Within this folder, create an <code>App.js</code> file and put the following:</p>
<pre><code>var React = require('react');

var App = React.createClass({

    render: function () {

        return (
            &lt;div&gt;
                Hello!
            &lt;/div&gt;
        )

    }

});

module.exports = App;</code></pre>
<p>The first line should be familiar now, this imports the React library. Next, we are calling <code>React.createClass()</code> to create a new component. The <code>module.exports = App</code> line simply exports this component so that we can <code>require()</code> it in <code>index.js</code>.</p>
<p>The good stuff is within the render method. This is simply a function that returns some HTML (more specifically, JSX). There are a few things to keep in mind: you want to always keep the parentheses and have some outer element for your markup. This means that if you have a bunch of elements, wrap them within some generic <code>&lt;div&gt;</code>.</p>
<p>To fix the error that you got in the browser, go back to the command line and run <code>npm run enclave-serve</code> again and refresh your browser. This time you should see a &quot;Hello!&quot;. This is where you can freely experiment with the render method by putting in different types of markup. The browser will automatically reload whenever you save your component.</p>
<h2>Including Other Components</h2>
<p>You may be really excited at this point, or you might be wanting something more; after all, in a full project you would have multiple components working with each other. Let's fix that by creating another component. Remember the button that I showed in <a href=""https://ninjality.com/blog/lets-learn-react-together"">part 1</a>? Let's create that by adding a new file called <code>Button</code> in the <code>src/components</code> folder and putting the following:</p>
<pre><code>var React = require('react');

var Button = React.createClass({

    getInitialState: function () {
        return {
            text: 'Click Me!'
        };
    },

    handleClick: function () {
        this.setState({ text: 'Clicked!' });
    },

    render: function () {
        return (
            &lt;button onClick={this.handleClick}&gt;{this.state.text}&lt;/button&gt;
        );
    }

});

module.exports = Button;</code></pre>
<p>This is fairly similar to the App component, but we've added some extra functionality to it. This simply renders a button that says &quot;Click Me!&quot;, and when you click it, it says &quot;Clicked!&quot;. Let's go through each method:</p>
<ul>
<li><code>getInitialState</code> sets up the default object of data. In this case, the button's text which says &quot;Click Me!&quot;.</li>
<li><code>handleClick</code> allows us to handle what happens when the button will be clicked. You can use <code>this.setState()</code> to update that initial state object.</li>
<li><code>render</code> obviously renders the button, but notice how <code>onClick</code> is added to call the <code>handleClick</code> method. There are many other attributes such as <code>onSubmit</code> that you may be familiar with already from HTML. Also notice how we reference other JavaScript code within our markup via the curly braces. In this case, we can output the text by writing <code>{this.state.text}</code>.</li>
</ul>
<p>Now that our Button component is ready, let's add it to the App component. Go back to <code>App.js</code> and update it with the following:</p>
<pre><code>var React = require('react');
var Button = require('./Button');

var App = React.createClass({

    render: function () {

        return (
            &lt;div&gt;
                &lt;h1&gt;Hello!&lt;/h1&gt;
                &lt;Button /&gt;
            &lt;/div&gt;
        )

    }

});

module.exports = App;</code></pre>
<p>At the top, simply import the button with the <code>require()</code> statement. Then, we can use it like a custom HTML element by simply writing <code>&lt;Button /&gt;</code>. Keep in mind that the trailing backslash is necessary, since this is JSX.</p>
<h2>Closing</h2>
<p>That is all for this part since I don't want to include too much. I hope that you're feeling really comfortable at this point and are understanding React better. If not, feel free to let me know in the comments or on <a href=""https://twitter.com/ninjalitydesign"">our Twitter</a>.</p>
<p><a href=""https://ninjality.com/blog/lets-learn-react-together-part-3"">Go to Part 3 to learn about props!</a></p>","In the first part of this tutorial series, I explained why you would want to use React and the concepts of components and state. If you are unfamiliar with these concepts, I highly recommend for you to read that article. In this second part, I want to get into the fun stuff—writing code.",lets-learn-react-together-part-2,Tutorials|Coding,sunny@ninjality.com,"2017-02-13 05:42:33","2017-02-13 05:42:33","2016-03-27 05:42:28"
15,"How To Be A Project Management Ninja","Managing anything in the age of the internet is a nightmare. Employees are distributed, not every tool integrates, and communication can and is always a nightmare. There are some amazing tools online to help manage an unruly project, but they can be expensive and in themselves hard to manage. At Ninjality, we use some free project management tools including [Trello](https://trello.com/) and [Slack](https://slack.com/). In addition to those services, we use Google Docs and GitHub to further the project and allow for easy collaboration. 

We all know how hard managing a distributed team is, trust us we’re thousands of miles apart and all work at different times of the day. We’ve put our heads together to make a list of tools, services, and tips for how to be a project management ninja. 

###Use Trello for roadmaps

I use Trello for everything from organizing Ninjality projects to keeping a grocery list with the family. Trello is capable of being a simple note taking an app or an advance projection app with due dates, assignments to specific people, multiple boards and much more. We use different boards to separate projects. One board, for example, list all of our article ideas with due dates on each card and different people writers assigned. Other boards include client projects, CodeBee, and another general board. 

It’s powerful tool that lets you break down each project with its own board, and then have certain people assigned to different sub cards. There can be attachments, checklist, images, labels, and so much more. If you truly want to stay organized Trello is a free tool that offers such flexibility. 

###Use Slack for communication

Slack. Use it! Honestly, Slack is slowly but surely killing email and other messaging clients. Slack allows for messaging between small to large teams, allowing for real-time communication between anyone on your team. The service integrates into hundreds of services like Trello, Github, Google Drive, Bitbucket, and other developer and office management teams. 

Slack also offers voice chat, file uploads, and fun integrations with giphy which make any conversation a little more fun. 

###Carve out talk time

Between the roadmaps for projects, Trello boards, and Slack messages it's still hard to stay on the same page. The biggest roadblock we’ve run into is everyone works at different times, which can cause some headaches. We’ve taken to carving out bonding time where we play video games online or just voice chat to talk out future projects or current ones. Sending emails or slack messages will let everyone talk, but the problem is sometimes it hard to keep up if multiple people are all typing at the same time. 

We’ve found the weekly gaming or talk sessions bring us closer together. Let us freely talk about what other projects we're working on and what else we've been doing in our busy lives. We also get to unwind while we're all getting to bond and talk shop. 

###Embrace Change 

The biggest problem you’ll encounter is change. As much as you plan or try to keep everything on the rails, something will throw a wrench into your plans or make you change plans. Employees won’t make deadlines or code will break, adding weeks to the project's timeline. 

Change is a great thing in the end. It will give you headaches and because everyone pain, but in the end, it’s pushing you towards the ultimate goal of pushing out new code, or finishing an article or getting your startup funded.

###Overall

Using these tools and taking these tips you’ll become a project management ninja. We’ve used these tips and tools for well over a year, and we’ve accomplished a lot. We’ve tried dozens of other tools to manage our communication and todo list, but we’ve also returned to Slack or Trello to try and wrangle together our projects.","<p>Managing anything in the age of the internet is a nightmare. Employees are distributed, not every tool integrates, and communication can and is always a nightmare. There are some amazing tools online to help manage an unruly project, but they can be expensive and in themselves hard to manage. At Ninjality, we use some free project management tools including <a href=""https://trello.com/"">Trello</a> and <a href=""https://slack.com/"">Slack</a>. In addition to those services, we use Google Docs and GitHub to further the project and allow for easy collaboration. </p>
<p>We all know how hard managing a distributed team is, trust us we’re thousands of miles apart and all work at different times of the day. We’ve put our heads together to make a list of tools, services, and tips for how to be a project management ninja. </p>
<h3>Use Trello for roadmaps</h3>
<p>I use Trello for everything from organizing Ninjality projects to keeping a grocery list with the family. Trello is capable of being a simple note taking an app or an advance projection app with due dates, assignments to specific people, multiple boards and much more. We use different boards to separate projects. One board, for example, list all of our article ideas with due dates on each card and different people writers assigned. Other boards include client projects, CodeBee, and another general board. </p>
<p>It’s powerful tool that lets you break down each project with its own board, and then have certain people assigned to different sub cards. There can be attachments, checklist, images, labels, and so much more. If you truly want to stay organized Trello is a free tool that offers such flexibility. </p>
<h3>Use Slack for communication</h3>
<p>Slack. Use it! Honestly, Slack is slowly but surely killing email and other messaging clients. Slack allows for messaging between small to large teams, allowing for real-time communication between anyone on your team. The service integrates into hundreds of services like Trello, Github, Google Drive, Bitbucket, and other developer and office management teams. </p>
<p>Slack also offers voice chat, file uploads, and fun integrations with giphy which make any conversation a little more fun. </p>
<h3>Carve out talk time</h3>
<p>Between the roadmaps for projects, Trello boards, and Slack messages it's still hard to stay on the same page. The biggest roadblock we’ve run into is everyone works at different times, which can cause some headaches. We’ve taken to carving out bonding time where we play video games online or just voice chat to talk out future projects or current ones. Sending emails or slack messages will let everyone talk, but the problem is sometimes it hard to keep up if multiple people are all typing at the same time. </p>
<p>We’ve found the weekly gaming or talk sessions bring us closer together. Let us freely talk about what other projects we're working on and what else we've been doing in our busy lives. We also get to unwind while we're all getting to bond and talk shop. </p>
<h3>Embrace Change</h3>
<p>The biggest problem you’ll encounter is change. As much as you plan or try to keep everything on the rails, something will throw a wrench into your plans or make you change plans. Employees won’t make deadlines or code will break, adding weeks to the project's timeline. </p>
<p>Change is a great thing in the end. It will give you headaches and because everyone pain, but in the end, it’s pushing you towards the ultimate goal of pushing out new code, or finishing an article or getting your startup funded.</p>
<h3>Overall</h3>
<p>Using these tools and taking these tips you’ll become a project management ninja. We’ve used these tips and tools for well over a year, and we’ve accomplished a lot. We’ve tried dozens of other tools to manage our communication and todo list, but we’ve also returned to Slack or Trello to try and wrangle together our projects.</p>","Managing anything in the age of the internet is a nightmare. Employees are distributed, not every tool integrates, and communication can and is always a nightmare. There are some amazing tools online to help manage an unruly project, but they can be expensive and in themselves hard to manage. At Ninjality, we use some free project management tools including Trello and Slack. In addition to those services, we use Google Docs and Github to further the project and allow for easy collaboration.",how-to-be-a-project-management-ninja,General,leon@ninjality.com,"2017-02-13 05:43:47","2017-02-13 05:43:47","2016-04-01 05:43:46"
16,"How To Get Engagement On The Internet","The internet as a whole is noisy, busy, and increasingly hard to get users to comment, like, or more importantly share your article, website, or other content you’ve created. The problem with users is not everyone wants to create a new account to comment or use your service because it’s another account, another email, another annoying app they’ll need. You have to go above and beyond to get eyes, and more importantly users engaging with the services or content you’ve created. 

We’re no different here. We’ve struggled with launching a developer-centric service focused around tutorials, questions, and projects. I’m slightly biased, but I think the guys have created the best tools to share and connect with fellow developers and designers. Even while they’ve created the tools, there is a problem of getting enough users signed up. We’ve seen hundreds of users onto the service, and completing the first hurdle. The second difficulty is getting those users active on the service by sharing, creating, and utilizing the service. These users are creating content for free, with the only return of getting questions answered or getting help with a project they’re working on. The return we get is more users who in turn can help us grow and work towards monetizing a community underserved. 

Doing all of this isn’t an easy task, and we’ve struggled and tried different tactics over the year. Now we’ve come to find some tactics that work and help get users engaged with our brands and within the service where they’re sharing and created. We’ve used services like [Slack](https://slack.com/) and Twitter, giving users exclusive access to our work flows and access to a community of users that are like minded and craving help. 

###The Hive Out Slack

The Hive Out is the name of our community with [CodeBee](https://codebee.io/), it was clever and was nominated by the community. Users started calling each other fellow bees, and in turn, help brands our community of developers quickly and in a unique way that made everyone feel a part of the design and development process. 

This branding and community engagement all came from the creation of our Slack community for early beta testers. The Hive Out, the Slack name, gives users a real-time chat which makes everyone feel included in the design and development process. We ask for user's feedback on what features we should add or what tools we’re in the process of building. We’re also using the Slack channel to let users talk amongst each other about future projects, problems they’ve encountered on their projects, and have a general water cooler chat about the late dev news. 

The chat with everyone is normal with 4 or 5 select users, plus our team, but the conversation is constructive and can translate to users being more active on our the CodeBee site. 

###Being active on Social Media 

I’ve been brought onto the Ninjality team to boost community engagement, and to increase customers looking at the main Ninjality site. I’ve done a lot of blog posts; that will hopefully help fellow developers or entrepreneurs in understanding how to use Twitter, Facebook, WordPress, React, or getting people to engage on your site and services. 

Adding more noise to the internet isn’t going to get eyes or users wanting to conversate back, but adding insightful information to the noise will make it easier to convince someone you’re an expert in the field you're writing about. Of course writing a blog post where you highlight your knowledge and share it with everyone is one way to do it, but being an industry leader with followers from your industry can also help. If you're always tweeting about development or design, at least in our case, we can build an audience of followers who are like minded who lend credence towards our assertion that we are experts in developing bands and services around the social web. 

Now you can do this with anything from Fashion blogging to IT work, but you have to start following industry leaders and having conversations with them. Use hashtags that relate to your field, and have blog post sharing your expert knowledge with everyone. It’s a lot of work to give insightful information, but after a while, it’s just something you’ll do without a thought. 

###Email

Everyone uses email every day, for better or worse this is the way it happens. While Slack may kill email for some organizations, the email will likely live on for decades because it's the easiest way to communicate without having someone online all day and night. All of that being said using email to communicate with users is one of the best ways. We’ve introduced email notifications and an email newsletter to highlight announcements and the top posts from the site. The newsletter currently has an excellent open rate and click through rate. 

The newsletter may have been a late decision for us, but it's been one of the best ones yet. Of course, some people don’t like emails, and they’ve unsubscribed or complained to us. We’ve also looked at using desktop notifications from Safari or Chrome to alert users of new comments, top post, or new features, but implementing this feature is slightly harder than setting up an email newsletter. 

###Overall

There are other ways to get users engaging with your content. There are other ways to get users engaged with you such as giveaways or real life meets up or even doing viral videos that are quirky and unique.  

The email newsletters and notifications, with the slack and social presence, has helped create our brand. It also helps keep users on CodeBee engage with us and creating our tutorials, asking questions, or posting links to their projects. We also have a few other features and plans for getting more users engaged but we cannot give away all of our secrets, at least not yet. 

If you’re a developer or designer, check out CodeBee for an amazing community focused around seeking help on projects. There is an early beta tester list, but we’re sending out invites on a daily basis, with more users joining the hive every day.","<p>The internet as a whole is noisy, busy, and increasingly hard to get users to comment, like, or more importantly share your article, website, or other content you’ve created. The problem with users is not everyone wants to create a new account to comment or use your service because it’s another account, another email, another annoying app they’ll need. You have to go above and beyond to get eyes, and more importantly users engaging with the services or content you’ve created. </p>
<p>We’re no different here. We’ve struggled with launching a developer-centric service focused around tutorials, questions, and projects. I’m slightly biased, but I think the guys have created the best tools to share and connect with fellow developers and designers. Even while they’ve created the tools, there is a problem of getting enough users signed up. We’ve seen hundreds of users onto the service, and completing the first hurdle. The second difficulty is getting those users active on the service by sharing, creating, and utilizing the service. These users are creating content for free, with the only return of getting questions answered or getting help with a project they’re working on. The return we get is more users who in turn can help us grow and work towards monetizing a community underserved. </p>
<p>Doing all of this isn’t an easy task, and we’ve struggled and tried different tactics over the year. Now we’ve come to find some tactics that work and help get users engaged with our brands and within the service where they’re sharing and created. We’ve used services like <a href=""https://slack.com/"">Slack</a> and Twitter, giving users exclusive access to our work flows and access to a community of users that are like minded and craving help. </p>
<h3>The Hive Out Slack</h3>
<p>The Hive Out is the name of our community with <a href=""https://codebee.io/"">CodeBee</a>, it was clever and was nominated by the community. Users started calling each other fellow bees, and in turn, help brands our community of developers quickly and in a unique way that made everyone feel a part of the design and development process. </p>
<p>This branding and community engagement all came from the creation of our Slack community for early beta testers. The Hive Out, the Slack name, gives users a real-time chat which makes everyone feel included in the design and development process. We ask for user's feedback on what features we should add or what tools we’re in the process of building. We’re also using the Slack channel to let users talk amongst each other about future projects, problems they’ve encountered on their projects, and have a general water cooler chat about the late dev news. </p>
<p>The chat with everyone is normal with 4 or 5 select users, plus our team, but the conversation is constructive and can translate to users being more active on our the CodeBee site. </p>
<h3>Being active on Social Media</h3>
<p>I’ve been brought onto the Ninjality team to boost community engagement, and to increase customers looking at the main Ninjality site. I’ve done a lot of blog posts; that will hopefully help fellow developers or entrepreneurs in understanding how to use Twitter, Facebook, WordPress, React, or getting people to engage on your site and services. </p>
<p>Adding more noise to the internet isn’t going to get eyes or users wanting to conversate back, but adding insightful information to the noise will make it easier to convince someone you’re an expert in the field you're writing about. Of course writing a blog post where you highlight your knowledge and share it with everyone is one way to do it, but being an industry leader with followers from your industry can also help. If you're always tweeting about development or design, at least in our case, we can build an audience of followers who are like minded who lend credence towards our assertion that we are experts in developing bands and services around the social web. </p>
<p>Now you can do this with anything from Fashion blogging to IT work, but you have to start following industry leaders and having conversations with them. Use hashtags that relate to your field, and have blog post sharing your expert knowledge with everyone. It’s a lot of work to give insightful information, but after a while, it’s just something you’ll do without a thought. </p>
<h3>Email</h3>
<p>Everyone uses email every day, for better or worse this is the way it happens. While Slack may kill email for some organizations, the email will likely live on for decades because it's the easiest way to communicate without having someone online all day and night. All of that being said using email to communicate with users is one of the best ways. We’ve introduced email notifications and an email newsletter to highlight announcements and the top posts from the site. The newsletter currently has an excellent open rate and click through rate. </p>
<p>The newsletter may have been a late decision for us, but it's been one of the best ones yet. Of course, some people don’t like emails, and they’ve unsubscribed or complained to us. We’ve also looked at using desktop notifications from Safari or Chrome to alert users of new comments, top post, or new features, but implementing this feature is slightly harder than setting up an email newsletter. </p>
<h3>Overall</h3>
<p>There are other ways to get users engaging with your content. There are other ways to get users engaged with you such as giveaways or real life meets up or even doing viral videos that are quirky and unique.  </p>
<p>The email newsletters and notifications, with the slack and social presence, has helped create our brand. It also helps keep users on CodeBee engage with us and creating our tutorials, asking questions, or posting links to their projects. We also have a few other features and plans for getting more users engaged but we cannot give away all of our secrets, at least not yet. </p>
<p>If you’re a developer or designer, check out CodeBee for an amazing community focused around seeking help on projects. There is an early beta tester list, but we’re sending out invites on a daily basis, with more users joining the hive every day.</p>","The internet as a whole is noisy, busy, and increasingly hard to get users to comment, like, or more importantly share your article, website, or other content you’ve created. The problem with users is not everyone wants to create a new account to comment or use your service because it’s another account, another email, another annoying app they’ll need. You have to go above and beyond to get eyes, and more importantly users engaging with the services or content you’ve created.",how-to-get-engagement-on-the-internet,General,leon@ninjality.com,"2017-02-13 05:44:41","2017-02-13 05:44:41","2016-04-10 05:44:40"
17,"How To Set Up Facebook Instant Articles","Facebook Instant Articles are stripped down version of your blog hosted on Facebook’s servers. The pages load *instantly* and have minimal branding from your site. While many publishers argue the Instant Articles are bad for publishers, they have higher engagement and read time than a standard web page - surprise when something loads quickly users are more likely to use it. Even though your website branding may is minimal, you're still able to generate ad revenue from the articles through Facebook’s Audience Network or Google Adsense. 

The Instant Articles aren’t limited to large publishers like Vice, BuzzFeed, or CNN. [Facebook Instant Articles open to any publisher](http://digitalbounds.com/2016/04/12/facebook-instant-articles-are-now-open-to-all-publishers/) large or small, making it necessary and somewhat easy to enable Instant Articles on your site. I spent a few hours researching Wordpress plugins, searching for how to set up the Facebook app, and finally how to necessary my older articles into Facebook’s newish platform. Now my struggle is going to help you through the process of setting up Instant Articles through WordPress. 

# WordPress Plugin

![Screenshot of Install Plugin](http://digitalbounds.com/wp-content/uploads/2016/04/installplugin.png)

First, you’re going to want to grab a WordPress plugin for Facebook’s Instant articles to make everything easier. A lot of publishers are using the PageFrog plugin, but it hasn’t been updated with new instructions for the updated process. While Vox Media uses a version of the plugin, I’ve found the Instant Articles for WP plugin to be extremely useful, and helpful because Automattic, Facebook, and another developer are all working on the plugin. 

![Screenshot of WordPress Plugin](http://digitalbounds.com/wp-content/uploads/2016/04/wpplugin.png)

Once installed the bottom left corner will show the Instant Article Menu where you can setup the plugin. Also, give you a step by step that you can also follow along with. 

# Facebook Developer App

![Screenshot of Facebook Developer App](http://digitalbounds.com/wp-content/uploads/2016/04/fbdevapp.png)

Once the plugin is installed, it’s going to want a Facebook App to not only verify your website's address but to help it publish articles to the Instant Article platform. You have to add a new app, name it whatever you’d like. I called mine DB Instant because I have other apps for other integrations I work on. Then press the ""Add Platform"" button where you’ll add a “website.” The web address will be yourdomain.com, and allow Facebook to verify you own the website and that’s where you're going to publish from.

# Claim your URL

Claiming your website's URL is the most important step, and you cannot move forward without this critical step. The tag for the website doesn’t have to be added because you're using a Facebook developer app to authorize your site. Simply add your address and press ""*Claim URL.*.""

![Screenshot of Claim URL](http://digitalbounds.com/wp-content/uploads/2016/04/cliamurl.png)

# Production RSS Feed

![Screenshot of Production RSS Feed](http://digitalbounds.com/wp-content/uploads/2016/04/productionrssfeed.png)

Then the Production RSS Feed is going to be the RSS feed from your website. You’ll drop the link in there so Facebook can add older articles into the Facebook platform, and have articles that you can submit to Facebook for Review. 

Style the Instant Articles

![Screenshot of Style Instant Article](http://digitalbounds.com/wp-content/uploads/2016/04/styleinstantarticle.png)

Even though Facebook controls the main stylings of the articles, you're able to add your logo in the little header section. There are a lot of options for font styles, font colors, and accent colors. You’ll have to play around with the different styles and try to find something that fits your website's style and branding. 

![image alt text](http://digitalbounds.com/wp-content/uploads/2016/04/fontstyles.png)

# Audience Network

![Screenshot of Audience Network](http://digitalbounds.com/wp-content/uploads/2016/04/audincenetwork.png)

If you use blogging or writing as a primary source of income, you’ll want to enable ads either through Facebook’s own Audience Network or Google Adsense. If you mainly use Adsense and feel more comfortable with the platform, you can enable to ads through the Wordpress plugin. I opt for Facebook’s Audience Network because I’m hoping their ads will not only be higher quality but offer higher CPMS than Google’s network might. 

The ads are still banner ads and don’t include pop-up, overlay, or other annoying ads that you’ll find on the web. 

# Submit for Review

![Screenshot of Submit For Review](http://digitalbounds.com/wp-content/uploads/2016/04/submitforreview.png)

Submitting for review is to ensure your articles are a good fit for Facebook’s network and don’t to break what Facebook is doing. The articles are formatted to Instant Article style from your RSS feed, and you’ll need over 50 articles in the platform before Facebook lets you submit them for review. 

The process takes anywhere from 24 to 48 hours, but sometimes quicker when Facebook is in full force. My review took close to the 48-hour mark, but I have over 600 articles that I reformatted for Instant Articles. 

# Enjoy Instant Articles

The setup process should take an hour, which isn’t long when you're setting something up on Facebook. The process is an outline on their documentation, but can sometimes be vague and not hold your hand when you're trying to set something up that is new and somewhat confusing. There are a lot of moving parts to the setup, and I took well over 3 hours trying to set up and figure out any problems I encountered.

I’ve been excited to use Instant Articles since they first announced the feature.I would read a lot of news on Facebook, and sites did take a long time to load or had shitty ads. Facebook’s new platform makes articles load *instantly’ *, and every publisher is confirmed to a set of rules for ads. That means no ugly pop-ups or overlays that distract from the writing. It’s simply pictures, words, and an ad or two. Nothing more or less. 

The Ninjality team works with publishers who want their branding to an extent far beyond their websites or blogs, and we offer integrations to Facebook’s Instant Articles if you’re feeling like this process is too overwhelming. Head over to the [contact page](https://ninjality.com/contact) to tell us if you need Facebook Instant Article help and if you’d like the styling to match a new WordPress custom theme you also want to be built ;)","<p>Facebook Instant Articles are stripped down version of your blog hosted on Facebook’s servers. The pages load <em>instantly</em> and have minimal branding from your site. While many publishers argue the Instant Articles are bad for publishers, they have higher engagement and read time than a standard web page - surprise when something loads quickly users are more likely to use it. Even though your website branding may is minimal, you're still able to generate ad revenue from the articles through Facebook’s Audience Network or Google Adsense. </p>
<p>The Instant Articles aren’t limited to large publishers like Vice, BuzzFeed, or CNN. <a href=""http://digitalbounds.com/2016/04/12/facebook-instant-articles-are-now-open-to-all-publishers/"">Facebook Instant Articles open to any publisher</a> large or small, making it necessary and somewhat easy to enable Instant Articles on your site. I spent a few hours researching Wordpress plugins, searching for how to set up the Facebook app, and finally how to necessary my older articles into Facebook’s newish platform. Now my struggle is going to help you through the process of setting up Instant Articles through WordPress. </p>
<h1>WordPress Plugin</h1>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/installplugin.png"" alt=""Screenshot of Install Plugin"" /></p>
<p>First, you’re going to want to grab a WordPress plugin for Facebook’s Instant articles to make everything easier. A lot of publishers are using the PageFrog plugin, but it hasn’t been updated with new instructions for the updated process. While Vox Media uses a version of the plugin, I’ve found the Instant Articles for WP plugin to be extremely useful, and helpful because Automattic, Facebook, and another developer are all working on the plugin. </p>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/wpplugin.png"" alt=""Screenshot of WordPress Plugin"" /></p>
<p>Once installed the bottom left corner will show the Instant Article Menu where you can setup the plugin. Also, give you a step by step that you can also follow along with. </p>
<h1>Facebook Developer App</h1>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/fbdevapp.png"" alt=""Screenshot of Facebook Developer App"" /></p>
<p>Once the plugin is installed, it’s going to want a Facebook App to not only verify your website's address but to help it publish articles to the Instant Article platform. You have to add a new app, name it whatever you’d like. I called mine DB Instant because I have other apps for other integrations I work on. Then press the &quot;Add Platform&quot; button where you’ll add a “website.” The web address will be yourdomain.com, and allow Facebook to verify you own the website and that’s where you're going to publish from.</p>
<h1>Claim your URL</h1>
<p>Claiming your website's URL is the most important step, and you cannot move forward without this critical step. The tag for the website doesn’t have to be added because you're using a Facebook developer app to authorize your site. Simply add your address and press &quot;<em>Claim URL.</em>.&quot;</p>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/cliamurl.png"" alt=""Screenshot of Claim URL"" /></p>
<h1>Production RSS Feed</h1>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/productionrssfeed.png"" alt=""Screenshot of Production RSS Feed"" /></p>
<p>Then the Production RSS Feed is going to be the RSS feed from your website. You’ll drop the link in there so Facebook can add older articles into the Facebook platform, and have articles that you can submit to Facebook for Review. </p>
<p>Style the Instant Articles</p>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/styleinstantarticle.png"" alt=""Screenshot of Style Instant Article"" /></p>
<p>Even though Facebook controls the main stylings of the articles, you're able to add your logo in the little header section. There are a lot of options for font styles, font colors, and accent colors. You’ll have to play around with the different styles and try to find something that fits your website's style and branding. </p>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/fontstyles.png"" alt=""image alt text"" /></p>
<h1>Audience Network</h1>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/audincenetwork.png"" alt=""Screenshot of Audience Network"" /></p>
<p>If you use blogging or writing as a primary source of income, you’ll want to enable ads either through Facebook’s own Audience Network or Google Adsense. If you mainly use Adsense and feel more comfortable with the platform, you can enable to ads through the Wordpress plugin. I opt for Facebook’s Audience Network because I’m hoping their ads will not only be higher quality but offer higher CPMS than Google’s network might. </p>
<p>The ads are still banner ads and don’t include pop-up, overlay, or other annoying ads that you’ll find on the web. </p>
<h1>Submit for Review</h1>
<p><img src=""http://digitalbounds.com/wp-content/uploads/2016/04/submitforreview.png"" alt=""Screenshot of Submit For Review"" /></p>
<p>Submitting for review is to ensure your articles are a good fit for Facebook’s network and don’t to break what Facebook is doing. The articles are formatted to Instant Article style from your RSS feed, and you’ll need over 50 articles in the platform before Facebook lets you submit them for review. </p>
<p>The process takes anywhere from 24 to 48 hours, but sometimes quicker when Facebook is in full force. My review took close to the 48-hour mark, but I have over 600 articles that I reformatted for Instant Articles. </p>
<h1>Enjoy Instant Articles</h1>
<p>The setup process should take an hour, which isn’t long when you're setting something up on Facebook. The process is an outline on their documentation, but can sometimes be vague and not hold your hand when you're trying to set something up that is new and somewhat confusing. There are a lot of moving parts to the setup, and I took well over 3 hours trying to set up and figure out any problems I encountered.</p>
<p>I’ve been excited to use Instant Articles since they first announced the feature.I would read a lot of news on Facebook, and sites did take a long time to load or had shitty ads. Facebook’s new platform makes articles load <em>instantly’ </em>, and every publisher is confirmed to a set of rules for ads. That means no ugly pop-ups or overlays that distract from the writing. It’s simply pictures, words, and an ad or two. Nothing more or less. </p>
<p>The Ninjality team works with publishers who want their branding to an extent far beyond their websites or blogs, and we offer integrations to Facebook’s Instant Articles if you’re feeling like this process is too overwhelming. Head over to the <a href=""https://ninjality.com/contact"">contact page</a> to tell us if you need Facebook Instant Article help and if you’d like the styling to match a new WordPress custom theme you also want to be built ;)</p>","Facebook Instant Articles are stripped down version of your blog hosted on Facebook’s servers. The pages load *instantly’ *and have minimal branding from your site. While many publishers argue the Instant Articles are bad for publishers, they have higher engagement and read time than a standard web page. We'll help you set up Facebook Instant Articles on your WordPress install.",how-to-set-up-facebook-instant-articles,General|Tutorials,leon@ninjality.com,"2017-02-13 05:45:57","2017-02-13 05:45:57","2016-04-17 05:45:54"
18,"How To Be A GitHub Ninja","Git is very important to our work here at Ninjality. All the code that is written is stored in repositories so that it can be backed up and shared amongst the team. In regards to open source, we think that it is very important to contribute by sharing code so that others can learn from it, use it for their own projects, and overall grow the community. [GitHub](https://github.com/) is a code hosting platform for Git that incorporates social features, and we've posted some of our projects on it such as [socialshares](https://github.com/socialshares/buttons) and [devnews](https://github.com/devnews/web). We've realized that learning how to use GitHub isn't easy, but it's not impossible to become a GitHub Ninja thanks to the following tips.

## Learn Git Terminology

The first thing that got us confused was all the terminology that came along with Git and GitHub. There are some basic ones that are fairly important to figure out from the start, and conveniently GitHub provides [a glossary of specific terms](https://help.github.com/articles/github-glossary/). When managing your own repositories, it is important to understand how these terms relate to a basic flow:

1. You ""clone"" your repository from GitHub to your own computer.
2. You change some code or files, and ""commit"" your changes to the local repository.
3. You ""push"" those commits up to the ""master branch"" of the repository on GitHub. Note that code can be separated with branches, and ""master"" is the primary one.
4. ...
5. Profit!

There are other things such as forking repositories, creating tags for versions, and so on which we'll explain in the later sections.

## Use a GUI App

Git is actually a command-line tool where you normally have to type commands like `git commit -m ""my changes""`. However, this may seem daunting and even experienced users may prefer to use a GUI app. We personally like to use [SourceTree](https://www.sourcetreeapp.com/) because we work on repositories from both GitHub and [Bitbucket](https://bitbucket.org/). However, you may want to check out [GitHub Desktop](https://desktop.github.com/) for working exclusively with GitHub repositories.

A desktop app can really help in terms of creating new repositories and visualizing your work. GitHub has nice integration with their app because they allow you to clone repositories directly from their web interface. Note that you may still want to learn how Git works on the command-line to understand what happens under-the-hood of these desktop apps. There are also times when you may need to use the command-line to resolve issues such as merge conflicts.

## Commit Often

There is no standard way to define what a commit should be, because it differs between developers and companies. We believe in meaningful organization, so separating related changes together into a single commit is fine. However, make sure that you commit often enough so that you can easily undo a previous change. Since Git is a version control tool, it is best to use it that way and revision your changes when needed. In GitHub Desktop, you can easily ""revert this commit"" and figure out what caused a bug in your code.

## Ignore Compiled and Vendor Files

There are some things that you actually don't want to commit to your repository. Some files are pretty obvious, such as `.DS_Store`, or `.log` files. However, you should also ignore vendor package directories such as `node_modules` and `bower_components`. This is because anyone on your team, or your deployment script, can run `npm install` to get those dependencies into their clone of the project. The advantage of this is that you are not uploading a large number of files that you did not even create. Do note that GitHub imposes limits on [repository and upload size](https://help.github.com/articles/what-is-my-disk-quota/) so ignoring these files help keep your repository small. This also goes for if you're processing your CSS with Sass/Less/PostCSS, and your JavaScript with Browserify/Webpack/Babel. If you output these files into some sort of ""build"" folder, you can also ignore that entire build folder.

So how do you ignore these files? Git has what is called a `.gitignore` file that you place at the root of your repository. In it, you write which files and folders should be ignored. Each rule is written on its own line, and the `*` wildcard character is allowed. GitHub provides [a list of .gitignore templates](https://github.com/github/gitignore) depending on language or framework.

## Use Branches and Tags

Now, what happens when you want to organize those commits? Say, you're working on a new feature or version of your app? This is where branches and tags come in. Branches are nice when you want to have essentially two versions of your code without having to create a separate repository. The master branch is where your main code lives, but by creating a new branch (e.g. feature-coolstuff) you can start working on that new feature without messing with the master branch (you can easily switch between the branches in GitHub Desktop). This is also really useful when you want to help an open source project, because you can create a branch of a repository (e.g. my-bug-fix), commit changes to that branch, and then submit it as a pull request to that repository.

Tags are more useful for public projects, because they're normally used for creating versions. They are essentially placeholders in your code in which you're saying ""code up to here is version 1"". Package managers such as [npm](https://www.npmjs.com/) and [Bower](http://bower.io/) like to follow a naming convention for tags such as `v1.0.0` which is also known as [Semantic Versioning](http://semver.org/).

## Use Organizations

When creating an open source project on GitHub, you may decide to simply create a repository under your personal username account. However, if you have high ambitions for the project (which you should), you should probably [create an organization](https://github.com/blog/674-introducing-organizations) for your project. This basically means that instead of having your repository live under `joeschmo/project`, instead it will be `project/repo`. There are some significant benefits to this. First, it is good for simply categorizing repositories, especially if you may have a related repository to that project (e.g. documentation site). Second, it doesn't associate the project with only a single person even if you're still the only person working on it. Third, if you ever do want to transfer ownership or have a large number of people working on the project, you won't have to move/rename the repository.

## Contribute To Other Repositories

GitHub is a social place for developers to work on code. So, why not contribute and get your name on a project's commit history? Some projects even have a contributor list to show who helped with the project. It can be a really small change that you can do from GitHub's web interface, such as fixing a typo in the readme or documentation. Looking for places to contribute? Just visit any semi-popular repository and go to the issues tab. Some may even be labeled as ""help-needed"" which is great for those who are just getting started with open source.

## JUST DO IT!

Get into using GitHub and open source, it's a rewarding experience.","<p>Git is very important to our work here at Ninjality. All the code that is written is stored in repositories so that it can be backed up and shared amongst the team. In regards to open source, we think that it is very important to contribute by sharing code so that others can learn from it, use it for their own projects, and overall grow the community. <a href=""https://github.com/"">GitHub</a> is a code hosting platform for Git that incorporates social features, and we've posted some of our projects on it such as <a href=""https://github.com/socialshares/buttons"">socialshares</a> and <a href=""https://github.com/devnews/web"">devnews</a>. We've realized that learning how to use GitHub isn't easy, but it's not impossible to become a GitHub Ninja thanks to the following tips.</p>
<h2>Learn Git Terminology</h2>
<p>The first thing that got us confused was all the terminology that came along with Git and GitHub. There are some basic ones that are fairly important to figure out from the start, and conveniently GitHub provides <a href=""https://help.github.com/articles/github-glossary/"">a glossary of specific terms</a>. When managing your own repositories, it is important to understand how these terms relate to a basic flow:</p>
<ol>
<li>You &quot;clone&quot; your repository from GitHub to your own computer.</li>
<li>You change some code or files, and &quot;commit&quot; your changes to the local repository.</li>
<li>You &quot;push&quot; those commits up to the &quot;master branch&quot; of the repository on GitHub. Note that code can be separated with branches, and &quot;master&quot; is the primary one.</li>
<li>...</li>
<li>Profit!</li>
</ol>
<p>There are other things such as forking repositories, creating tags for versions, and so on which we'll explain in the later sections.</p>
<h2>Use a GUI App</h2>
<p>Git is actually a command-line tool where you normally have to type commands like <code>git commit -m ""my changes""</code>. However, this may seem daunting and even experienced users may prefer to use a GUI app. We personally like to use <a href=""https://www.sourcetreeapp.com/"">SourceTree</a> because we work on repositories from both GitHub and <a href=""https://bitbucket.org/"">Bitbucket</a>. However, you may want to check out <a href=""https://desktop.github.com/"">GitHub Desktop</a> for working exclusively with GitHub repositories.</p>
<p>A desktop app can really help in terms of creating new repositories and visualizing your work. GitHub has nice integration with their app because they allow you to clone repositories directly from their web interface. Note that you may still want to learn how Git works on the command-line to understand what happens under-the-hood of these desktop apps. There are also times when you may need to use the command-line to resolve issues such as merge conflicts.</p>
<h2>Commit Often</h2>
<p>There is no standard way to define what a commit should be, because it differs between developers and companies. We believe in meaningful organization, so separating related changes together into a single commit is fine. However, make sure that you commit often enough so that you can easily undo a previous change. Since Git is a version control tool, it is best to use it that way and revision your changes when needed. In GitHub Desktop, you can easily &quot;revert this commit&quot; and figure out what caused a bug in your code.</p>
<h2>Ignore Compiled and Vendor Files</h2>
<p>There are some things that you actually don't want to commit to your repository. Some files are pretty obvious, such as <code>.DS_Store</code>, or <code>.log</code> files. However, you should also ignore vendor package directories such as <code>node_modules</code> and <code>bower_components</code>. This is because anyone on your team, or your deployment script, can run <code>npm install</code> to get those dependencies into their clone of the project. The advantage of this is that you are not uploading a large number of files that you did not even create. Do note that GitHub imposes limits on <a href=""https://help.github.com/articles/what-is-my-disk-quota/"">repository and upload size</a> so ignoring these files help keep your repository small. This also goes for if you're processing your CSS with Sass/Less/PostCSS, and your JavaScript with Browserify/Webpack/Babel. If you output these files into some sort of &quot;build&quot; folder, you can also ignore that entire build folder.</p>
<p>So how do you ignore these files? Git has what is called a <code>.gitignore</code> file that you place at the root of your repository. In it, you write which files and folders should be ignored. Each rule is written on its own line, and the <code>*</code> wildcard character is allowed. GitHub provides <a href=""https://github.com/github/gitignore"">a list of .gitignore templates</a> depending on language or framework.</p>
<h2>Use Branches and Tags</h2>
<p>Now, what happens when you want to organize those commits? Say, you're working on a new feature or version of your app? This is where branches and tags come in. Branches are nice when you want to have essentially two versions of your code without having to create a separate repository. The master branch is where your main code lives, but by creating a new branch (e.g. feature-coolstuff) you can start working on that new feature without messing with the master branch (you can easily switch between the branches in GitHub Desktop). This is also really useful when you want to help an open source project, because you can create a branch of a repository (e.g. my-bug-fix), commit changes to that branch, and then submit it as a pull request to that repository.</p>
<p>Tags are more useful for public projects, because they're normally used for creating versions. They are essentially placeholders in your code in which you're saying &quot;code up to here is version 1&quot;. Package managers such as <a href=""https://www.npmjs.com/"">npm</a> and <a href=""http://bower.io/"">Bower</a> like to follow a naming convention for tags such as <code>v1.0.0</code> which is also known as <a href=""http://semver.org/"">Semantic Versioning</a>.</p>
<h2>Use Organizations</h2>
<p>When creating an open source project on GitHub, you may decide to simply create a repository under your personal username account. However, if you have high ambitions for the project (which you should), you should probably <a href=""https://github.com/blog/674-introducing-organizations"">create an organization</a> for your project. This basically means that instead of having your repository live under <code>joeschmo/project</code>, instead it will be <code>project/repo</code>. There are some significant benefits to this. First, it is good for simply categorizing repositories, especially if you may have a related repository to that project (e.g. documentation site). Second, it doesn't associate the project with only a single person even if you're still the only person working on it. Third, if you ever do want to transfer ownership or have a large number of people working on the project, you won't have to move/rename the repository.</p>
<h2>Contribute To Other Repositories</h2>
<p>GitHub is a social place for developers to work on code. So, why not contribute and get your name on a project's commit history? Some projects even have a contributor list to show who helped with the project. It can be a really small change that you can do from GitHub's web interface, such as fixing a typo in the readme or documentation. Looking for places to contribute? Just visit any semi-popular repository and go to the issues tab. Some may even be labeled as &quot;help-needed&quot; which is great for those who are just getting started with open source.</p>
<h2>JUST DO IT!</h2>
<p>Get into using GitHub and open source, it's a rewarding experience.</p>","Git is very important to our work here at Ninjality. All the code that is written is stored in repositories so that it can be backed up and shared amongst the team. In regards to open source, we think that it is very important to contribute by sharing code so that others can learn from it, use it for their own projects, and overall grow the community. GitHub is a code hosting platform for Git that incorporates social features, and we've posted some of our projects on it such as socialshares and devnews. We've realized that learning how to use GitHub isn't easy, but it's not impossible to become a GitHub Ninja thanks to the following tips.",how-to-be-a-github-ninja,Coding,sunny@ninjality.com,"2017-02-13 05:47:35","2017-02-13 05:47:35","2016-04-20 05:47:34"
19,"What is CodeBee?","Here at Ninjality, we strive to build social experiences for small close knit communities. We, of course, apply this thinking to our clients when we're building them websites, apps, or working to brand their newly minted company. We’re also working towards building our community around developers and designers. CodeBee.io is one of the handfuls of apps and services we’re working on to solve our problems, but also to refine our skill sets and test new ideas and development plans.  

*CodeBee is a social help site for developers, designers, and dev enthusiasts.*

We launched the project a little over a year ago, and now have 300 users beta testing the service. We iterated through a lot of versions of the site and shifted focus multiple times over the year. In this feature, we’re going to describe the problem we're solving, how we are planning to make money, and other crucial questions.

# The Problem

The problem was simple for us: we’re disrupted developers who would read dozens of tutorials and other developer articles. We realized there weren't any meaningful conversations around these articles, and we weren’t able to ask questions or make comments if we encounter a problem. *CodeBee solves those feedback issues through a social network style website.* The user-made *tutorials*, *questions*, and *projects *can be shared with followers and at any point you’re able to comment or ask a question. 

Users on the site can create tutorials on programming languages and design topics. Then users are immediately able to read, comment, and vet the tutorial on the site. We also know how important it is to ask questions because tutorials may not always exist for the API or programming language you're working with. Asking for help on CodeBee means you’ll get answers from fellow developers who might have run into the same problem in the course of their project. And as we mention plans, you’re able to share projects big or small with the CodeBee community. You can get feedback immediately and even get potential users who could help you out along the way.  

# How to make money

Unlike most sites we don’t place ads all over CodeBee, instead, we’ve opted for a premium model. We’re working on premium accounts which will give users access to unique features, a Slack private chat, and many more unreleased features. These accounts will let users show their pride in CodeBee, and take full advantage of the developer and designer community. 

The revenue towards this will allow us to keep annoying ads out of CodeBee’s timeline. We will feature some ads within CodeBee, but they’re going to be featured post or trending tutorials. They’ll promote content from creators within the community. They're also be sponsored or promoted projects that you can bring more attention to a new project you're working on where you can then get feedback or have a conversation around it on CodeBee. 

# What users think

The feedback from users has been positive, and we’ve also received a lot of feedback. 

### *The Pros:*

* Love the community

* Questions can be answered at anytime

* Appreciate the knowledge base from hundreds of users

The community is the most important part of CodeBee and the main reason we built the social network. We are a team of remote developers and designers, and not having someone to ask questions or share projects with is hard, which is now solved with the community we’ve built. The growing number of tutorials is allowing users to learn new languages and create complete projects. 

### The Cons:

* Not enough content (Tutorials mainly)

* Want more robust features

* More active community

While we wouldn’t call these cons, more like areas for improvement, we’ve taken steps to alleviate the problems. We understand how the community can influence the service, much like how users create hashtags, at replies, and much more for Twitter. We’ve started working on tutorials being created by our teams and friends of ours, and we’re asking users to create more content. It’s a slow and hard march, but we’re getting more submissions from projects to tutorials. Lastly, keeping the community engaged and thrilled to contribute is hard and sometimes frustrating. We understand the value of the product we’re building, but getting others to provide extensive knowledge takes a little more effort. We’re slowly getting the beta users engaged, and we’re using a private Slack chat for all the bees. 

# How will we grow

We’d like to believe users will come if we build a great product. However, there is a lot more that goes into it. 

### *Email Marketing*

The greatest tool on the internet is still email marketing, even if two out ten subscribers are listening they’re the most loyal and engaged customers. We’re going to round up weekly, and top monthly post on the site, and as the site grows with content we’ll resurface older high performing articles for everyone’s enjoyment. 

We’re also using email to send notifications to users. They’re able to opt out of these reminders, but the emails sent out have high open rates with high click throughs, which is a rarity on the internet. 

### *Content Marketing*

Content marketing is a fancy word for blogging. We’re creating unique and informative articles on CodeBee and this blog to help you with Twitter, Facebook Instant Articles, or React.js. We want to offer you unique and productive content that’ll help you with running a business daily. If along the way you need help from us we can step in and further expand on our knowledge, we can’t give everything we know away. 

All in all, you’ll see a lot more posting from me, and the team. If you have article ideas or something you want broken down, shoot us a tweet or email the team so I can hop on those article ideas. 

### *Product Hunt etc*. 

Using services like Product Hunt is key to our success. A lot of developers and designers are using Product Hunt to share their new apps, podcast, or books with other liked minded influencers. I’ve been active on the site submitted amazing products, commenting, and of course encouraging folks to venture over to this blog or CodeBee. 

# Overall

CodeBee is still an unfinished product. It’s the least viable product that’s useful, powerful, and something that people enjoy enough. We understand software is never done; it’s in a constant state of refreshes or updates. At the same time, the beta users have a product they enjoy and want to contribute to, and they’re excited to see new features or users join the service. 

If you want to request an invite to CodeBee check out the site and tell us what you think. We’re working on adding new features every day, and we even have a public roadmap where users are suggesting new features and pointing out bugs that need to be squashed.","<p>Here at Ninjality, we strive to build social experiences for small close knit communities. We, of course, apply this thinking to our clients when we're building them websites, apps, or working to brand their newly minted company. We’re also working towards building our community around developers and designers. CodeBee.io is one of the handfuls of apps and services we’re working on to solve our problems, but also to refine our skill sets and test new ideas and development plans.  </p>
<p><em>CodeBee is a social help site for developers, designers, and dev enthusiasts.</em></p>
<p>We launched the project a little over a year ago, and now have 300 users beta testing the service. We iterated through a lot of versions of the site and shifted focus multiple times over the year. In this feature, we’re going to describe the problem we're solving, how we are planning to make money, and other crucial questions.</p>
<h1>The Problem</h1>
<p>The problem was simple for us: we’re disrupted developers who would read dozens of tutorials and other developer articles. We realized there weren't any meaningful conversations around these articles, and we weren’t able to ask questions or make comments if we encounter a problem. <em>CodeBee solves those feedback issues through a social network style website.</em> The user-made <em>tutorials</em>, <em>questions</em>, and <em>projects </em>can be shared with followers and at any point you’re able to comment or ask a question. </p>
<p>Users on the site can create tutorials on programming languages and design topics. Then users are immediately able to read, comment, and vet the tutorial on the site. We also know how important it is to ask questions because tutorials may not always exist for the API or programming language you're working with. Asking for help on CodeBee means you’ll get answers from fellow developers who might have run into the same problem in the course of their project. And as we mention plans, you’re able to share projects big or small with the CodeBee community. You can get feedback immediately and even get potential users who could help you out along the way.  </p>
<h1>How to make money</h1>
<p>Unlike most sites we don’t place ads all over CodeBee, instead, we’ve opted for a premium model. We’re working on premium accounts which will give users access to unique features, a Slack private chat, and many more unreleased features. These accounts will let users show their pride in CodeBee, and take full advantage of the developer and designer community. </p>
<p>The revenue towards this will allow us to keep annoying ads out of CodeBee’s timeline. We will feature some ads within CodeBee, but they’re going to be featured post or trending tutorials. They’ll promote content from creators within the community. They're also be sponsored or promoted projects that you can bring more attention to a new project you're working on where you can then get feedback or have a conversation around it on CodeBee. </p>
<h1>What users think</h1>
<p>The feedback from users has been positive, and we’ve also received a lot of feedback. </p>
<h3><em>The Pros:</em></h3>
<ul>
<li>
<p>Love the community</p>
</li>
<li>
<p>Questions can be answered at anytime</p>
</li>
<li>Appreciate the knowledge base from hundreds of users</li>
</ul>
<p>The community is the most important part of CodeBee and the main reason we built the social network. We are a team of remote developers and designers, and not having someone to ask questions or share projects with is hard, which is now solved with the community we’ve built. The growing number of tutorials is allowing users to learn new languages and create complete projects. </p>
<h3>The Cons:</h3>
<ul>
<li>
<p>Not enough content (Tutorials mainly)</p>
</li>
<li>
<p>Want more robust features</p>
</li>
<li>More active community</li>
</ul>
<p>While we wouldn’t call these cons, more like areas for improvement, we’ve taken steps to alleviate the problems. We understand how the community can influence the service, much like how users create hashtags, at replies, and much more for Twitter. We’ve started working on tutorials being created by our teams and friends of ours, and we’re asking users to create more content. It’s a slow and hard march, but we’re getting more submissions from projects to tutorials. Lastly, keeping the community engaged and thrilled to contribute is hard and sometimes frustrating. We understand the value of the product we’re building, but getting others to provide extensive knowledge takes a little more effort. We’re slowly getting the beta users engaged, and we’re using a private Slack chat for all the bees. </p>
<h1>How will we grow</h1>
<p>We’d like to believe users will come if we build a great product. However, there is a lot more that goes into it. </p>
<h3><em>Email Marketing</em></h3>
<p>The greatest tool on the internet is still email marketing, even if two out ten subscribers are listening they’re the most loyal and engaged customers. We’re going to round up weekly, and top monthly post on the site, and as the site grows with content we’ll resurface older high performing articles for everyone’s enjoyment. </p>
<p>We’re also using email to send notifications to users. They’re able to opt out of these reminders, but the emails sent out have high open rates with high click throughs, which is a rarity on the internet. </p>
<h3><em>Content Marketing</em></h3>
<p>Content marketing is a fancy word for blogging. We’re creating unique and informative articles on CodeBee and this blog to help you with Twitter, Facebook Instant Articles, or React.js. We want to offer you unique and productive content that’ll help you with running a business daily. If along the way you need help from us we can step in and further expand on our knowledge, we can’t give everything we know away. </p>
<p>All in all, you’ll see a lot more posting from me, and the team. If you have article ideas or something you want broken down, shoot us a tweet or email the team so I can hop on those article ideas. </p>
<h3><em>Product Hunt etc</em>.</h3>
<p>Using services like Product Hunt is key to our success. A lot of developers and designers are using Product Hunt to share their new apps, podcast, or books with other liked minded influencers. I’ve been active on the site submitted amazing products, commenting, and of course encouraging folks to venture over to this blog or CodeBee. </p>
<h1>Overall</h1>
<p>CodeBee is still an unfinished product. It’s the least viable product that’s useful, powerful, and something that people enjoy enough. We understand software is never done; it’s in a constant state of refreshes or updates. At the same time, the beta users have a product they enjoy and want to contribute to, and they’re excited to see new features or users join the service. </p>
<p>If you want to request an invite to CodeBee check out the site and tell us what you think. We’re working on adding new features every day, and we even have a public roadmap where users are suggesting new features and pointing out bugs that need to be squashed.</p>","Here at Ninjality, we strive to build social experiences for small close knit communities. We, of course, apply this thinking to our clients when we're building them websites, apps, or working to brand their newly minted company. We’re also working towards building our community around developers and designers. CodeBee.io is one of the handfuls of apps and services we’re working on to solve our problems, but also to refine our skill sets and test new ideas and development plans.",what-is-codebee,General,leon@ninjality.com,"2017-02-13 05:48:35","2017-02-13 05:48:35","2016-04-21 05:48:33"
20,"Slimming Down Your Toolset","Tools are everywhere. We use a bunch of them here at Ninjality to get work done more efficiently for client and internal projects. However, tools can feel like a burden especially in the JavaScript community; it seems like there's a new tool, framework, or library being released every day. I've noticed that 2015 was the year of experimentation: figuring out whether to use Angular or React, Gulp or Webpack, Sass or PostCSS, Bower or npm, and the list goes on. Now, 2016 looks like the year of making a decision not only on which tool to use, but whether to use one at all. This is why I'm calling this article ""Slimming Down Your Toolset.""

## Making Decisions

First, there's the whole picking the right tool. While there isn't a one-size-fits-all, certain tools seem to have gotten more popularity over others and are deemed the ""winners"" when it comes to making a decision. React has won the JavaScript view library debate as seen by the wide adoption. Redux has won as the go-to state manager and Flux implementation. Sass and other pre-processors are slowly dying out in favor of PostCSS.

We still use Less, jQuery, Bower, and Gulp on projects, but I try to go with a more modern stack on new projects. So don't take this as a ""wow, I need to refactor all of my apps now."" Don't break what already works, but that doesn't mean that you should stagnate on new technologies.

This also doesn't mean that you should not take a look at Angular, Ember, or other alternatives. It's just nice that we're not arguing about which tool is best anymore in 2016 (or at least not as much). Pick what works best for you, and if are having a hard time then simply try what the community seems to prefer as a whole. The point is to spend time building web apps rather than figuring out which tool to use.

## Slimming Down

Next, let's get to the primary point of this article: stop using tools that you don't need. I'm talking about using alternatives that are already available in most cases.

### Bower

The first tool on the list is Bower, a package manager for the web. The idea is that you use the `bower install` command to install front-end dependencies such as Bootstrap, jQuery, etc. However, you are probably already using npm to manage dependencies for Node.js. Did you know that you can use npm the same way that you use Bower? Check out [this article](http://dontkry.com/posts/code/using-npm-on-the-client-side.html) on using npm on the client side. Boom, one less tool to worry about.

### Gulp or Grunt

Gulp, Grunt, or any task runner can be replaced by npm as well with a feature known as""npm run scripts."" There is [a great article on Medium](https://medium.freecodecamp.com/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8) about how it works and how easy it is to transition your tasks over to regular JavaScript. That's two down, can we slim down further?

### jQuery

jQuery has been a godsend to JavaScript, I can't imagine building websites in the past without it. As much as I love jQuery though, it just simply isn't needed anymore; browsers have gotten better support for APIs and it's a better practice to use smaller modules (not only for organizational reasons, but for performance as well).

So how do you go about not needing jQuery? The site [youmightnotneedjquery.com](http://youmightnotneedjquery.com/) is a good resource on using native APIs such as `querySelectorAll()` and what the browser support is like. For Ajax, there is the `fetch()` API and helpers such as [SuperAgent](http://visionmedia.github.io/superagent/) and [axios](https://github.com/mzabriskie/axios). Okay, that's three tools out already. Let's see if we can do one more.

### Sass, Less, or Stylus

This is more opinionated, but CSS preprocessors can be cut as well and be replaced by [PostCSS](http://postcss.org/). You're probably already using Autoprefixer to automatically add vendor prefixes, and you may not realize that this is actually a PostCSS plugin that you're using. If all that you're using preprocessors for are variables, nesting, and imports, then take a look at [cssnext](http://cssnext.io/). It's a PostCSS plugin that includes upcoming features to CSS. This means that you can get most of the features you need and still write standard CSS. Anything that is missing can be added through plugins, but I personally stick to using as few as possible. If you got this far, congrats!

## Your Thoughts?

Any superfluous tools that I've missed? Or perhaps you disagree with something that I've said? Let me know in the comments, [on Twitter](https://twitter.com/NinjalityDesign), or [on Facebook](https://www.facebook.com/ninjalitydesign/).","<p>Tools are everywhere. We use a bunch of them here at Ninjality to get work done more efficiently for client and internal projects. However, tools can feel like a burden especially in the JavaScript community; it seems like there's a new tool, framework, or library being released every day. I've noticed that 2015 was the year of experimentation: figuring out whether to use Angular or React, Gulp or Webpack, Sass or PostCSS, Bower or npm, and the list goes on. Now, 2016 looks like the year of making a decision not only on which tool to use, but whether to use one at all. This is why I'm calling this article &quot;Slimming Down Your Toolset.&quot;</p>
<h2>Making Decisions</h2>
<p>First, there's the whole picking the right tool. While there isn't a one-size-fits-all, certain tools seem to have gotten more popularity over others and are deemed the &quot;winners&quot; when it comes to making a decision. React has won the JavaScript view library debate as seen by the wide adoption. Redux has won as the go-to state manager and Flux implementation. Sass and other pre-processors are slowly dying out in favor of PostCSS.</p>
<p>We still use Less, jQuery, Bower, and Gulp on projects, but I try to go with a more modern stack on new projects. So don't take this as a &quot;wow, I need to refactor all of my apps now.&quot; Don't break what already works, but that doesn't mean that you should stagnate on new technologies.</p>
<p>This also doesn't mean that you should not take a look at Angular, Ember, or other alternatives. It's just nice that we're not arguing about which tool is best anymore in 2016 (or at least not as much). Pick what works best for you, and if are having a hard time then simply try what the community seems to prefer as a whole. The point is to spend time building web apps rather than figuring out which tool to use.</p>
<h2>Slimming Down</h2>
<p>Next, let's get to the primary point of this article: stop using tools that you don't need. I'm talking about using alternatives that are already available in most cases.</p>
<h3>Bower</h3>
<p>The first tool on the list is Bower, a package manager for the web. The idea is that you use the <code>bower install</code> command to install front-end dependencies such as Bootstrap, jQuery, etc. However, you are probably already using npm to manage dependencies for Node.js. Did you know that you can use npm the same way that you use Bower? Check out <a href=""http://dontkry.com/posts/code/using-npm-on-the-client-side.html"">this article</a> on using npm on the client side. Boom, one less tool to worry about.</p>
<h3>Gulp or Grunt</h3>
<p>Gulp, Grunt, or any task runner can be replaced by npm as well with a feature known as&quot;npm run scripts.&quot; There is <a href=""https://medium.freecodecamp.com/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8"">a great article on Medium</a> about how it works and how easy it is to transition your tasks over to regular JavaScript. That's two down, can we slim down further?</p>
<h3>jQuery</h3>
<p>jQuery has been a godsend to JavaScript, I can't imagine building websites in the past without it. As much as I love jQuery though, it just simply isn't needed anymore; browsers have gotten better support for APIs and it's a better practice to use smaller modules (not only for organizational reasons, but for performance as well).</p>
<p>So how do you go about not needing jQuery? The site <a href=""http://youmightnotneedjquery.com/"">youmightnotneedjquery.com</a> is a good resource on using native APIs such as <code>querySelectorAll()</code> and what the browser support is like. For Ajax, there is the <code>fetch()</code> API and helpers such as <a href=""http://visionmedia.github.io/superagent/"">SuperAgent</a> and <a href=""https://github.com/mzabriskie/axios"">axios</a>. Okay, that's three tools out already. Let's see if we can do one more.</p>
<h3>Sass, Less, or Stylus</h3>
<p>This is more opinionated, but CSS preprocessors can be cut as well and be replaced by <a href=""http://postcss.org/"">PostCSS</a>. You're probably already using Autoprefixer to automatically add vendor prefixes, and you may not realize that this is actually a PostCSS plugin that you're using. If all that you're using preprocessors for are variables, nesting, and imports, then take a look at <a href=""http://cssnext.io/"">cssnext</a>. It's a PostCSS plugin that includes upcoming features to CSS. This means that you can get most of the features you need and still write standard CSS. Anything that is missing can be added through plugins, but I personally stick to using as few as possible. If you got this far, congrats!</p>
<h2>Your Thoughts?</h2>
<p>Any superfluous tools that I've missed? Or perhaps you disagree with something that I've said? Let me know in the comments, <a href=""https://twitter.com/NinjalityDesign"">on Twitter</a>, or <a href=""https://www.facebook.com/ninjalitydesign/"">on Facebook</a>.</p>","Tools are everywhere. We use a bunch of them here at Ninjality to get work done more efficiently for client and internal projects. However, tools can feel like a burden especially in the JavaScript community; it seems like there's a new tool, framework, or library being released every day. I've noticed that 2015 was the year of experimentation: figuring out whether to use Angular or React, Gulp or Webpack, Sass or PostCSS, Bower or npm, and the list goes on. Now, 2016 looks like the year of making a decision not only on which tool to use, but whether to use one at all. This is why I'm calling this article ""Slimming Down Your Toolset.""",slimming-down-your-toolset,Coding,sunny@ninjality.com,"2017-02-13 05:49:32","2017-02-13 05:49:32","2016-04-27 05:49:31"
21,"How To Be A Product Hunt Ninja","Product Hunt is a service where you can share and discover new products. The site was founded by Ryan Hoover in November of 2013, with funding from Y Combinator. The basis of the site is for users to submit a fresh podcast, an innovative app, other tech products, or wild gadgets. From there other users upvote the products onto the front page. The whole process feels a lot like Reddit but with a focus towards discovering products within the technology community.

 There are hundreds of technology influencers who work at venture capital firms, to the founders of startups themselves. The close-knit community actively follows, comments, and shares new products that surface on the homepage. They’re more than happy to talk, give feedback on a product, or maybe invest if they’re a part of a VC or private equity company. 

If you want to join the exclusive club of Product Hunter’s or you’re already hunting this feature will help you become a Product Hunt Ninja. 

# Ask for an invite

Anyone can join Product Hunt, but to comment or submit your products you’ll have to be invited. To get an invite you have to either create a product and have someone on Product Hunt submit your product. Then once you’re confirmed as a ‘maker,' you get to comment and talk about your latest product. In addition to talking about your product, you’ll get to discuss and submit other products you find interesting on the internet. 

We have a few extra invites for some folks who think they’d be able to contribute to Product Hunt’s growing library of products! Drop us a line, and tell us why you think you deserve an invite to PH. 

# Create collections

A lot is being added to Product Hunt daily, and some stuff can slip by even the most devoted hunter. Lucky, there’s ‘collections,’ which are essentially like a playlist in Spotify or any music app. A ‘collection’ could cover* apps to help manage money*, or have* best products of each month*, or showcase the *top podcast you listen to*. The options are endless! I have a ‘collection’ where I hunt different product’s I’ve written about on Digital Bounds. I use it as a way to conversate with the maker, and get real feedback from users or product evangelist. 

There is also a showcase of top ‘collections,’ which you can follow as more are added. This is an excellent way to follow competitors in your space or find a new app to create gifs. 

My favorite collections: 

* [Smart Money Apps](https://www.producthunt.com/e/smart-money-apps)

* [Create a beautiful resume](https://www.producthunt.com/e/create-a-beautiful-resume)

* [2016 Election Fun](https://www.producthunt.com/e/2016-election-fun)

* [Spectacular writing tools](https://www.producthunt.com/e/spectacular-writing-tools)

# Join Live chats

Product Hunt is driven by conversation, along with a growing number of technology influencers. Some of these influencers lurk on the site, upvote and leave, but some are a part of Product Hunt’s AMA style live chats. The Slack team hosted a live chat, and there are hundreds of others planned for almost every day of the week. 

These live chats let users talk with startup founders, successful founders, venture capital partners, and others in the technology world. They’re styled like AMA’s, and users can ask any questions you may have for them or about the company they work for. 

# Join Meetups

Talking online can get boring when you're inside and behind a screen. Product Hunt sometimes understands you’d want to grab a beer or talk to other users in real life. The meetups are community drive, meaning if you have the resources you could host your meetup. Ther're upcoming meetups in Mexico, Chile, Canada, and dozens more slated but not planned out. 

These meetups range in topics from a happy hour get together to startup pitches. These meetups can help you meet other technology lovers in your local community, or maybe you’re traveling and want to meet like-minded folks. Either way, these meetups are always fun, and can help network if you’re looking to launch your startup soon. 

# Read the blog/newsletter

Product Hunt does an excellent job of curating and producing content around all the products hunted each day. They have a blog, where stories of users are told. The stories are fun and sometimes give you the inside look of a successful company. Their newsletter is a great way to recap the previous day from all the trending news. The newsletter is always playful, with tons of emojis, and tons of amazing undiscovered apps. 

# Overall

Product Hunt is an amazing community to be apart of. I’ve become highly active in the community and use it when I cover tech news. If you enjoy discovering new apps, podcasts, games, books, or products this community is your gold mine, and there are dozens of tools to help you mine for the best products. 

If you use all these tips, they’ll help you become a Product Hunt ninja, and maybe along the way you’ll become an influencer. 

To follow us on Product Hunt where we are [@hustlinhack](https://www.producthunt.com/@hustlinhack), [@sunnyismoi](https://www.producthunt.com/@sunnyismoi), and [@leonhitchens](https://www.producthunt.com/@leonhitchens)! Also, tell us in the comments below what’s your favorite product on Product Hunt!","<p>Product Hunt is a service where you can share and discover new products. The site was founded by Ryan Hoover in November of 2013, with funding from Y Combinator. The basis of the site is for users to submit a fresh podcast, an innovative app, other tech products, or wild gadgets. From there other users upvote the products onto the front page. The whole process feels a lot like Reddit but with a focus towards discovering products within the technology community.</p>
<p>There are hundreds of technology influencers who work at venture capital firms, to the founders of startups themselves. The close-knit community actively follows, comments, and shares new products that surface on the homepage. They’re more than happy to talk, give feedback on a product, or maybe invest if they’re a part of a VC or private equity company. </p>
<p>If you want to join the exclusive club of Product Hunter’s or you’re already hunting this feature will help you become a Product Hunt Ninja. </p>
<h1>Ask for an invite</h1>
<p>Anyone can join Product Hunt, but to comment or submit your products you’ll have to be invited. To get an invite you have to either create a product and have someone on Product Hunt submit your product. Then once you’re confirmed as a ‘maker,' you get to comment and talk about your latest product. In addition to talking about your product, you’ll get to discuss and submit other products you find interesting on the internet. </p>
<p>We have a few extra invites for some folks who think they’d be able to contribute to Product Hunt’s growing library of products! Drop us a line, and tell us why you think you deserve an invite to PH. </p>
<h1>Create collections</h1>
<p>A lot is being added to Product Hunt daily, and some stuff can slip by even the most devoted hunter. Lucky, there’s ‘collections,’ which are essentially like a playlist in Spotify or any music app. A ‘collection’ could cover<em> apps to help manage money</em>, or have<em> best products of each month</em>, or showcase the <em>top podcast you listen to</em>. The options are endless! I have a ‘collection’ where I hunt different product’s I’ve written about on Digital Bounds. I use it as a way to conversate with the maker, and get real feedback from users or product evangelist. </p>
<p>There is also a showcase of top ‘collections,’ which you can follow as more are added. This is an excellent way to follow competitors in your space or find a new app to create gifs. </p>
<p>My favorite collections: </p>
<ul>
<li>
<p><a href=""https://www.producthunt.com/e/smart-money-apps"">Smart Money Apps</a></p>
</li>
<li>
<p><a href=""https://www.producthunt.com/e/create-a-beautiful-resume"">Create a beautiful resume</a></p>
</li>
<li>
<p><a href=""https://www.producthunt.com/e/2016-election-fun"">2016 Election Fun</a></p>
</li>
<li><a href=""https://www.producthunt.com/e/spectacular-writing-tools"">Spectacular writing tools</a></li>
</ul>
<h1>Join Live chats</h1>
<p>Product Hunt is driven by conversation, along with a growing number of technology influencers. Some of these influencers lurk on the site, upvote and leave, but some are a part of Product Hunt’s AMA style live chats. The Slack team hosted a live chat, and there are hundreds of others planned for almost every day of the week. </p>
<p>These live chats let users talk with startup founders, successful founders, venture capital partners, and others in the technology world. They’re styled like AMA’s, and users can ask any questions you may have for them or about the company they work for. </p>
<h1>Join Meetups</h1>
<p>Talking online can get boring when you're inside and behind a screen. Product Hunt sometimes understands you’d want to grab a beer or talk to other users in real life. The meetups are community drive, meaning if you have the resources you could host your meetup. Ther're upcoming meetups in Mexico, Chile, Canada, and dozens more slated but not planned out. </p>
<p>These meetups range in topics from a happy hour get together to startup pitches. These meetups can help you meet other technology lovers in your local community, or maybe you’re traveling and want to meet like-minded folks. Either way, these meetups are always fun, and can help network if you’re looking to launch your startup soon. </p>
<h1>Read the blog/newsletter</h1>
<p>Product Hunt does an excellent job of curating and producing content around all the products hunted each day. They have a blog, where stories of users are told. The stories are fun and sometimes give you the inside look of a successful company. Their newsletter is a great way to recap the previous day from all the trending news. The newsletter is always playful, with tons of emojis, and tons of amazing undiscovered apps. </p>
<h1>Overall</h1>
<p>Product Hunt is an amazing community to be apart of. I’ve become highly active in the community and use it when I cover tech news. If you enjoy discovering new apps, podcasts, games, books, or products this community is your gold mine, and there are dozens of tools to help you mine for the best products. </p>
<p>If you use all these tips, they’ll help you become a Product Hunt ninja, and maybe along the way you’ll become an influencer. </p>
<p>To follow us on Product Hunt where we are <a href=""https://www.producthunt.com/@hustlinhack"">@hustlinhack</a>, <a href=""https://www.producthunt.com/@sunnyismoi"">@sunnyismoi</a>, and <a href=""https://www.producthunt.com/@leonhitchens"">@leonhitchens</a>! Also, tell us in the comments below what’s your favorite product on Product Hunt!</p>","Product Hunt is a service where you can share and discover new products. The site was founded by Ryan Hoover in November of 2013, with funding from Y Combinator. The basis of the site is for users to submit a fresh podcast, an innovative app, other tech products, or wild gadgets. From there other users upvote the products onto the front page. The whole process feels a lot like Reddit but with a focus towards discovering products within the technology community.",how-to-be-a-product-hunt-ninja,General,leon@ninjality.com,"2017-02-13 05:50:23","2017-02-13 05:50:23","2016-04-30 05:50:22"
22,"Services That Help With DevOps","DevOps, or developer operations, can be really hard to get right. This is especially true if you're trying to build everything up from scratch. At Ninjality, we use third-party services to help us out so that we can get to releasing projects faster. We apologize ahead of time if some of these services don't really fit into DevOps, we just use this term as a broad category.

## Storing Code

We all need a place to store our source code, which essentially means Git repositories. Other services can then integrate into your repositories to decide when to run tests, deployments, etc.

### GitHub

*Price: Free. Offers pro plans.*

[GitHub](https://github.com/) is the most popular option for not only storing, but also sharing code. We have an entire article devoted to this topic titled [How To Be A GitHub Ninja](https://ninjality.com/blog/how-to-be-a-github-ninja). We keep our personal projects on GitHub such as [devnews](https://github.com/devnews) and [socialshares](https://github.com/socialshares/buttons). Our lead developer, Sunny, also keeps his [personal site open sourced](https://github.com/sunnysingh/web).

### Bitbucket

*Price: Free. Offers pro plans.*

For private projects, we prefer to use [Bitbucket](https://bitbucket.org/) thanks to its free option for private repositories. However, [GitLab](https://about.gitlab.com/) is an alternative that has been getting traction lately and we like the way that they're headed with the UI design and feature parity with GitHub.

## Hosting

These projects have to be accessed from somewhere so that users can, well, use them.

### DigitalOcean

*Price: $5/mo. and up.*

Hands down, [DigitalOcean](https://www.digitalocean.com/) is the best place to quickly get servers up (and keep them up) and running at affordable prices. We keep our projects such as [CodeBee](https://ninjality.com/codebee) hosted on DO droplets. Want to help us out? [Use our referral link](https://m.do.co/c/8ffaa9c63efa).

### Surge

*Price: Free. Offers pro plans.*

When you simply need to host a static site (i.e. HTML, CSS, JS, images), [Surge](https://surge.sh/) does a great job at this with their simple deployment tool. You can specify the build directory in your project, and setup a custom domain as well. Our already mentioned projects such as [devnews](https://devne.ws/), [socialshares](https://socialshar.es/), and [Sunny's personal site](https://sunnysingh.io/) are all hosted on Surge.

## Server Management

We decided to stop managing our servers manually because it can really take a long time and you never feel certain that you got everything secured. This is where server management software comes in.

### Laravel Forge

*Price: $10/mo. and up.*

We primarily use the Laravel stack for back-end development, so using [Laravel Forge](https://forge.laravel.com/) made the most sense to us. We talked about the [restructure of our server](https://ninjality.com/blog/server-restructure-nginx-hhvm) before and how simple it was to get our sites up with Ubuntu, nginx, HHVM, and MySQL. The great part about Forge is that it can host any type of project, including WordPress and Node.js.

There are of course alternatives such as [Heroku](https://www.heroku.com/). We haven't used them but it is extremely popular and have heard good things about them.

### New Relic

*Price: Free. Offers pro plans.*

It's important to keep track of servers such as CPU and memory usage. [New Relic](https://newrelic.com/) is great for this and allows us to receive alerts in our Slack channel whenever usage reaches a certain limit. We can then respond to attacks or bad code.

### Papertrail

*Price: Free. Offers pro plans.*

Continuing on from attacks and bad code, you probably want a way to see errors from a project in production. Since displaying these logs to users or having to search through files aren't good options, that's where [Papertrail](https://papertrailapp.com/) comes in. It gives you a place to view logs through a web app.

## Deployment

This is a tricky task and something that continue to improve. Thanks to these services, it makes things a lot easier.

### DeployBot

*Price: $15/mo. and up.*

We love [DeployBot](https://deploybot.com/) for deploying complex projects such as CodeBee. We especially like being able to build dependencies on their server before moving it to our DigitalOcean droplets. They also offer atomic deployments which means that nothing goes down during a deployment, it simply switches a symlink to the new code once it's up. DeployBot also integrates with GitHub and Bitbucket so that you can automatically deploy when the master branch is updated.

### Laravel Forge and/or Envoyer

*Price: $10/mo. and up for each.*

In keeping with the Laravel ecosystem, deployment tools are also provided in Forge. We use this for our most basic sites and it works fairly well. The great part about this is that it is included in the Laravel Forge service so no extra work is necessary. The source code is already hooked up so automatic deployments can be enabled in one click.

The accompanying service is called [Laravel Envoyer](https://envoyer.io/), which is specifically for deployments. It is similar to DeployBot in offering atomic deployments but can also check to see how your website is doing with health checks.

## Content Delivery

Content, either project or user generated needs to be easily managed and delivered fast.

### CloudFlare

*Price: Free. Offers pro plans.*

While it does cache your content and serve it from nodes that are closest to your users, [CloudFlare](https://www.cloudflare.com/) does a lot more than being a CDN (content delivery network). It can protect you from DDoS attacks, provide SSL, manage DNS, and give basic analytics. We keep all of our sites protected and running blazing fast under CloudFlare.

### Amazon S3

*Price: Free for first year. Offers usage-based pricing.*

We believe that a project's static assets as well as user uploads (e.g. profile avatars) should be hosted separate from the website. [Amazon S3](http://aws.amazon.com/s3/) is a good place for that because of its vast amount of integrations and affordable pricing. We are currently using it for CodeBee so that we can keep user avatars and covers in one place.

## Email Delivery

There are many aspects to successful email delivery, so we allow the experts to handle this as well.

### SparkPost

*Price: Free. Offers pro plans.*

We migrated from Mandrill when they announced their pricing changes, and have been just as happy (if not more) with [SparkPost](https://www.sparkpost.com/). We use them now for sending transactional emails on CodeBee, and Sunny wrote [a tutorial on the migration](https://codebee.io/posts/leng).

### MailChimp

*Price: Free. Offers pro plans.*

You can't mention email without [MailChimp](http://mailchimp.com/). They are the easiest way to get setup with sending out newsletters, which is a core aspect of any successful startup. Again, we use them on CodeBee to keep our users updated.

## What are yours?

We listed the ones that we use here at Ninjality. Do you have an awesome service that you think should be part of this list? Let us know in the comments or on our [Twitter](https://twitter.com/ninjalitydesign) and [Facebook](https://www.facebook.com/ninjalitydesign) channels.","<p>DevOps, or developer operations, can be really hard to get right. This is especially true if you're trying to build everything up from scratch. At Ninjality, we use third-party services to help us out so that we can get to releasing projects faster. We apologize ahead of time if some of these services don't really fit into DevOps, we just use this term as a broad category.</p>
<h2>Storing Code</h2>
<p>We all need a place to store our source code, which essentially means Git repositories. Other services can then integrate into your repositories to decide when to run tests, deployments, etc.</p>
<h3>GitHub</h3>
<p><em>Price: Free. Offers pro plans.</em></p>
<p><a href=""https://github.com/"">GitHub</a> is the most popular option for not only storing, but also sharing code. We have an entire article devoted to this topic titled <a href=""https://ninjality.com/blog/how-to-be-a-github-ninja"">How To Be A GitHub Ninja</a>. We keep our personal projects on GitHub such as <a href=""https://github.com/devnews"">devnews</a> and <a href=""https://github.com/socialshares/buttons"">socialshares</a>. Our lead developer, Sunny, also keeps his <a href=""https://github.com/sunnysingh/web"">personal site open sourced</a>.</p>
<h3>Bitbucket</h3>
<p><em>Price: Free. Offers pro plans.</em></p>
<p>For private projects, we prefer to use <a href=""https://bitbucket.org/"">Bitbucket</a> thanks to its free option for private repositories. However, <a href=""https://about.gitlab.com/"">GitLab</a> is an alternative that has been getting traction lately and we like the way that they're headed with the UI design and feature parity with GitHub.</p>
<h2>Hosting</h2>
<p>These projects have to be accessed from somewhere so that users can, well, use them.</p>
<h3>DigitalOcean</h3>
<p><em>Price: $5/mo. and up.</em></p>
<p>Hands down, <a href=""https://www.digitalocean.com/"">DigitalOcean</a> is the best place to quickly get servers up (and keep them up) and running at affordable prices. We keep our projects such as <a href=""https://ninjality.com/codebee"">CodeBee</a> hosted on DO droplets. Want to help us out? <a href=""https://m.do.co/c/8ffaa9c63efa"">Use our referral link</a>.</p>
<h3>Surge</h3>
<p><em>Price: Free. Offers pro plans.</em></p>
<p>When you simply need to host a static site (i.e. HTML, CSS, JS, images), <a href=""https://surge.sh/"">Surge</a> does a great job at this with their simple deployment tool. You can specify the build directory in your project, and setup a custom domain as well. Our already mentioned projects such as <a href=""https://devne.ws/"">devnews</a>, <a href=""https://socialshar.es/"">socialshares</a>, and <a href=""https://sunnysingh.io/"">Sunny's personal site</a> are all hosted on Surge.</p>
<h2>Server Management</h2>
<p>We decided to stop managing our servers manually because it can really take a long time and you never feel certain that you got everything secured. This is where server management software comes in.</p>
<h3>Laravel Forge</h3>
<p><em>Price: $10/mo. and up.</em></p>
<p>We primarily use the Laravel stack for back-end development, so using <a href=""https://forge.laravel.com/"">Laravel Forge</a> made the most sense to us. We talked about the <a href=""https://ninjality.com/blog/server-restructure-nginx-hhvm"">restructure of our server</a> before and how simple it was to get our sites up with Ubuntu, nginx, HHVM, and MySQL. The great part about Forge is that it can host any type of project, including WordPress and Node.js.</p>
<p>There are of course alternatives such as <a href=""https://www.heroku.com/"">Heroku</a>. We haven't used them but it is extremely popular and have heard good things about them.</p>
<h3>New Relic</h3>
<p><em>Price: Free. Offers pro plans.</em></p>
<p>It's important to keep track of servers such as CPU and memory usage. <a href=""https://newrelic.com/"">New Relic</a> is great for this and allows us to receive alerts in our Slack channel whenever usage reaches a certain limit. We can then respond to attacks or bad code.</p>
<h3>Papertrail</h3>
<p><em>Price: Free. Offers pro plans.</em></p>
<p>Continuing on from attacks and bad code, you probably want a way to see errors from a project in production. Since displaying these logs to users or having to search through files aren't good options, that's where <a href=""https://papertrailapp.com/"">Papertrail</a> comes in. It gives you a place to view logs through a web app.</p>
<h2>Deployment</h2>
<p>This is a tricky task and something that continue to improve. Thanks to these services, it makes things a lot easier.</p>
<h3>DeployBot</h3>
<p><em>Price: $15/mo. and up.</em></p>
<p>We love <a href=""https://deploybot.com/"">DeployBot</a> for deploying complex projects such as CodeBee. We especially like being able to build dependencies on their server before moving it to our DigitalOcean droplets. They also offer atomic deployments which means that nothing goes down during a deployment, it simply switches a symlink to the new code once it's up. DeployBot also integrates with GitHub and Bitbucket so that you can automatically deploy when the master branch is updated.</p>
<h3>Laravel Forge and/or Envoyer</h3>
<p><em>Price: $10/mo. and up for each.</em></p>
<p>In keeping with the Laravel ecosystem, deployment tools are also provided in Forge. We use this for our most basic sites and it works fairly well. The great part about this is that it is included in the Laravel Forge service so no extra work is necessary. The source code is already hooked up so automatic deployments can be enabled in one click.</p>
<p>The accompanying service is called <a href=""https://envoyer.io/"">Laravel Envoyer</a>, which is specifically for deployments. It is similar to DeployBot in offering atomic deployments but can also check to see how your website is doing with health checks.</p>
<h2>Content Delivery</h2>
<p>Content, either project or user generated needs to be easily managed and delivered fast.</p>
<h3>CloudFlare</h3>
<p><em>Price: Free. Offers pro plans.</em></p>
<p>While it does cache your content and serve it from nodes that are closest to your users, <a href=""https://www.cloudflare.com/"">CloudFlare</a> does a lot more than being a CDN (content delivery network). It can protect you from DDoS attacks, provide SSL, manage DNS, and give basic analytics. We keep all of our sites protected and running blazing fast under CloudFlare.</p>
<h3>Amazon S3</h3>
<p><em>Price: Free for first year. Offers usage-based pricing.</em></p>
<p>We believe that a project's static assets as well as user uploads (e.g. profile avatars) should be hosted separate from the website. <a href=""http://aws.amazon.com/s3/"">Amazon S3</a> is a good place for that because of its vast amount of integrations and affordable pricing. We are currently using it for CodeBee so that we can keep user avatars and covers in one place.</p>
<h2>Email Delivery</h2>
<p>There are many aspects to successful email delivery, so we allow the experts to handle this as well.</p>
<h3>SparkPost</h3>
<p><em>Price: Free. Offers pro plans.</em></p>
<p>We migrated from Mandrill when they announced their pricing changes, and have been just as happy (if not more) with <a href=""https://www.sparkpost.com/"">SparkPost</a>. We use them now for sending transactional emails on CodeBee, and Sunny wrote <a href=""https://codebee.io/posts/leng"">a tutorial on the migration</a>.</p>
<h3>MailChimp</h3>
<p><em>Price: Free. Offers pro plans.</em></p>
<p>You can't mention email without <a href=""http://mailchimp.com/"">MailChimp</a>. They are the easiest way to get setup with sending out newsletters, which is a core aspect of any successful startup. Again, we use them on CodeBee to keep our users updated.</p>
<h2>What are yours?</h2>
<p>We listed the ones that we use here at Ninjality. Do you have an awesome service that you think should be part of this list? Let us know in the comments or on our <a href=""https://twitter.com/ninjalitydesign"">Twitter</a> and <a href=""https://www.facebook.com/ninjalitydesign"">Facebook</a> channels.</p>","DevOps, or developer operations, can be really hard to get right. This is especially true if you're trying to build everything up from scratch. At Ninjality, we use third-party services to help us out so that we can get to releasing projects faster. We apologize ahead of time if some of these services don't really fit into DevOps, we just use this term as a broad category.",services-that-help-with-devops,Coding,sunny@ninjality.com,"2017-02-13 05:51:28","2017-02-13 05:51:28","2016-05-04 05:51:26"
23,"How To Be A Remote Working Ninja","![Funny remote working gif](/storage/app/uploads/public/58a/149/acb/58a149acb7b82433736097.gif ""Remote Work"")

Working remotely has its pros and its cons, but if done right, you can become more productive and happier with work. At Ninjality, we work remotely and don’t have an office beyond each of our home offices. While I prefer an office with everyone in one location, Sunny and Kyle has proven time and time again how productive and efficient working remotely is. 

I’ve gathered a few tips and tricks from Sunny and Kyle, which have helped me to become a remote working ninja overnight. While I’d still love to have an office with them in one city, so we could drink and hang out together, the pro’s are too much for us to change the ways. Companies like Buffer, a social media service to manage multiple accounts, have completely abolished having one central office. They’ve become a distributed team across almost every time zone, which has enabled them to work 24 hours a day seven days a week. While we’re only distributed across two time zones, we’ve all adapted widely different work schedules, which has enabled us to work a majority of the day. 

That’s enough about how we do things, instead, let’s jump into the articles tips and tricks to become a remote working ninja!

# Communication

Communication is essential when you don’t see someone in a physical office. We use Slack and of course email, but we also stay in constant contact. We communicate a lot on Slack, but a few communications, ones where we need approval from everyone or are imperative go onto email so we can have a clear cut trail. Other conversations like what we're currently working on go into Slack so we can get instant replies. 

Of Course, we don’t always talk about work. We’re talking about new apps, news from tech, and other general life topics. We’re coworkers but were also a close team, which we would even say we're family. We share interesting articles, discuss them and even plan times to play a round of Rainbow Six Siege or Rocket League together.

# Commute to work

Now since you're working from home, you could stay inside all day, and while that’s nice, we need sunlight and a little exercise each day. I start my days early, around 3 am each day, and I know it’s early, but I feel more productive in the mornings after I’m up and out of bed. When I wake up, I make coffee, watch a TV show, and then I surf Twitter, Facebook, and Instagram to see what is going on. I enjoy looking at social media early in the morning because they’re slow, and I’m able to reply to a lot of people. After the all this I typically start by writing for an hour or two, and by the time I’m done with this it’s around 6 am. At this period, I’m usually getting dressed and showered to go ""commute to work.""

My commute to work includes walking to check the mail, and that’s it. I’m out of the house for 5 to 10 minutes, but it gives me a sense of driving or in my case walking to work. This small walk get’s my mind in the work mode and gives me the idea that I’m going to work. Some folks recommend biking or going to the gym and then starting work, but do anything which gets you out of the house and then step into the office.

# Have work hours

I’ve tried to set work hours for each day, and while I work more than 8 hours on an average day, I have some set aside for just work. I know you’re probably saying the whole idea of working from home is not having to have set hours, but it’s a good idea to have set hours. This gives your employer an idea when it’s appropriate to contact you and hear a response, but it also gives friends a family and idea when you're ‘working.' 

Now, I’m flexible with my work hours because I have a baby. Sometimes things get planned while I have to work, but I try to stay to this routine each day:

* Wake up - 3 am

* Coffee and social media - 3:30 am to 4:30 am

* Write for my blog/get thoughts out - 4:45 am to 6 am

* Get mail/commute to work - 6 am

* Work - 7 am to 2 pm

Of course, I feel more productive in the mornings, but you can work anytime you feel that you’ll get the most work done. Sunny’s taken to working later at night, and Kyle regularly slates 3-hour burst to work throughout the day. Either way, we all have an idea when someone is working and when someone is spending time with friends or family.

# Meetups

Working remotely is lonely, and can get boring quickly. Trust me; I’ve struggled with working remotely because I crave and need human interaction. I’ve survived through spending time with my baby and wife, but also attending meetups and planning trips to see Kyle or Sunny. I’m located in Texas while Kyle’s in Missouri and Sunny’s in North Carolina. I’ve planned a trip to meet up and hang out with Kyle when he’s going to Chicago for some work, and later in the year, I’ll likely plan a trip to see Sunny and hang out with him. 

I also use the meetup app to find meetings of local technology and freelance journalists. Luckily, San Antonio, Texas has a technology coworking space which hosts monthly meetups for startup owners and tech geeks. I’m able to hang out with like-minded folks who love technology and many times work from the coworking space or remotely as I do. 

# Overall

Working remotely might not suit you, but sometimes you have to do it to find employment or have the flexibility to spend time with your family. I’ve struggled with being lonely, but there are ways to make friends and have still be productive. After adjusting to my new remote working lifestyle, I’ve become happier and had more time to see my daughter grow up. 

It’s also given me the space to work from anywhere, and travel as I need. I have attended conferences in New Orleans, Las Vegas, Austin, and have others planned in Germany, New York, and Florida. 

While I don’t write on a beach every day, I do get to do what I love; write about technology, internet culture, and startup business from the comfort of my home. You can do the same with these tips and tricks from the Ninjality team!","<p><img src=""/storage/app/uploads/public/58a/149/acb/58a149acb7b82433736097.gif"" alt=""Funny remote working gif"" title=""Remote Work"" /></p>
<p>Working remotely has its pros and its cons, but if done right, you can become more productive and happier with work. At Ninjality, we work remotely and don’t have an office beyond each of our home offices. While I prefer an office with everyone in one location, Sunny and Kyle has proven time and time again how productive and efficient working remotely is. </p>
<p>I’ve gathered a few tips and tricks from Sunny and Kyle, which have helped me to become a remote working ninja overnight. While I’d still love to have an office with them in one city, so we could drink and hang out together, the pro’s are too much for us to change the ways. Companies like Buffer, a social media service to manage multiple accounts, have completely abolished having one central office. They’ve become a distributed team across almost every time zone, which has enabled them to work 24 hours a day seven days a week. While we’re only distributed across two time zones, we’ve all adapted widely different work schedules, which has enabled us to work a majority of the day. </p>
<p>That’s enough about how we do things, instead, let’s jump into the articles tips and tricks to become a remote working ninja!</p>
<h1>Communication</h1>
<p>Communication is essential when you don’t see someone in a physical office. We use Slack and of course email, but we also stay in constant contact. We communicate a lot on Slack, but a few communications, ones where we need approval from everyone or are imperative go onto email so we can have a clear cut trail. Other conversations like what we're currently working on go into Slack so we can get instant replies. </p>
<p>Of Course, we don’t always talk about work. We’re talking about new apps, news from tech, and other general life topics. We’re coworkers but were also a close team, which we would even say we're family. We share interesting articles, discuss them and even plan times to play a round of Rainbow Six Siege or Rocket League together.</p>
<h1>Commute to work</h1>
<p>Now since you're working from home, you could stay inside all day, and while that’s nice, we need sunlight and a little exercise each day. I start my days early, around 3 am each day, and I know it’s early, but I feel more productive in the mornings after I’m up and out of bed. When I wake up, I make coffee, watch a TV show, and then I surf Twitter, Facebook, and Instagram to see what is going on. I enjoy looking at social media early in the morning because they’re slow, and I’m able to reply to a lot of people. After the all this I typically start by writing for an hour or two, and by the time I’m done with this it’s around 6 am. At this period, I’m usually getting dressed and showered to go &quot;commute to work.&quot;</p>
<p>My commute to work includes walking to check the mail, and that’s it. I’m out of the house for 5 to 10 minutes, but it gives me a sense of driving or in my case walking to work. This small walk get’s my mind in the work mode and gives me the idea that I’m going to work. Some folks recommend biking or going to the gym and then starting work, but do anything which gets you out of the house and then step into the office.</p>
<h1>Have work hours</h1>
<p>I’ve tried to set work hours for each day, and while I work more than 8 hours on an average day, I have some set aside for just work. I know you’re probably saying the whole idea of working from home is not having to have set hours, but it’s a good idea to have set hours. This gives your employer an idea when it’s appropriate to contact you and hear a response, but it also gives friends a family and idea when you're ‘working.' </p>
<p>Now, I’m flexible with my work hours because I have a baby. Sometimes things get planned while I have to work, but I try to stay to this routine each day:</p>
<ul>
<li>
<p>Wake up - 3 am</p>
</li>
<li>
<p>Coffee and social media - 3:30 am to 4:30 am</p>
</li>
<li>
<p>Write for my blog/get thoughts out - 4:45 am to 6 am</p>
</li>
<li>
<p>Get mail/commute to work - 6 am</p>
</li>
<li>Work - 7 am to 2 pm</li>
</ul>
<p>Of course, I feel more productive in the mornings, but you can work anytime you feel that you’ll get the most work done. Sunny’s taken to working later at night, and Kyle regularly slates 3-hour burst to work throughout the day. Either way, we all have an idea when someone is working and when someone is spending time with friends or family.</p>
<h1>Meetups</h1>
<p>Working remotely is lonely, and can get boring quickly. Trust me; I’ve struggled with working remotely because I crave and need human interaction. I’ve survived through spending time with my baby and wife, but also attending meetups and planning trips to see Kyle or Sunny. I’m located in Texas while Kyle’s in Missouri and Sunny’s in North Carolina. I’ve planned a trip to meet up and hang out with Kyle when he’s going to Chicago for some work, and later in the year, I’ll likely plan a trip to see Sunny and hang out with him. </p>
<p>I also use the meetup app to find meetings of local technology and freelance journalists. Luckily, San Antonio, Texas has a technology coworking space which hosts monthly meetups for startup owners and tech geeks. I’m able to hang out with like-minded folks who love technology and many times work from the coworking space or remotely as I do. </p>
<h1>Overall</h1>
<p>Working remotely might not suit you, but sometimes you have to do it to find employment or have the flexibility to spend time with your family. I’ve struggled with being lonely, but there are ways to make friends and have still be productive. After adjusting to my new remote working lifestyle, I’ve become happier and had more time to see my daughter grow up. </p>
<p>It’s also given me the space to work from anywhere, and travel as I need. I have attended conferences in New Orleans, Las Vegas, Austin, and have others planned in Germany, New York, and Florida. </p>
<p>While I don’t write on a beach every day, I do get to do what I love; write about technology, internet culture, and startup business from the comfort of my home. You can do the same with these tips and tricks from the Ninjality team!</p>","Working remotely has its pros and its cons, but if done right, you can become more productive and happier with work. At Ninjality, we work remotely and don’t have an office beyond each of our home offices. While I prefer an office with everyone in one location, Sunny and Kyle has proven time and time again how productive and efficient working remotely is.",how-to-be-a-remote-working-ninja,General,leon@ninjality.com,"2017-02-13 05:53:33","2017-02-13 05:53:33","2016-05-09 05:53:32"
24,"Podcasts For Developers","If you're a developer, you may be wanting to improve your skills but lack the time to devote in reading books, watching videos, or reading articles (glad you're reading this one though!). So, how do we go about our normal days while still leveling up? Podcasts. More specifically, audio podcasts which are much like radio shows but on specific topics. The great part about them is being able to listen while doing other tasks. As you can guess, we will list ones that discuss developer-related topics as curated by our team.

## ShopTalk

[![ShopTalk](/storage/app/uploads/public/58a/14a/706/58a14a7067eed764891241.jpg)](http://shoptalkshow.com/)

[ShopTalk](http://shoptalkshow.com/) is ""a web design and development podcast with Chris Coyier and Dave Rupert.""

Both hosts are well-known in the web design industry, and you've probably came across Chris' website, [CSS-Tricks](https://css-tricks.com/), multiple times. What's great about ShopTalk is not only the hosts' humor (hats off to Dave's sound effects), but the catering to both beginner and advanced audiences. They typically answer various coding questions that will surely save you some Googling when you encounter the same problem, but also do interviews from time to time.

## Developer Tea

[![Developer Tea](/storage/app/uploads/public/58a/14a/876/58a14a876c512236660289.jpg)](http://spec.fm/podcasts/developer-tea)

[Developer Tea](http://spec.fm/podcasts/developer-tea) is ""a podcast for developers designed to fit inside your tea break."" 

Host Jonathan Cutrell shares his wisdom on various topics in programming and business. What makes this podcast stand out is how some topics seem unrelated and yet are very important to master, such as proper communication skills, imposter syndrome, etc. Also, the short length of each episode makes it a good listen during quick commutes or tasks.

## The Laracasts Snippet

[![The Laracasts Snippet](/storage/app/uploads/public/58a/14a/9bc/58a14a9bc8253363393317.jpg)](https://laracasts.simplecast.fm/)

[The Laracasts Snippet](https://laracasts.simplecast.fm/),"" each episode, offers a single thought on some aspect of web development. Nothing more, nothing less. Hosted by Jeffrey Way.""

This is complementary podcast to Jeffrey's screencasts site, [Laracasts](https://laracasts.com/). Similar to Developer Tea, Jeffrey offers various thoughts based on his experience in development. Each episode is an average of five minutes but packs a lot of information.

## Three Devs and a Maybe

[![Three Devs and a Maybe](/storage/app/uploads/public/58a/14a/b2e/58a14ab2ed1ae917630131.jpg)](http://threedevsandamaybe.com/)

[Three Devs and a Maybe](http://threedevsandamaybe.com/) is a ""weekly discussion podcast on all things web development. Topics range from daily developer life, PHP, frameworks, testing, good software design and our experiences using many other programming languages.""

If you imagine yourself and a couple of friends getting together to catch each other up on life and code things, and enjoy the thought of that, then this is the podcast for you. Hosted by the friendly Michael Budd, Fraser Hart, Lewis Cains, and Edd Mann.

## Toolsday

[![Toolsday](/storage/app/uploads/public/58a/14a/c5c/58a14ac5cd094832831540.jpg)](http://toolsday.io/)

[Toolsday](http://toolsday.io/) ""is a 20-ish-minute podcast about the latest in tech tools, tips, and tricks on Tuesdays at 2! (Our alliteration game is so strong). The podcast is brought to you by Chris Dhanaraj and Una Kravets.""

There are a [ton of tools](https://ninjality.com/blog/slimming-down-your-toolset) in the development world, and this podcast helps you learn about each one. Not only do the hosts discuss important topics such as accessibility and unit testing, but they also let you know which tools can help you accomplish such tasks. Oh, and you get to listen to Una sing a new theme song in the beginning of each episode.

## CodePen Radio

[![CodePen Radio](/storage/app/uploads/public/58a/14a/d88/58a14ad881939089945610.jpg)](https://blog.codepen.io/radio/)

[CodePen Radio](https://blog.codepen.io/radio/) is ""a podcast all about what it's like running a small web software business. The good, the bad, and the ugly.""

Another podcast with Chris Coyier, along with other smart founders Alex Vasquez and Tim Sabat. They cover what it's like to run [CodePen](http://codepen.io/) and you are sure to learn a lot if you are interested in doing your own startup on the internet. It's also a good reference on things like downtime, deployments, hiring, and funding.

## JavaScript Air

[![JavaScript Air](/storage/app/uploads/public/58a/14a/e94/58a14ae94ed6c000208711.jpg)](https://javascriptair.com/)

[JavaScript Air](https://javascriptair.com/) is ""the live broadcast podcast all about JavaScript.""

If you're wanting gains in your JavaScript skills, then this podcast is a good listen. You'll hear about various frameworks such as React and Angular, and build tools such as webpack. Hosted by Kent Dodds, who is an instructor on [https://egghead.io/](egghead.io), along with other smart panelists.

## JavaScript Jabber

[![JavaScript Jabber](/storage/app/uploads/public/58a/14a/fb0/58a14afb0a701148029153.jpg)](https://devchat.tv/js-jabber)

[JavaScript Jabber](https://devchat.tv/js-jabber) ""is a weekly discussion about JavaScript, front-end development, community, careers, and frameworks.""

If that's not enough JavaScript for you, take a look at JSJ which is hosted by Charles Wood. A guest will come on each episode to discuss a specific framework, tool, or related topic in front-end.

## Web of Tomorrow

[![Web of Tomorrow](/storage/app/uploads/public/58a/14b/1fb/58a14b1fb2acb465326571.jpg)]((http://www.weboftomorrowpodcast.com/))

[Web of Tomorrow](http://www.weboftomorrowpodcast.com/) is ""a podcast about JavaScript, web development, web design, and technology. We are Riley Carrasquillo (the noob) and Adam Harris (the not noob), and we love web technology and we love talking about it.""

Rounding off the list is a general podcast about web development. Each episode is about 15 minutes on advanced web topics that are explained in simplified ways.

## Share Yours!

What did you think of our list? Do you have your own suggestions? Leave a comment below or on our [Twitter](https://twitter.com/ninjalitydesign) and [Facebook](https://www.facebook.com/ninjalitydesign).","<p>If you're a developer, you may be wanting to improve your skills but lack the time to devote in reading books, watching videos, or reading articles (glad you're reading this one though!). So, how do we go about our normal days while still leveling up? Podcasts. More specifically, audio podcasts which are much like radio shows but on specific topics. The great part about them is being able to listen while doing other tasks. As you can guess, we will list ones that discuss developer-related topics as curated by our team.</p>
<h2>ShopTalk</h2>
<p><a href=""http://shoptalkshow.com/""><img src=""/storage/app/uploads/public/58a/14a/706/58a14a7067eed764891241.jpg"" alt=""ShopTalk"" /></a></p>
<p><a href=""http://shoptalkshow.com/"">ShopTalk</a> is &quot;a web design and development podcast with Chris Coyier and Dave Rupert.&quot;</p>
<p>Both hosts are well-known in the web design industry, and you've probably came across Chris' website, <a href=""https://css-tricks.com/"">CSS-Tricks</a>, multiple times. What's great about ShopTalk is not only the hosts' humor (hats off to Dave's sound effects), but the catering to both beginner and advanced audiences. They typically answer various coding questions that will surely save you some Googling when you encounter the same problem, but also do interviews from time to time.</p>
<h2>Developer Tea</h2>
<p><a href=""http://spec.fm/podcasts/developer-tea""><img src=""/storage/app/uploads/public/58a/14a/876/58a14a876c512236660289.jpg"" alt=""Developer Tea"" /></a></p>
<p><a href=""http://spec.fm/podcasts/developer-tea"">Developer Tea</a> is &quot;a podcast for developers designed to fit inside your tea break.&quot; </p>
<p>Host Jonathan Cutrell shares his wisdom on various topics in programming and business. What makes this podcast stand out is how some topics seem unrelated and yet are very important to master, such as proper communication skills, imposter syndrome, etc. Also, the short length of each episode makes it a good listen during quick commutes or tasks.</p>
<h2>The Laracasts Snippet</h2>
<p><a href=""https://laracasts.simplecast.fm/""><img src=""/storage/app/uploads/public/58a/14a/9bc/58a14a9bc8253363393317.jpg"" alt=""The Laracasts Snippet"" /></a></p>
<p><a href=""https://laracasts.simplecast.fm/"">The Laracasts Snippet</a>,&quot; each episode, offers a single thought on some aspect of web development. Nothing more, nothing less. Hosted by Jeffrey Way.&quot;</p>
<p>This is complementary podcast to Jeffrey's screencasts site, <a href=""https://laracasts.com/"">Laracasts</a>. Similar to Developer Tea, Jeffrey offers various thoughts based on his experience in development. Each episode is an average of five minutes but packs a lot of information.</p>
<h2>Three Devs and a Maybe</h2>
<p><a href=""http://threedevsandamaybe.com/""><img src=""/storage/app/uploads/public/58a/14a/b2e/58a14ab2ed1ae917630131.jpg"" alt=""Three Devs and a Maybe"" /></a></p>
<p><a href=""http://threedevsandamaybe.com/"">Three Devs and a Maybe</a> is a &quot;weekly discussion podcast on all things web development. Topics range from daily developer life, PHP, frameworks, testing, good software design and our experiences using many other programming languages.&quot;</p>
<p>If you imagine yourself and a couple of friends getting together to catch each other up on life and code things, and enjoy the thought of that, then this is the podcast for you. Hosted by the friendly Michael Budd, Fraser Hart, Lewis Cains, and Edd Mann.</p>
<h2>Toolsday</h2>
<p><a href=""http://toolsday.io/""><img src=""/storage/app/uploads/public/58a/14a/c5c/58a14ac5cd094832831540.jpg"" alt=""Toolsday"" /></a></p>
<p><a href=""http://toolsday.io/"">Toolsday</a> &quot;is a 20-ish-minute podcast about the latest in tech tools, tips, and tricks on Tuesdays at 2! (Our alliteration game is so strong). The podcast is brought to you by Chris Dhanaraj and Una Kravets.&quot;</p>
<p>There are a <a href=""https://ninjality.com/blog/slimming-down-your-toolset"">ton of tools</a> in the development world, and this podcast helps you learn about each one. Not only do the hosts discuss important topics such as accessibility and unit testing, but they also let you know which tools can help you accomplish such tasks. Oh, and you get to listen to Una sing a new theme song in the beginning of each episode.</p>
<h2>CodePen Radio</h2>
<p><a href=""https://blog.codepen.io/radio/""><img src=""/storage/app/uploads/public/58a/14a/d88/58a14ad881939089945610.jpg"" alt=""CodePen Radio"" /></a></p>
<p><a href=""https://blog.codepen.io/radio/"">CodePen Radio</a> is &quot;a podcast all about what it's like running a small web software business. The good, the bad, and the ugly.&quot;</p>
<p>Another podcast with Chris Coyier, along with other smart founders Alex Vasquez and Tim Sabat. They cover what it's like to run <a href=""http://codepen.io/"">CodePen</a> and you are sure to learn a lot if you are interested in doing your own startup on the internet. It's also a good reference on things like downtime, deployments, hiring, and funding.</p>
<h2>JavaScript Air</h2>
<p><a href=""https://javascriptair.com/""><img src=""/storage/app/uploads/public/58a/14a/e94/58a14ae94ed6c000208711.jpg"" alt=""JavaScript Air"" /></a></p>
<p><a href=""https://javascriptair.com/"">JavaScript Air</a> is &quot;the live broadcast podcast all about JavaScript.&quot;</p>
<p>If you're wanting gains in your JavaScript skills, then this podcast is a good listen. You'll hear about various frameworks such as React and Angular, and build tools such as webpack. Hosted by Kent Dodds, who is an instructor on <a href=""egghead.io""><a href=""https://egghead.io/"">https://egghead.io/</a></a>, along with other smart panelists.</p>
<h2>JavaScript Jabber</h2>
<p><a href=""https://devchat.tv/js-jabber""><img src=""/storage/app/uploads/public/58a/14a/fb0/58a14afb0a701148029153.jpg"" alt=""JavaScript Jabber"" /></a></p>
<p><a href=""https://devchat.tv/js-jabber"">JavaScript Jabber</a> &quot;is a weekly discussion about JavaScript, front-end development, community, careers, and frameworks.&quot;</p>
<p>If that's not enough JavaScript for you, take a look at JSJ which is hosted by Charles Wood. A guest will come on each episode to discuss a specific framework, tool, or related topic in front-end.</p>
<h2>Web of Tomorrow</h2>
<p><a href=""(http://www.weboftomorrowpodcast.com/)""><img src=""/storage/app/uploads/public/58a/14b/1fb/58a14b1fb2acb465326571.jpg"" alt=""Web of Tomorrow"" /></a></p>
<p><a href=""http://www.weboftomorrowpodcast.com/"">Web of Tomorrow</a> is &quot;a podcast about JavaScript, web development, web design, and technology. We are Riley Carrasquillo (the noob) and Adam Harris (the not noob), and we love web technology and we love talking about it.&quot;</p>
<p>Rounding off the list is a general podcast about web development. Each episode is about 15 minutes on advanced web topics that are explained in simplified ways.</p>
<h2>Share Yours!</h2>
<p>What did you think of our list? Do you have your own suggestions? Leave a comment below or on our <a href=""https://twitter.com/ninjalitydesign"">Twitter</a> and <a href=""https://www.facebook.com/ninjalitydesign"">Facebook</a>.</p>","If you're a developer, you may be wanting to improve your skills but lack the time to devote in reading books, watching videos, or reading articles (glad you're reading this one though!). So, how do we go about our normal days while still leveling up? Podcasts. More specifically, audio podcasts which are much like radio shows but on specific topics. The great part about them is being able to listen while doing other tasks. As you can guess, we will list ones that discuss developer-related topics as curated by our team.",podcasts-for-developers,General,sunny@ninjality.com,"2017-02-13 05:59:29","2017-02-13 05:59:29","2016-05-17 05:59:27"
25,"How to start blogging","Starting a custom self-hosted blog isn’t hard, and for many is a way to jump into coding. We’ve been blogging for years on this site and a dozen of other sites, and we’ve used almost all of the popular blogging content management system (CMS). I also personally make a living off of blogging for Ninjality and other outlets so that I would call myself a blogging expert. I often get asked how someone could get started blogging, and how easy is it. The answer is in two parts. The first part is setting up a blog and having it designed efficiently. The hardest is the blogging - you’ll often write to yourself and growing your audience isn’t easy. This isn’t to say you cannot make it blogging, but in fact, there are hundreds of pro-bloggers. 

What I want to focus on is the initial setup of a server to your first post. The early steps are necessary for setting a solid ground for your newly minted blog. The choices you make when picking a host, a domain name, or even a theme is critical in the branding and the style you're setting for yourself. If you're starting a blog for your business even better! I’ve had more experiences with companies, startups, and news outlets than personally blogging about my name. 

I know you may think blogging is a dirty word, and you’ll say it implies your unprofessional or doing it for fun. In fact, blogging is typical career much like YouTuber is a job title thousands of people have. Blogging is nothing more than sharing your thoughts and opinions or sharing your expertise in an area. If your small business makes the best pizza, then you could blog about pizza. This blog could include how you source ingredients, how you make the crust just the right crunch, or it could include other great pizzas around the world. This would give customers a place to think about your pizza even when their not in front of your store or even thinking about pizza. Also, who in their right mind wouldn’t want to blog about pizza? 

# Domain name registrar

Choosing a domain registrar is important because they’ll be the ones who you pay for your domain. Some registrars like GoDaddy upscale, add extra services or charge extra for a domain. While it may be convenient to buy your domain, hosting, and extras with GoDaddy it’s not always cost-effective. GoDaddy has dozens of services which make them sell their domains for much more than other registrars would usually charge. Everyone at Ninjality uses NameCheap for years, and I’ve had domains with them since early 2010. They offer ‘cheap’ domains from .com to .ninja, and they’re always adding new TLD (Top Level Domains). The NameCheap team is always active on social media where you can always get live support or always chat with someone easily.  Namecheap always offers monthly coupons to save you extra money on top of their already low prices. 

Now there are others registrars which always offer excellent services and don’t upsell or throw extra junk you don’t need. The best two are hover and Google Domains, which focus on domains and email. Hover is a domain and email host which focus on only those instead of trying to do hosting or extra fluff. Google Domains is the same way - by focusing on domains, they don’t have to worry about selling a bunch of other tools. Of course, Google offers email and web hosting but those are separate tools which you can opt to use, and Google doesn’t force you too. 

# Blog web host

Choosing a web host is imperative, they’re the ones storing all your blog post and images. If the host disappears or losses you data, everything can be gone in mere seconds. This is why we always opt for cloud hosting solutions like AWS or Digital Ocean. Of course, there is host optimized for blogs like WordPress, but they cost more than you would have to pay for a web space.  We’ve used a handful of the different host from WP Engine for WordPress hosting to AWS for Ghost. We’ve hit a middle ground now: Digital Ocean, which offers a cloud hosting solution which is inexpensive scalable and easy to manage. They charge you only what you use, whereas another host you usually pay for a large swatch of space and hope you don’t use all of it. 

[Digital Ocean](https://www.digitalocean.com/) is a little more technical, but they have easy one click-installs. The apps include [WordPress](https://wordpress.org/), [Ghost](https://ghost.org/), and other popular platforms. If you do run into a hiccup, you can reference on of Digital Oceans tutorials or help documents they’ve compiled. 

# CMS

Content management system or CMS is where you’ll manage your photos, comments, and most importantly your articles. There are platforms like Tumblr, WordPress.com, Blogger, and others. Those platforms are not self-hosted, cost a lot, and are very limiting. A custom self-hosted blog allows you to change anything you want and has full control over the content you have. While it’s unlikely, WordPress.com could stop working tomorrow and your data would be gone. 

A self-hosted blog can cost as little as $10 a month with backups included. This would be perfect for a small blog which doesn’t have a lot of pictures of views yet. 

Which CMS you choose is hard. I’ve used WordPress for years because the support and some things developers can add or design with. If you’re looking for a sophisticated blog with custom post pages, multiple dynamic designs, and dozens of static pages - WordPress would be the best option. There are millions of plugins, themes, and support places for any problems that could arise. If you feel like you only want a blog with something simple, yet elegant, I would recommend Ghost. You’re still able to customize the look to your liking, but Ghost doesn’t have a lot of fluff. There are themes, some plugins, and different styles you can do, but they are easy to use. I also love the markdown - live preview side by side that they offer.

# Overview

Starting a blog isn’t hard as you think, and isn’t expensive at all. In fact, you could start blogging in an hour. Now, if you want something custom built with styles and colors which match your businesses site we can design and develop a custom WordPress theme which fits within your company's current web design. All you have to do is head over to the contact page where one of our design ninjas will get in touch with you. They’ll walk you through the process and get a quote to you quickly. The prices can fit within most budgets, and trust me I’m a broke blogger who has had work done by the team. 

Let me round up what I said in the post:

* Best host: Digital Ocean

* Best domain registrar: Namecheap or Google Domains

* Best CMS: Robust blogs- WordPress & personal blogs/simple blogs - Ghost

Check back on The Ninjality Blog for more articles on how to start a blog from doing the marketing, to managing updates, all the way to hiring writers for your blog!","<p>Starting a custom self-hosted blog isn’t hard, and for many is a way to jump into coding. We’ve been blogging for years on this site and a dozen of other sites, and we’ve used almost all of the popular blogging content management system (CMS). I also personally make a living off of blogging for Ninjality and other outlets so that I would call myself a blogging expert. I often get asked how someone could get started blogging, and how easy is it. The answer is in two parts. The first part is setting up a blog and having it designed efficiently. The hardest is the blogging - you’ll often write to yourself and growing your audience isn’t easy. This isn’t to say you cannot make it blogging, but in fact, there are hundreds of pro-bloggers. </p>
<p>What I want to focus on is the initial setup of a server to your first post. The early steps are necessary for setting a solid ground for your newly minted blog. The choices you make when picking a host, a domain name, or even a theme is critical in the branding and the style you're setting for yourself. If you're starting a blog for your business even better! I’ve had more experiences with companies, startups, and news outlets than personally blogging about my name. </p>
<p>I know you may think blogging is a dirty word, and you’ll say it implies your unprofessional or doing it for fun. In fact, blogging is typical career much like YouTuber is a job title thousands of people have. Blogging is nothing more than sharing your thoughts and opinions or sharing your expertise in an area. If your small business makes the best pizza, then you could blog about pizza. This blog could include how you source ingredients, how you make the crust just the right crunch, or it could include other great pizzas around the world. This would give customers a place to think about your pizza even when their not in front of your store or even thinking about pizza. Also, who in their right mind wouldn’t want to blog about pizza? </p>
<h1>Domain name registrar</h1>
<p>Choosing a domain registrar is important because they’ll be the ones who you pay for your domain. Some registrars like GoDaddy upscale, add extra services or charge extra for a domain. While it may be convenient to buy your domain, hosting, and extras with GoDaddy it’s not always cost-effective. GoDaddy has dozens of services which make them sell their domains for much more than other registrars would usually charge. Everyone at Ninjality uses NameCheap for years, and I’ve had domains with them since early 2010. They offer ‘cheap’ domains from .com to .ninja, and they’re always adding new TLD (Top Level Domains). The NameCheap team is always active on social media where you can always get live support or always chat with someone easily.  Namecheap always offers monthly coupons to save you extra money on top of their already low prices. </p>
<p>Now there are others registrars which always offer excellent services and don’t upsell or throw extra junk you don’t need. The best two are hover and Google Domains, which focus on domains and email. Hover is a domain and email host which focus on only those instead of trying to do hosting or extra fluff. Google Domains is the same way - by focusing on domains, they don’t have to worry about selling a bunch of other tools. Of course, Google offers email and web hosting but those are separate tools which you can opt to use, and Google doesn’t force you too. </p>
<h1>Blog web host</h1>
<p>Choosing a web host is imperative, they’re the ones storing all your blog post and images. If the host disappears or losses you data, everything can be gone in mere seconds. This is why we always opt for cloud hosting solutions like AWS or Digital Ocean. Of course, there is host optimized for blogs like WordPress, but they cost more than you would have to pay for a web space.  We’ve used a handful of the different host from WP Engine for WordPress hosting to AWS for Ghost. We’ve hit a middle ground now: Digital Ocean, which offers a cloud hosting solution which is inexpensive scalable and easy to manage. They charge you only what you use, whereas another host you usually pay for a large swatch of space and hope you don’t use all of it. </p>
<p><a href=""https://www.digitalocean.com/"">Digital Ocean</a> is a little more technical, but they have easy one click-installs. The apps include <a href=""https://wordpress.org/"">WordPress</a>, <a href=""https://ghost.org/"">Ghost</a>, and other popular platforms. If you do run into a hiccup, you can reference on of Digital Oceans tutorials or help documents they’ve compiled. </p>
<h1>CMS</h1>
<p>Content management system or CMS is where you’ll manage your photos, comments, and most importantly your articles. There are platforms like Tumblr, WordPress.com, Blogger, and others. Those platforms are not self-hosted, cost a lot, and are very limiting. A custom self-hosted blog allows you to change anything you want and has full control over the content you have. While it’s unlikely, WordPress.com could stop working tomorrow and your data would be gone. </p>
<p>A self-hosted blog can cost as little as $10 a month with backups included. This would be perfect for a small blog which doesn’t have a lot of pictures of views yet. </p>
<p>Which CMS you choose is hard. I’ve used WordPress for years because the support and some things developers can add or design with. If you’re looking for a sophisticated blog with custom post pages, multiple dynamic designs, and dozens of static pages - WordPress would be the best option. There are millions of plugins, themes, and support places for any problems that could arise. If you feel like you only want a blog with something simple, yet elegant, I would recommend Ghost. You’re still able to customize the look to your liking, but Ghost doesn’t have a lot of fluff. There are themes, some plugins, and different styles you can do, but they are easy to use. I also love the markdown - live preview side by side that they offer.</p>
<h1>Overview</h1>
<p>Starting a blog isn’t hard as you think, and isn’t expensive at all. In fact, you could start blogging in an hour. Now, if you want something custom built with styles and colors which match your businesses site we can design and develop a custom WordPress theme which fits within your company's current web design. All you have to do is head over to the contact page where one of our design ninjas will get in touch with you. They’ll walk you through the process and get a quote to you quickly. The prices can fit within most budgets, and trust me I’m a broke blogger who has had work done by the team. </p>
<p>Let me round up what I said in the post:</p>
<ul>
<li>
<p>Best host: Digital Ocean</p>
</li>
<li>
<p>Best domain registrar: Namecheap or Google Domains</p>
</li>
<li>Best CMS: Robust blogs- WordPress &amp; personal blogs/simple blogs - Ghost</li>
</ul>
<p>Check back on The Ninjality Blog for more articles on how to start a blog from doing the marketing, to managing updates, all the way to hiring writers for your blog!</p>","Starting a custom self-hosted blog isn’t hard, and for many is a way to jump into coding. We’ve been blogging for years on this site and a dozen of other sites, and we’ve used almost all of the popular blogging content management system (CMS). I also personally make a living off of blogging for Ninjality and other outlets so that I would call myself a blogging expert. I often get asked how someone could get started blogging, and how easy is it. The answer is in two parts. The first part is setting up a blog and having it designed easily. The hard part is the blogging - you’ll often write to yourself and growing your audience isn’t easy. This isn’t to say you cannot make it blogging, but in fact, there are hundreds of pro-bloggers.",how-to-start-blogging,General|Tutorials,leon@ninjality.com,"2017-02-13 06:00:51","2017-02-13 06:00:51","2016-05-20 06:00:50"
26,"How to be a Facebook Page Ninja","![Person tapping like on his phone rapidly](https://media.giphy.com/media/14cilFdQzr8hG0/giphy.gif)

Facebook has become a driver for sales, views, and conversation. Engagement rates on Facebook are higher than any other social platform. Customer acquisition costs are also lower on Facebook than having to do research, marketing, and accessibility of the social network. These factors have made Facebook essential in any company's plans for marketing and being on social media. While Twitter is a great place to help users, and talk to them in an open forum. Facebook’s platform is the biggest driver for sales and views.  

*Facebook is the biggest driver of sales and views for websites and physical locations*

Understanding Facebook’s pages for business isn’t always an easy task. There are numerous hubs and hoops you have to jump through, to get your page up and running. Once you do get set up with your page, the hassle doesn’t end. You’ll need to manage messages with customers, post during high engagement times, and understand how to target key customers on the biggest social network. There are also key ways to share to boost engagement like using live videos or paying to promote the content. The Facebook algorithms don’t always push new updates into a user's newsfeed. 

In this Article, we are going to give you some tips to become a Facebook Page **_Ninja_**. I’ve helped grow Facebook Pages from **10** likes to well over **10,000** likes, boosting sales and driving traffic to pages. I’ve also helped keep customer acquisition cost low and helped increase brand awareness. 

# Initial setup

Facebook uses a step by step process to setup a new Facebook Page. The process asks what industry your company is in, the page's name, profile picture, along with the preferred audience. Once you’ve been walked through the process, you can still tweak the page to make it more appealing to users and your business. You’re able to add contact info, manage your tabs, and add information like the year the company was founded. Filing out as much as the information is relevant for users who want to find out more about your business but also a great way to store all your valuable information. 

Part of starting a new Facebook page is getting people to like the page. Facebook understands this is hard, but they also know your network of friends and family are willing to help you out. You’re able to invite all your Facebook friends to like your page to gain a few likes, maybe even a couple of hundreds likes before you start telling customers about your page. Facebook also makes creating targeted ads campaigns easy-ish, so you gain from potential customers. 

# Targeted ad campaign

Using target ad campaigns mean you can promote your page, promote your website, or promote a contact our page on Facebook. If you want to drive traffic to your site over the long term, I would recommend growing your page first, and then boosting different post pages. Targeting your potential audience is somewhat easy with Facebook’s robust user base. 

If you're a coffee shop in Austin Texas, you can look around Facebook for other coffee shops that you're competing with. Then you're able to target those customers to like your page, and in turn, be exposed to your updates and explain to them how your coffee is better. The same goes for an online business. If you’re a culture and music blog based out of Austin, you can not only target your local region for music lovers but also target users who like Rolling Stones or other music websites. Of course, Facebook lets you target users by age, location, interest, and other info. 

*How to target customers:*

* Target by pages customers already like

* Targeted by location

* Targeted by age

* Targeted by interests

# Editorial Calendar

Having millions of likes or users contacting you isn’t useful if you’re not posting content to the page. The highest driver of traffic is video and live videos, but having images or gifs on a post will also boost users engagement. Using tools like Trello and Buffer to schedule posts mean you can reach the most potential customers at prime times, and still keep your sanity. Trello lets you plan out tweets/posts and with Buffer you’re able to schedule posts. 

You’re also able to plan for when you're going to publish videos or do a Facebook live video. Having consistent posts on your page at prime times is important in driving traffic to your website, app, or coffee shop. This means posting multiple times a day and analyzing what times is the best performing.

# Overall

Using Facebook is a must these days. There are billions of users checking Facebook regularly, and if you're in their news feed, you're in their minds.  Getting into a user's news feed means having them like your page, boosting posts, and advertising videos. It also means timing your post perfectly to reach the most users without spending thousands in reaching your customers. Facebook also allows you to talk to customers through Messenger or even in some cases you can build a bot. There other routes in gaining Facebook likes from asking customers to like the page in the store to get the Wifi password, or giving them a discount code online. 

List Form of tips:

* Post during the right time, boosting user engagement

* Use videos and live videos to gain more attention

* Use targeted ad campaigns to reach more potential customers

* Use an editorial calendar on Trello

* Use Buffer to schedule videos, pictures and other written posts 

Facebook is important and with these tips you can become a Facebook Page Ninja! If you want to outsource the work to give you more time to make coffee, or sale goods online our team of Ninja’s can help shape your brand and give it the unique voice you want. We’ve helped YouTubers, media companies , photographers, and even coffee shops grow on Facebook. 

Reach us on [Facebook](http://facebook.com/ninjality), [Twitter](https://twitter.com/ninjalitydesign), or use our very own [contact us](https://ninjality.com/contact) page! Also, you can follow me on social media [@leonhitchens](https://twitter.com/leonhitchens) everywhere or read my tech coverage on [Digital Bounds](http://digitalbounds.com/).","<p><img src=""https://media.giphy.com/media/14cilFdQzr8hG0/giphy.gif"" alt=""Person tapping like on his phone rapidly"" /></p>
<p>Facebook has become a driver for sales, views, and conversation. Engagement rates on Facebook are higher than any other social platform. Customer acquisition costs are also lower on Facebook than having to do research, marketing, and accessibility of the social network. These factors have made Facebook essential in any company's plans for marketing and being on social media. While Twitter is a great place to help users, and talk to them in an open forum. Facebook’s platform is the biggest driver for sales and views.  </p>
<p><em>Facebook is the biggest driver of sales and views for websites and physical locations</em></p>
<p>Understanding Facebook’s pages for business isn’t always an easy task. There are numerous hubs and hoops you have to jump through, to get your page up and running. Once you do get set up with your page, the hassle doesn’t end. You’ll need to manage messages with customers, post during high engagement times, and understand how to target key customers on the biggest social network. There are also key ways to share to boost engagement like using live videos or paying to promote the content. The Facebook algorithms don’t always push new updates into a user's newsfeed. </p>
<p>In this Article, we are going to give you some tips to become a Facebook Page <strong><em>Ninja</em></strong>. I’ve helped grow Facebook Pages from <strong>10</strong> likes to well over <strong>10,000</strong> likes, boosting sales and driving traffic to pages. I’ve also helped keep customer acquisition cost low and helped increase brand awareness. </p>
<h1>Initial setup</h1>
<p>Facebook uses a step by step process to setup a new Facebook Page. The process asks what industry your company is in, the page's name, profile picture, along with the preferred audience. Once you’ve been walked through the process, you can still tweak the page to make it more appealing to users and your business. You’re able to add contact info, manage your tabs, and add information like the year the company was founded. Filing out as much as the information is relevant for users who want to find out more about your business but also a great way to store all your valuable information. </p>
<p>Part of starting a new Facebook page is getting people to like the page. Facebook understands this is hard, but they also know your network of friends and family are willing to help you out. You’re able to invite all your Facebook friends to like your page to gain a few likes, maybe even a couple of hundreds likes before you start telling customers about your page. Facebook also makes creating targeted ads campaigns easy-ish, so you gain from potential customers. </p>
<h1>Targeted ad campaign</h1>
<p>Using target ad campaigns mean you can promote your page, promote your website, or promote a contact our page on Facebook. If you want to drive traffic to your site over the long term, I would recommend growing your page first, and then boosting different post pages. Targeting your potential audience is somewhat easy with Facebook’s robust user base. </p>
<p>If you're a coffee shop in Austin Texas, you can look around Facebook for other coffee shops that you're competing with. Then you're able to target those customers to like your page, and in turn, be exposed to your updates and explain to them how your coffee is better. The same goes for an online business. If you’re a culture and music blog based out of Austin, you can not only target your local region for music lovers but also target users who like Rolling Stones or other music websites. Of course, Facebook lets you target users by age, location, interest, and other info. </p>
<p><em>How to target customers:</em></p>
<ul>
<li>
<p>Target by pages customers already like</p>
</li>
<li>
<p>Targeted by location</p>
</li>
<li>
<p>Targeted by age</p>
</li>
<li>Targeted by interests</li>
</ul>
<h1>Editorial Calendar</h1>
<p>Having millions of likes or users contacting you isn’t useful if you’re not posting content to the page. The highest driver of traffic is video and live videos, but having images or gifs on a post will also boost users engagement. Using tools like Trello and Buffer to schedule posts mean you can reach the most potential customers at prime times, and still keep your sanity. Trello lets you plan out tweets/posts and with Buffer you’re able to schedule posts. </p>
<p>You’re also able to plan for when you're going to publish videos or do a Facebook live video. Having consistent posts on your page at prime times is important in driving traffic to your website, app, or coffee shop. This means posting multiple times a day and analyzing what times is the best performing.</p>
<h1>Overall</h1>
<p>Using Facebook is a must these days. There are billions of users checking Facebook regularly, and if you're in their news feed, you're in their minds.  Getting into a user's news feed means having them like your page, boosting posts, and advertising videos. It also means timing your post perfectly to reach the most users without spending thousands in reaching your customers. Facebook also allows you to talk to customers through Messenger or even in some cases you can build a bot. There other routes in gaining Facebook likes from asking customers to like the page in the store to get the Wifi password, or giving them a discount code online. </p>
<p>List Form of tips:</p>
<ul>
<li>
<p>Post during the right time, boosting user engagement</p>
</li>
<li>
<p>Use videos and live videos to gain more attention</p>
</li>
<li>
<p>Use targeted ad campaigns to reach more potential customers</p>
</li>
<li>
<p>Use an editorial calendar on Trello</p>
</li>
<li>Use Buffer to schedule videos, pictures and other written posts </li>
</ul>
<p>Facebook is important and with these tips you can become a Facebook Page Ninja! If you want to outsource the work to give you more time to make coffee, or sale goods online our team of Ninja’s can help shape your brand and give it the unique voice you want. We’ve helped YouTubers, media companies , photographers, and even coffee shops grow on Facebook. </p>
<p>Reach us on <a href=""http://facebook.com/ninjality"">Facebook</a>, <a href=""https://twitter.com/ninjalitydesign"">Twitter</a>, or use our very own <a href=""https://ninjality.com/contact"">contact us</a> page! Also, you can follow me on social media <a href=""https://twitter.com/leonhitchens"">@leonhitchens</a> everywhere or read my tech coverage on <a href=""http://digitalbounds.com/"">Digital Bounds</a>.</p>","Facebook has become a driver for sales, views, and conversation. Engagement rates on Facebook are higher than any other social platform. Customer acquisition costs are also lower on Facebook than having to do research, marketing, and accessibility of the social network. These factors have made Facebook essential in any company's plans for marketing and being on social media. While Twitter is a great place to help users, and talk to them in an open forum. Facebook’s platform is the biggest driver for sales and views.",how-to-be-a-facebook-page-ninja,General,leon@ninjality.com,"2017-02-13 06:03:28","2017-02-13 06:03:28","2016-05-29 06:01:42"
27,"Twitter accounts to follow for developers","For professionals, Twitter is used as a way of growing your network of like-minded people, or potentially going outside your comfort zone in hopes of learning a new skill. As a developer, I am always on the lookout for people who are way smarter than me that I'd love to learn from via their tweets, or sometimes just want to stay up to date on news. Here are some that I recommend.

## [@LeaVerou](https://twitter.com/LeaVerou)

[![Lea Verou's Twitter](https://pbs.twimg.com/profile_images/584963092120899586/TxkxQ7Y5_200x200.png)](https://twitter.com/LeaVerou)

Lea Verou is a good example of someone who dedicates their focus on a single aspect of the web and surfaces knowledge about things that you probably didn't know about. She typically writes about the intricacies of CSS and general web topics on her blog, but has also written numerous JavaScript libraries such as Prism.

## [@mpjme](https://twitter.com/mpjme)

[![Mattias P Johansson's Twitter](https://pbs.twimg.com/profile_images/660955770020728832/TsCE6kM1_200x200.png)](https://twitter.com/mpjme)

I came across Mattias through his YouTube show, Fun Fun Function, which he tweets about whenever he releases a new video. I've quickly learned that not only does he have a lot of experience in the programming world, but he also has smart insights on typical discussions in this industry.

## [@googledevs](https://twitter.com/googledevs)

[![Google Developers' Twitter](https://pbs.twimg.com/profile_images/756235654980308994/JLbEEloM_200x200.jpg)](https://twitter.com/googledevs)

Google is invested in the web, and that can be clearly seen from their presence in the community. You can find various things on their Google Developers account such as open source projects, new videos, and announcements of new APIs.

## [@smashingmag](https://twitter.com/smashingmag)

[![Smashing Magazine's Twitter](https://pbs.twimg.com/profile_images/477218012194304000/ytI5hY2H_200x200.png)](https://twitter.com/smashingmag)

Smashing Magazine has consistently been a good source for tutorials, discussions, and news for developers. I'm always excited to see a new tweet about designing interfaces, development stacks, tools, or usability. They don't always tweet about articles on their own site either, I always find an interesting topic that's linked to a personal blog.

## [@RegexTip](https://twitter.com/RegexTip)

 [![Regular Expression's Twitter](https://pbs.twimg.com/profile_images/710922470107185153/aIwu3CoM_200x200.jpg)](https://twitter.com/RegexTip)

This is one account that I think every developer who has touched the unwieldy land of regular expressions should follow. Regex can be extremely useful for certain tasks, but understanding the syntax can forever to learn. With daily tweets, RegexTips can help you learn with simple tips.

## #ShamelessPromotions

And of course, we think you should follow us! There's our main [@ninjalitydesign](https://twitter.com/ninjalitydesign) account where we can notify you of new articles or offer our development, design, and business insights. Also check out [@getdevnews](https://twitter.com/getdevnews) which will be devoted towards developer news. Finally, I tweet about numerous things, sometimes about code, on [@sunnysinghio](https://twitter.com/sunnysinghio).","<p>For professionals, Twitter is used as a way of growing your network of like-minded people, or potentially going outside your comfort zone in hopes of learning a new skill. As a developer, I am always on the lookout for people who are way smarter than me that I'd love to learn from via their tweets, or sometimes just want to stay up to date on news. Here are some that I recommend.</p>
<h2><a href=""https://twitter.com/LeaVerou"">@LeaVerou</a></h2>
<p><a href=""https://twitter.com/LeaVerou""><img src=""https://pbs.twimg.com/profile_images/584963092120899586/TxkxQ7Y5_200x200.png"" alt=""Lea Verou's Twitter"" /></a></p>
<p>Lea Verou is a good example of someone who dedicates their focus on a single aspect of the web and surfaces knowledge about things that you probably didn't know about. She typically writes about the intricacies of CSS and general web topics on her blog, but has also written numerous JavaScript libraries such as Prism.</p>
<h2><a href=""https://twitter.com/mpjme"">@mpjme</a></h2>
<p><a href=""https://twitter.com/mpjme""><img src=""https://pbs.twimg.com/profile_images/660955770020728832/TsCE6kM1_200x200.png"" alt=""Mattias P Johansson's Twitter"" /></a></p>
<p>I came across Mattias through his YouTube show, Fun Fun Function, which he tweets about whenever he releases a new video. I've quickly learned that not only does he have a lot of experience in the programming world, but he also has smart insights on typical discussions in this industry.</p>
<h2><a href=""https://twitter.com/googledevs"">@googledevs</a></h2>
<p><a href=""https://twitter.com/googledevs""><img src=""https://pbs.twimg.com/profile_images/756235654980308994/JLbEEloM_200x200.jpg"" alt=""Google Developers' Twitter"" /></a></p>
<p>Google is invested in the web, and that can be clearly seen from their presence in the community. You can find various things on their Google Developers account such as open source projects, new videos, and announcements of new APIs.</p>
<h2><a href=""https://twitter.com/smashingmag"">@smashingmag</a></h2>
<p><a href=""https://twitter.com/smashingmag""><img src=""https://pbs.twimg.com/profile_images/477218012194304000/ytI5hY2H_200x200.png"" alt=""Smashing Magazine's Twitter"" /></a></p>
<p>Smashing Magazine has consistently been a good source for tutorials, discussions, and news for developers. I'm always excited to see a new tweet about designing interfaces, development stacks, tools, or usability. They don't always tweet about articles on their own site either, I always find an interesting topic that's linked to a personal blog.</p>
<h2><a href=""https://twitter.com/RegexTip"">@RegexTip</a></h2>
<p><a href=""https://twitter.com/RegexTip""><img src=""https://pbs.twimg.com/profile_images/710922470107185153/aIwu3CoM_200x200.jpg"" alt=""Regular Expression's Twitter"" /></a></p>
<p>This is one account that I think every developer who has touched the unwieldy land of regular expressions should follow. Regex can be extremely useful for certain tasks, but understanding the syntax can forever to learn. With daily tweets, RegexTips can help you learn with simple tips.</p>
<h2>ShamelessPromotions</h2>
<p>And of course, we think you should follow us! There's our main <a href=""https://twitter.com/ninjalitydesign"">@ninjalitydesign</a> account where we can notify you of new articles or offer our development, design, and business insights. Also check out <a href=""https://twitter.com/getdevnews"">@getdevnews</a> which will be devoted towards developer news. Finally, I tweet about numerous things, sometimes about code, on <a href=""https://twitter.com/sunnysinghio"">@sunnysinghio</a>.</p>","For professionals, Twitter is used as a way of growing your network of like-minded people, or potentially going outside your comfort zone in hopes of learning a new skill. As a developer, I am always on the lookout for people who are way smarter than me that I'd love to learn from via their tweets, or sometimes just want to stay up to date on news. Here are some that I recommend.",twitter-accounts-to-follow-for-developers,General,sunny@ninjality.com,"2017-02-13 06:04:33","2017-02-13 06:05:08","2016-06-01 06:04:32"
28,"3 reasons Slack will make your team better","Slack has made our team by far a more cohesive unit for many reasons but in this article I want to cover the top 3. For preface, Slack is a communication platform that has recently sprung into a staple for most teams in any niche of the business world. Development teams, marketing teams, to even small businesses use Slack as their main communication platforms. Slack is also really popular in managing communication between remote teams, which is what we do at Ninjality. 

# Easy Access

Slack has many ways to access it with their Web App, Desktop Apps, and Mobile Apps. No matter where you are or what device you are on you can access Slack effortlessly. I personally find this to be one of my favorite features because you can ping someone on Slack and they are able to respond fast because they always have access to it. This is great if there is a pertinent issue at hand or if you’re wanting to check in on how a project is going. It is also nice because once you get a notification on your phone you can jump on the computer and be able to get started on whatever issue there is without skipping a beat. 

# Integrations

There are endless amount of integrations for Slack and new ones pop-up every single day. At Ninjality we use different integrations like Trello, Twitter, Bitbucket, and Laravel Forge. All these integrations give us instantaneous feedback on events that happen on those services. I personally find the Twitter and Bitbucket ones very helpful because you’re able to keep a close eye on what is happening on those services. I like to see when we get interactions on our Twitter accounts and then when we see those notifications we can discuss right then and there how we want to reply. For Bitbucket I can see when code is pushed so we can all stay on the same page for progress on whatever project we are working on. 

# Great Features

Slack’s features make the app dead simple. You can chat directly with a person, with a group of people, or in a channel. This helps to organize the entire team without having to see unneeded notifications about something you are not involved with. This also helps you be able to reference past conversations if there is something that you forgot at a later time. Another feature that is built into Slack that I love is the search functionality. This lets you search through any conversation for a specific message or file that you need. The search feature definitely helps me uncover lost files and other things that I may have missed. 

## In Conclusion

Without Slack, I don’t think Ninjality would be as cohesive of a team as we are today. All of these features make it not only easy for us to communicate but it also helps us keep on top of all of our other happenings across the web. The team at Slack are doing an amazing job and I cannot wait to see what they cook up next!","<p>Slack has made our team by far a more cohesive unit for many reasons but in this article I want to cover the top 3. For preface, Slack is a communication platform that has recently sprung into a staple for most teams in any niche of the business world. Development teams, marketing teams, to even small businesses use Slack as their main communication platforms. Slack is also really popular in managing communication between remote teams, which is what we do at Ninjality. </p>
<h1>Easy Access</h1>
<p>Slack has many ways to access it with their Web App, Desktop Apps, and Mobile Apps. No matter where you are or what device you are on you can access Slack effortlessly. I personally find this to be one of my favorite features because you can ping someone on Slack and they are able to respond fast because they always have access to it. This is great if there is a pertinent issue at hand or if you’re wanting to check in on how a project is going. It is also nice because once you get a notification on your phone you can jump on the computer and be able to get started on whatever issue there is without skipping a beat. </p>
<h1>Integrations</h1>
<p>There are endless amount of integrations for Slack and new ones pop-up every single day. At Ninjality we use different integrations like Trello, Twitter, Bitbucket, and Laravel Forge. All these integrations give us instantaneous feedback on events that happen on those services. I personally find the Twitter and Bitbucket ones very helpful because you’re able to keep a close eye on what is happening on those services. I like to see when we get interactions on our Twitter accounts and then when we see those notifications we can discuss right then and there how we want to reply. For Bitbucket I can see when code is pushed so we can all stay on the same page for progress on whatever project we are working on. </p>
<h1>Great Features</h1>
<p>Slack’s features make the app dead simple. You can chat directly with a person, with a group of people, or in a channel. This helps to organize the entire team without having to see unneeded notifications about something you are not involved with. This also helps you be able to reference past conversations if there is something that you forgot at a later time. Another feature that is built into Slack that I love is the search functionality. This lets you search through any conversation for a specific message or file that you need. The search feature definitely helps me uncover lost files and other things that I may have missed. </p>
<h2>In Conclusion</h2>
<p>Without Slack, I don’t think Ninjality would be as cohesive of a team as we are today. All of these features make it not only easy for us to communicate but it also helps us keep on top of all of our other happenings across the web. The team at Slack are doing an amazing job and I cannot wait to see what they cook up next!</p>","Slack has made our team by far a more cohesive unit for many reasons but in this article I want to cover the top 3. For preface, Slack is a communication platform that has recently sprung into a staple for most teams in any niche of the business world. Development teams, marketing teams, to even small businesses use Slack as their main communication platforms. Slack is also really popular in managing communication between remote teams, which is what we do at Ninjality.",3-reasons-slack-will-make-your-team-better,General,leon@ninjality.com,"2017-02-13 06:05:50","2017-02-13 06:05:50","2016-06-05 06:05:48"
29,"What is Content Marketing?","A marketing and advertising budget is a core part of each businesses budget. They have traditional advertising like buying ad space in a newspaper, on a billboard, or even on TV. There are also ways to advertise or market your product online with buying ads through Adsense, on Facebook or Twitter. There is also another more fresh way to market which is content marketing. Content marketing is the process in where you create content in the form of videos, articles, or another kind of video. The content relates to your business and helps your customers understand you're an expert in your field. 

For example, A Coffee shop could write about coffee beans, different types of coffee, or give them recommendations to try different things. These articles provide potential with information about coffee and will provide them with the understand you're passionate about coffee.  You could also create videos about the best coffee, how to make a cappuccino at home or how to ground your beans just right. While all of these aren’t going to bring customers directly in, it will create the mindset you guys know what you're talking about and when the customer wants coffee they’ll think about you. 

Content marketing is one of the best ways to market your business, and in the process gain more customers. You’re also providing content that’s informative and entertaining, which could help people understand something new. 

Explaining content marketing isn’t enough, though, in this feature, we’ll talk about who does content marketing, how it works, and if you should try it. 

# Who does content marketing

A lot of companies on the internet do content marketing, but this doesn’t mean it’s working for them or providing any value. The best explain of content marketing is from Buffer, which is a social media management tool. They often write about how to promote content on Twitter, what is social ads, or even how to use Instagram for your business. Buffer writes about:

* The 10 Golden Rules Successful Social Media Managers Live By

* 53 Design Terms Explained for Marketers

* Creating The Perfect Facebook Ad: 50 Examples To Help You Get it Right

* 37 People Doing Amazing Things in Marketing and Social Media

These are topics they’re knowledgeable in, and by writing about them, they’re not only sharing their knowledge but also showing they’re an authoritative figure in the social media industry. Buffer is known for the content they’re creating around social media, and when social media managers like about a social media management tool they think buffer first. There are other options like Hootsuite, KuKu, but they’re not on everyone’s mind because they’re not known as an expert right away. 

# Does Content Marketing Work?

Content marketing does work if done well, and with Buffer’s case, it’s become a core way they market and advertise on the internet. It’s been proven that customers are going to spend money with a brand they feel like they know and trust. Content marketing works best when you are advertising the content, and then customers will explore the site to understand what you do and how you do it. 

Now content marketing doesn’t work for every business, and my example of the coffee shop may not be the best way to advertise for them. They could better use location-based advertising, but they could supplement it with content to give them a voice that Starbucks or another coffee shop next door does not have. 

# Overall

Content marketing is a new way of customer acquisition, and always isn’t a cheap or realistic option. Easy ways to start is ask your team to contribute to the company blog with useful tutorials, tips, or insight they wish they had. If you don’t want to start with your employees you could reach out to bloggers for relevant content that’ll be syndicated onto your site. This requires little effort, no extra staff or even extra time away from current projects. 

If you’re a company using content marketing as a way to advertise we’d love to hear from you! We are working on building case studies and seeing how content marketing fixes a problem within the brand's community. Email me at Leon [at] slk.media so we can get a conversation going! 

Also, if you need branding, marketing, or content marketing consulting, we’re able to assist. Our team of Ninja’s have built brands with unique voices that are authentic and still helps acquire customers.","<p>A marketing and advertising budget is a core part of each businesses budget. They have traditional advertising like buying ad space in a newspaper, on a billboard, or even on TV. There are also ways to advertise or market your product online with buying ads through Adsense, on Facebook or Twitter. There is also another more fresh way to market which is content marketing. Content marketing is the process in where you create content in the form of videos, articles, or another kind of video. The content relates to your business and helps your customers understand you're an expert in your field. </p>
<p>For example, A Coffee shop could write about coffee beans, different types of coffee, or give them recommendations to try different things. These articles provide potential with information about coffee and will provide them with the understand you're passionate about coffee.  You could also create videos about the best coffee, how to make a cappuccino at home or how to ground your beans just right. While all of these aren’t going to bring customers directly in, it will create the mindset you guys know what you're talking about and when the customer wants coffee they’ll think about you. </p>
<p>Content marketing is one of the best ways to market your business, and in the process gain more customers. You’re also providing content that’s informative and entertaining, which could help people understand something new. </p>
<p>Explaining content marketing isn’t enough, though, in this feature, we’ll talk about who does content marketing, how it works, and if you should try it. </p>
<h1>Who does content marketing</h1>
<p>A lot of companies on the internet do content marketing, but this doesn’t mean it’s working for them or providing any value. The best explain of content marketing is from Buffer, which is a social media management tool. They often write about how to promote content on Twitter, what is social ads, or even how to use Instagram for your business. Buffer writes about:</p>
<ul>
<li>
<p>The 10 Golden Rules Successful Social Media Managers Live By</p>
</li>
<li>
<p>53 Design Terms Explained for Marketers</p>
</li>
<li>
<p>Creating The Perfect Facebook Ad: 50 Examples To Help You Get it Right</p>
</li>
<li>37 People Doing Amazing Things in Marketing and Social Media</li>
</ul>
<p>These are topics they’re knowledgeable in, and by writing about them, they’re not only sharing their knowledge but also showing they’re an authoritative figure in the social media industry. Buffer is known for the content they’re creating around social media, and when social media managers like about a social media management tool they think buffer first. There are other options like Hootsuite, KuKu, but they’re not on everyone’s mind because they’re not known as an expert right away. </p>
<h1>Does Content Marketing Work?</h1>
<p>Content marketing does work if done well, and with Buffer’s case, it’s become a core way they market and advertise on the internet. It’s been proven that customers are going to spend money with a brand they feel like they know and trust. Content marketing works best when you are advertising the content, and then customers will explore the site to understand what you do and how you do it. </p>
<p>Now content marketing doesn’t work for every business, and my example of the coffee shop may not be the best way to advertise for them. They could better use location-based advertising, but they could supplement it with content to give them a voice that Starbucks or another coffee shop next door does not have. </p>
<h1>Overall</h1>
<p>Content marketing is a new way of customer acquisition, and always isn’t a cheap or realistic option. Easy ways to start is ask your team to contribute to the company blog with useful tutorials, tips, or insight they wish they had. If you don’t want to start with your employees you could reach out to bloggers for relevant content that’ll be syndicated onto your site. This requires little effort, no extra staff or even extra time away from current projects. </p>
<p>If you’re a company using content marketing as a way to advertise we’d love to hear from you! We are working on building case studies and seeing how content marketing fixes a problem within the brand's community. Email me at Leon [at] slk.media so we can get a conversation going! </p>
<p>Also, if you need branding, marketing, or content marketing consulting, we’re able to assist. Our team of Ninja’s have built brands with unique voices that are authentic and still helps acquire customers.</p>","A marketing and advertising budget is a core part of each businesses budget. They have traditional advertising like buying ad space in a newspaper, on a billboard, or even on TV. There are also ways to advertise or market your product online with buying ads through Adsense, on Facebook or Twitter. There is also another more fresh way to market which is content marketing. Content marketing is the process in where you create content in the form of videos, articles, or another kind of video. The content relates to your business and helps your customers understand you're an expert in your field.",what-is-content-marketing,General,leon@ninjality.com,"2017-02-13 06:06:29","2017-02-13 06:06:29","2016-06-07 06:06:29"
30,"Let's Learn React Together: Part 3 - Props","In the [second part](https://ninjality.com/blog/lets-learn-react-together-part-2) of this series, we got into writing actual React code. At this point, you are (hopefully) familiar with JSX, setting up an environment with [Enclave](http://enclave.js.org/), creating new components, and rendering your app. In this part, let's expand our knowledge of components with props.

## Props & PropTypes

So far I've only discussed state since that is the primary way in which React components work. However, the other great thing about components is that they're shareable or reusable within your entire application. If you remember, we created a simple button component:

	var React = require('react');
	
	var Button = React.createClass({
	
	    getInitialState: function () {
	        return {
	            text: 'Click Me!'
	        };
	    },
	
	    handleClick: function () {
	        this.setState({ text: 'Clicked!' });
	    },
	
	    render: function () {
	        return (
	            <button onClick={this.handleClick}>{this.state.text}</button>
	        );
	    }
	
	});
	
	module.exports = Button;

And then included it within the app:

	var React = require('react');
	var Button = require('./Button');
	
	var App = React.createClass({
	
	    render: function () {
	
	        return (
	            <div>
	                <h1>Hello!</h1>
	                <Button />
	            </div>
	        )
	
	    }
	
	});
	
	module.exports = App;

But what if we want a slightly different button? Maybe we want to pass the initial and clicked values for the text, or change the way that it looks. Instead of creating an entirely new component, let's update this one to use props instead. First, if you haven't already, run `npm run enclave-serve` and open `localhost:8080` in your browser. If you a need a copy of the code from part 2, it is [available in this repo](https://github.com/ninjality/react-tutorial/tree/part-2). Within the `src/components/App.js` file, update the `<Button />`:
	
	var React = require('react');
	var Button = require('./Button');
	
	var App = React.createClass({
	
	    render: function () {
	
	        return (
	            <div>
	                <h1>Hello!</h1>
	                {/* Let's add some props to Button: */}
	                <Button
	                    initialText=""Tap Here""
	                    clickedText=""Tapped!""
	                    style={{
	                        color: 'blue',
	                    }}
	                />
	            </div>
	        )
	
	    }
	
	});
	
	module.exports = App;

I've introduced a few new concepts here:

1. First, you can see that there's a comment within the JSX. It looks a little weird because you can't simply do HTML comments like `<!-- -->`, but you notice that you can do JS comments by wrapping with curly braces. This is because anything in curly braces is treated as JS so we can use `/* */`.
2. Next, notice the ""custom attributes"" that were added to the Button component. In JSX, these are known as properties or props, and can be named anything you want. In this case, I've tried to make it clear that I'm passing in the initial text for the button, the text we want it changed to when clicked, and also some CSS styling to make the button blue.
3. Once again, JSX makes us do inline styles a little different where instead of passing a CSS string, we have to pass a JS object. You can check out the [React docs regarding inline styles](https://facebook.github.io/react/tips/inline-styles.html).

Now, the Button component needs to do something with these props. Similarly to state, you can access default props via `this.props` so let's update the `src/components/Button.js` file like so:

	var React = require('react');
	
	var Button = React.createClass({
	
	    getInitialState: function () {
	        return {
	            clicked: false
	        };
	    },
	
	    handleClick: function () {
	        this.setState({ clicked: true });
	    },
	
	    render: function () {
	        return (
	            <button onClick={this.handleClick} style={this.props.style}>
	                {this.state.clicked ? this.props.clickedText : this.props.initialText}
	            </button>
	        );
	    }
	
	});
	
	module.exports = Button;

A few big changes happened here. First, I changed `this.state.text` to `this.state.clicked`. Since the text is getting passed in via props, we don't want to manage what the actual text will be to display. Instead, the component should simply known when it was clicked to figure out which prop to display. There are other ways to do this of course, but keep in mind that if you're thinking about passing in the prop to the state, then you're falling into [anti-pattern territory](https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html). Basically, use state as a ""source of truth"", and props as a way to change how the component renders.

So now you're probably wondering what happens when no props are passed to the Button component. If you try it, you'll see that there's no error, but instead an empty button. Is there a way to let other developers know (or simply reminding yourself) that this component requires a specific set of props? Sure! They are known as PropTypes. Above `getInitialState`, add this:

    propTypes: {
        initialText: React.PropTypes.string.isRequired,
        clickedText: React.PropTypes.string.isRequired,
        style: React.PropTypes.object
    },

In this case, we are specifying that initialText and clickedText are required strings. Style is optional, but must be an object if it is provided. Now, when these set of validations don't match, you'll get a console error letting you know that you're missing a prop or did not provide the right type for it.

But what if initialText and clickedText should be optional, and we want to provide defaults? This is done with `getDefaultProps` like so:

    getDefaultProps: function() {
        return {
            initialText: 'Click Me!',
            clickedText: 'Clicked!',
            style: {
                color: '#fff',
                background: '#333'
            }
        };
    },

So now, let's add another button to the App component but this time with no props passed to it:

	var React = require('react');
	var Button = require('./Button');
	
	var App = React.createClass({
	
	    render: function () {
	
	        return (
	            <div>
	                <h1>Hello!</h1>
	                {/* Let's add some props to Button: */}
	                <Button
	                    initialText=""Tap Here""
	                    clickedText=""Tapped!""
	                    style={{
	                        color: 'blue',
	                    }}
	                />
	
	                {/* This is a default Button: */}
	                <Button />
	            </div>
	        )
	
	    }
	
	});
	
	module.exports = App;

Now you should see two different buttons, even though both are actually the same component. This is a simple yet powerful concept of components because it organizes the UI of a large app into a manageable pieces of code. We've now expanded our repetoire of components and in the next part I will explain the lifecycle methods of components. As always, the source code for this part is [available on GitHub](https://github.com/ninjality/react-tutorial/tree/part-3).

[Go to Part 4 to learn about lifecycle methods!](https://ninjality.com/blog/lets-learn-react-together-part-4)","<p>In the <a href=""https://ninjality.com/blog/lets-learn-react-together-part-2"">second part</a> of this series, we got into writing actual React code. At this point, you are (hopefully) familiar with JSX, setting up an environment with <a href=""http://enclave.js.org/"">Enclave</a>, creating new components, and rendering your app. In this part, let's expand our knowledge of components with props.</p>
<h2>Props &amp; PropTypes</h2>
<p>So far I've only discussed state since that is the primary way in which React components work. However, the other great thing about components is that they're shareable or reusable within your entire application. If you remember, we created a simple button component:</p>
<pre><code>var React = require('react');

var Button = React.createClass({

    getInitialState: function () {
        return {
            text: 'Click Me!'
        };
    },

    handleClick: function () {
        this.setState({ text: 'Clicked!' });
    },

    render: function () {
        return (
            &lt;button onClick={this.handleClick}&gt;{this.state.text}&lt;/button&gt;
        );
    }

});

module.exports = Button;</code></pre>
<p>And then included it within the app:</p>
<pre><code>var React = require('react');
var Button = require('./Button');

var App = React.createClass({

    render: function () {

        return (
            &lt;div&gt;
                &lt;h1&gt;Hello!&lt;/h1&gt;
                &lt;Button /&gt;
            &lt;/div&gt;
        )

    }

});

module.exports = App;</code></pre>
<p>But what if we want a slightly different button? Maybe we want to pass the initial and clicked values for the text, or change the way that it looks. Instead of creating an entirely new component, let's update this one to use props instead. First, if you haven't already, run <code>npm run enclave-serve</code> and open <code>localhost:8080</code> in your browser. If you a need a copy of the code from part 2, it is <a href=""https://github.com/ninjality/react-tutorial/tree/part-2"">available in this repo</a>. Within the <code>src/components/App.js</code> file, update the <code>&lt;Button /&gt;</code>:</p>
<pre><code>var React = require('react');
var Button = require('./Button');

var App = React.createClass({

    render: function () {

        return (
            &lt;div&gt;
                &lt;h1&gt;Hello!&lt;/h1&gt;
                {/* Let's add some props to Button: */}
                &lt;Button
                    initialText=""Tap Here""
                    clickedText=""Tapped!""
                    style={{
                        color: 'blue',
                    }}
                /&gt;
            &lt;/div&gt;
        )

    }

});

module.exports = App;</code></pre>
<p>I've introduced a few new concepts here:</p>
<ol>
<li>First, you can see that there's a comment within the JSX. It looks a little weird because you can't simply do HTML comments like <code>&lt;!-- --&gt;</code>, but you notice that you can do JS comments by wrapping with curly braces. This is because anything in curly braces is treated as JS so we can use <code>/* */</code>.</li>
<li>Next, notice the &quot;custom attributes&quot; that were added to the Button component. In JSX, these are known as properties or props, and can be named anything you want. In this case, I've tried to make it clear that I'm passing in the initial text for the button, the text we want it changed to when clicked, and also some CSS styling to make the button blue.</li>
<li>Once again, JSX makes us do inline styles a little different where instead of passing a CSS string, we have to pass a JS object. You can check out the <a href=""https://facebook.github.io/react/tips/inline-styles.html"">React docs regarding inline styles</a>.</li>
</ol>
<p>Now, the Button component needs to do something with these props. Similarly to state, you can access default props via <code>this.props</code> so let's update the <code>src/components/Button.js</code> file like so:</p>
<pre><code>var React = require('react');

var Button = React.createClass({

    getInitialState: function () {
        return {
            clicked: false
        };
    },

    handleClick: function () {
        this.setState({ clicked: true });
    },

    render: function () {
        return (
            &lt;button onClick={this.handleClick} style={this.props.style}&gt;
                {this.state.clicked ? this.props.clickedText : this.props.initialText}
            &lt;/button&gt;
        );
    }

});

module.exports = Button;</code></pre>
<p>A few big changes happened here. First, I changed <code>this.state.text</code> to <code>this.state.clicked</code>. Since the text is getting passed in via props, we don't want to manage what the actual text will be to display. Instead, the component should simply known when it was clicked to figure out which prop to display. There are other ways to do this of course, but keep in mind that if you're thinking about passing in the prop to the state, then you're falling into <a href=""https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html"">anti-pattern territory</a>. Basically, use state as a &quot;source of truth&quot;, and props as a way to change how the component renders.</p>
<p>So now you're probably wondering what happens when no props are passed to the Button component. If you try it, you'll see that there's no error, but instead an empty button. Is there a way to let other developers know (or simply reminding yourself) that this component requires a specific set of props? Sure! They are known as PropTypes. Above <code>getInitialState</code>, add this:</p>
<pre><code>propTypes: {
    initialText: React.PropTypes.string.isRequired,
    clickedText: React.PropTypes.string.isRequired,
    style: React.PropTypes.object
},</code></pre>
<p>In this case, we are specifying that initialText and clickedText are required strings. Style is optional, but must be an object if it is provided. Now, when these set of validations don't match, you'll get a console error letting you know that you're missing a prop or did not provide the right type for it.</p>
<p>But what if initialText and clickedText should be optional, and we want to provide defaults? This is done with <code>getDefaultProps</code> like so:</p>
<pre><code>getDefaultProps: function() {
    return {
        initialText: 'Click Me!',
        clickedText: 'Clicked!',
        style: {
            color: '#fff',
            background: '#333'
        }
    };
},</code></pre>
<p>So now, let's add another button to the App component but this time with no props passed to it:</p>
<pre><code>var React = require('react');
var Button = require('./Button');

var App = React.createClass({

    render: function () {

        return (
            &lt;div&gt;
                &lt;h1&gt;Hello!&lt;/h1&gt;
                {/* Let's add some props to Button: */}
                &lt;Button
                    initialText=""Tap Here""
                    clickedText=""Tapped!""
                    style={{
                        color: 'blue',
                    }}
                /&gt;

                {/* This is a default Button: */}
                &lt;Button /&gt;
            &lt;/div&gt;
        )

    }

});

module.exports = App;</code></pre>
<p>Now you should see two different buttons, even though both are actually the same component. This is a simple yet powerful concept of components because it organizes the UI of a large app into a manageable pieces of code. We've now expanded our repetoire of components and in the next part I will explain the lifecycle methods of components. As always, the source code for this part is <a href=""https://github.com/ninjality/react-tutorial/tree/part-3"">available on GitHub</a>.</p>
<p><a href=""https://ninjality.com/blog/lets-learn-react-together-part-4"">Go to Part 4 to learn about lifecycle methods!</a></p>","In the second part of this series, we got into writing actual React code. At this point, you are (hopefully) familiar with JSX, setting up an environment with Enclave, creating new components, and rendering your app. In this part, let's expand our knowledge of components with props.",lets-learn-react-together-part-3,Tutorials|Coding,sunny@ninjality.com,"2017-02-13 06:07:42","2017-02-13 06:07:47","2016-06-17 06:07:40"
31,"Getting started with your own podcast","The [Serial Podcast](https://serialpodcast.org) created the conversation how podcasting would become the new online radio. While podcasting isn’t a new technology, in fact, it’s been around for decades, it’s only become popular in the past year or two. Now every business, blog, and person are hosting a podcast. Why, though? There are hundreds of podcasts already out there, and new ones are popping up daily. I have a hard time keeping up with my subscriptions now, and an even hard time justifying subscribing to new podcasts.  

This doesn’t mean you cannot start your podcast now! I’ve seen a few podcasts catch my eye over the past weeks, and while it’s harder to get my attention. It’s getting easier to grab the attention of ordinary folks who are just starting to understand what a podcast is. They might see the podcast app on their iPhone screen, but more often than not they hide the app away in a junk folder or leave it on an unused screen. Now, however, more people are talking about what a podcast is. There are NBA, NFL, movie stars, and news anchors starting their podcasts to talk more about what they love from movies to very niche topics like collecting coins. Either Way your personal brand or business could use a podcast! I like to call today’s podcast the business cards of 2016. Instead of pointing potential customers or clients to your social sites or website, you’ll tell them about your podcast. 

# What type of podcast?

There are different styles of podcasts out there. It’s like a genre for books that are either nonfiction or fiction. Each type of podcast appeals to various kinds of listeners, but it also depends on the budget and amount of time you want to invest. Either podcast type will work, but each one serves a different purpose. 

These are the two types of podcasts:

### Conversation

There is a discussion podcast where you and a few guest have a conversation around different topics. This is easy to edit and is easy to plan. All you have to do is gather up the gear, find a few guest and you’re ready to go. 

These conversations are frequently moving towards talking about some current event in your industry, telling a story about your work or business or bringing your listeners behind the scenes during a meeting or conversation with a partner. A great resource for finding guests is [Podcast Guest](http://www.podcastguests.com) which lets you post your podcast on the weekly newsletter to find a guest, and alternatively, you can guest on podcasts to grow yours that you're starting.

### Storyline

Think a highly produced NPR This is the American Life radio show when you think about these podcasts. They take a lot of editing, tell a story, and feel super professional. Gimlet Media has taken to producing some of these, and they’ve had a huge success. However, they take a lot of editing, production, and time. This means large budgets and a lot of staff to write and edit these. 

They’ll tell the story of your company, about a customer, or about yourself. They’re great if you have a little extra time, or audio production is something you're passionate and talented at. 

# What Gear do I need?

Getting started with podcasting doesn’t mean a bunch of expensive gear or software. In fact, you can get started with $50 and upgrade as your podcast becomes more popular. The go to mic everyone uses is the [Snowball](https://www.amazon.com/Blue-Microphones-Snowball-Condenser-Microphone/dp/B006DIA77E/ref=sr_1_1?ie=UTF8&qid=1468899896&sr=8-1&keywords=snowball) microphone, which is only $49 on Amazon. There are better mics but for the price the Snowball is one of the best, and if you're unsure of starting out the $50 price won’t set you back that far. 

The software to use is Audacity, which is a free and open source piece of software that’s perfect for recording audio. While it’s not as powerful as Audition or GarageBand, it’s going to do the trick if you're starting out and learning how to edit your podcast. There are other options and services like [We Edit Podcasts](https://www.weeditpodcasts.com).

# Where do I host a podcast?

Hosting a podcast isn’t always easy, but using Soundcloud as the go-to place for your podcast is one of the best options. It’s inexpensive, and anyone can listen to it on the web, on iTunes or Google play. While hosting a service like SoundCloud isn't appealing to any person who likes to control their content, it allows you to see analytics and not worry about if your podcast is up. You can use WordPress and hosts the podcasts on there through a plugin, but that’s more trouble when SoundCloud already has a network of creators and listeners already built in on top of iTunes and Google Play. 

# Overall

Podcasts are undeniably hot right now, and with them being relatively easy to produce they’re great ways to market yourself on the internet. They’re also amazing means to bring customers, clients, and friends behind the scenes or start a conversation that you’ve wanted to have. 

I host a different podcast about technology and internet culture, but I also guest on various podcasts to not only grow my network but also to have fun conversations with friends and colleges in my field.","<p>The <a href=""https://serialpodcast.org"">Serial Podcast</a> created the conversation how podcasting would become the new online radio. While podcasting isn’t a new technology, in fact, it’s been around for decades, it’s only become popular in the past year or two. Now every business, blog, and person are hosting a podcast. Why, though? There are hundreds of podcasts already out there, and new ones are popping up daily. I have a hard time keeping up with my subscriptions now, and an even hard time justifying subscribing to new podcasts.  </p>
<p>This doesn’t mean you cannot start your podcast now! I’ve seen a few podcasts catch my eye over the past weeks, and while it’s harder to get my attention. It’s getting easier to grab the attention of ordinary folks who are just starting to understand what a podcast is. They might see the podcast app on their iPhone screen, but more often than not they hide the app away in a junk folder or leave it on an unused screen. Now, however, more people are talking about what a podcast is. There are NBA, NFL, movie stars, and news anchors starting their podcasts to talk more about what they love from movies to very niche topics like collecting coins. Either Way your personal brand or business could use a podcast! I like to call today’s podcast the business cards of 2016. Instead of pointing potential customers or clients to your social sites or website, you’ll tell them about your podcast. </p>
<h1>What type of podcast?</h1>
<p>There are different styles of podcasts out there. It’s like a genre for books that are either nonfiction or fiction. Each type of podcast appeals to various kinds of listeners, but it also depends on the budget and amount of time you want to invest. Either podcast type will work, but each one serves a different purpose. </p>
<p>These are the two types of podcasts:</p>
<h3>Conversation</h3>
<p>There is a discussion podcast where you and a few guest have a conversation around different topics. This is easy to edit and is easy to plan. All you have to do is gather up the gear, find a few guest and you’re ready to go. </p>
<p>These conversations are frequently moving towards talking about some current event in your industry, telling a story about your work or business or bringing your listeners behind the scenes during a meeting or conversation with a partner. A great resource for finding guests is <a href=""http://www.podcastguests.com"">Podcast Guest</a> which lets you post your podcast on the weekly newsletter to find a guest, and alternatively, you can guest on podcasts to grow yours that you're starting.</p>
<h3>Storyline</h3>
<p>Think a highly produced NPR This is the American Life radio show when you think about these podcasts. They take a lot of editing, tell a story, and feel super professional. Gimlet Media has taken to producing some of these, and they’ve had a huge success. However, they take a lot of editing, production, and time. This means large budgets and a lot of staff to write and edit these. </p>
<p>They’ll tell the story of your company, about a customer, or about yourself. They’re great if you have a little extra time, or audio production is something you're passionate and talented at. </p>
<h1>What Gear do I need?</h1>
<p>Getting started with podcasting doesn’t mean a bunch of expensive gear or software. In fact, you can get started with $50 and upgrade as your podcast becomes more popular. The go to mic everyone uses is the <a href=""https://www.amazon.com/Blue-Microphones-Snowball-Condenser-Microphone/dp/B006DIA77E/ref=sr_1_1?ie=UTF8&amp;qid=1468899896&amp;sr=8-1&amp;keywords=snowball"">Snowball</a> microphone, which is only $49 on Amazon. There are better mics but for the price the Snowball is one of the best, and if you're unsure of starting out the $50 price won’t set you back that far. </p>
<p>The software to use is Audacity, which is a free and open source piece of software that’s perfect for recording audio. While it’s not as powerful as Audition or GarageBand, it’s going to do the trick if you're starting out and learning how to edit your podcast. There are other options and services like <a href=""https://www.weeditpodcasts.com"">We Edit Podcasts</a>.</p>
<h1>Where do I host a podcast?</h1>
<p>Hosting a podcast isn’t always easy, but using Soundcloud as the go-to place for your podcast is one of the best options. It’s inexpensive, and anyone can listen to it on the web, on iTunes or Google play. While hosting a service like SoundCloud isn't appealing to any person who likes to control their content, it allows you to see analytics and not worry about if your podcast is up. You can use WordPress and hosts the podcasts on there through a plugin, but that’s more trouble when SoundCloud already has a network of creators and listeners already built in on top of iTunes and Google Play. </p>
<h1>Overall</h1>
<p>Podcasts are undeniably hot right now, and with them being relatively easy to produce they’re great ways to market yourself on the internet. They’re also amazing means to bring customers, clients, and friends behind the scenes or start a conversation that you’ve wanted to have. </p>
<p>I host a different podcast about technology and internet culture, but I also guest on various podcasts to not only grow my network but also to have fun conversations with friends and colleges in my field.</p>","The Serial Podcast created the conversation how podcasting would become the new online radio. While podcasting isn’t a new technology, in fact, it’s been around for decades, it’s only become popular in the past year or two. Now every business, blog, and person are hosting a podcast. Why, though? There are hundreds of podcasts already out there, and new ones are popping up daily. I have a hard time keeping up with my subscriptions now, and an even hard time justifying subscribing to new podcasts.",getting-started-with-your-own-podcast,General,leon@ninjality.com,"2017-02-13 06:08:52","2017-02-13 06:08:52","2016-07-19 06:08:50"
32,"Let's Learn React Together: Part 4 - Lifecycle Methods","In the [third part](https://ninjality.com/blog/lets-learn-react-together-part-3) of this series, we learned about props and PropTypes in React. I now want to get into the last fundamental concept of React and that is lifecycle methods. We technically already have used one of these methods, `getInitialState`, but there are many others that you can use to build useful components.

## Lifecycle of a React Component

Every component goes through a lifecycle when it gets rendered. This simply means that a component is initially mounted, potentially updated, and finally unmounted. This is easier to understand with a visual, so check out this awesome diagram by Eduardo Bouças:

<p data-height=""551"" data-theme-id=""0"" data-slug-hash=""ONNJWE"" data-default-tab=""result"" data-user=""tgoyer"" data-embed-version=""2"" class=""codepen"">See the Pen <a href=""https://codepen.io/tgoyer/pen/ONNJWE/"">React components lifecycle diagram</a> by Tim Goyer (<a href=""http://codepen.io/tgoyer"">@tgoyer</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
<script async src=""//assets.codepen.io/assets/embed/ei.js""></script>

The useful aspect of this is being able to hook into any of these lifecycle methods, and provide extra functionality to the component. An extremely common method that is used is `componentDidMount`, which is called as soon as the component is rendered. A use case would be to display a loading indicator while fetching data from an Ajax request.

## The Code

Let's create a new component that does exactly this by fetching the user's IP address via the [ipinfo.io API](http://ipinfo.io/developers). First, if you're following along, make sure that you have the code from part 3 by cloning the [GitHub repository](https://github.com/ninjality/react-tutorial/tree/part-3). In the `src/components` folder, create an `IPAddress.js` file:

	var React = require('react');
	
	var IPAddress = React.createClass({
	
	    getInitialState: function () {
	        return {
	            ip: null
	        };
	    },
	
	    componentDidMount: function () {
	      // Fetch data and update state here...
	    },
	
	    render: function () {
	        if (this.state.ip === null) {
	          return (
	            <div>Fetching IP address...</div>
	          );
	        }
	      
	        return (
	          <div>Your IP Address is {this.state.ip}.</div>
	        );
	    }
	
	});
	
	module.exports = IPAddress;


It doesn't really do anything yet because the majority of the functionality will be in the `componentDidMount` method. Notice how initialState has an `ip` property where the user's IP address will be stored. In the render method, we're able to check if the IP is null to show a loading message. Otherwise, it will display the user's IP address.

We're ready to add code to the `componentDidMount` method. Let's add the following:

    componentDidMount: function () {
        var headers = new Headers();
        headers.append('Accept', 'application/json');

        fetch('http://ipinfo.io', {headers: headers})
        .then(function(response) {
            return response.json();
        }).then(function(json) {
            this.setState({ip: json.ip});
        }.bind(this));
    },

I am using the new [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) here for a simple Ajax request, but keep in mind that browser support is still spotty for Fetch so make sure to load a polyfill in a real world scenario. Anyway, all that this method is doing is fetching data from ipinfo.io and when it receives the data, `this.setState()` is used to store the IP address.

This component is now ready, so let's add it to to `src/components/App.js`:

	var React = require('react');
	var Button = require('./Button');
	var IPAddress = require('./IPAddress');
	
	var App = React.createClass({
	
	    render: function () {
	
	        return (
	            <div>
	                <h1>Hello!</h1>
	                {/* Let's add some props to Button: */}
	                <Button
	                    initialText=""Tap Here""
	                    clickedText=""Tapped!""
	                    style={{
	                        color: 'blue',
	                    }}
	                />
	
	                {/* This is a default Button: */}
	                <Button />
	
	                {/* This fetches user's IP and displays it: */}
	                <IPAddress />
	            </div>
	        )
	
	    }
	
	});
	
	module.exports = App;

Now run `npm run enclave-serve` and open `http://localhost:8080/` in your browser. Your IP address should now be displayed after a few moments. Sweet, huh?

I only showed one new lifecycle methods here, but as you start to build bigger apps you will notice a need for other methods. For example, it may be useful to abort an Ajax request or to clear out data when a component is unmounted, so `componentWillUnmount` comes in handy there. The other methods are less often used but can be referred to in the [React docs](https://facebook.github.io/react/docs/component-specs.html).

## Closing

That's it for this tutorial, and is the second to last one in this series. As always, you can get the code used in this part [on GitHub](https://github.com/ninjality/react-tutorial/tree/part-4). In the next part, I will close things off with some suggestions on what you can learn next, and other libraries to take a look at within the React ecosystem.

[Go to Part 5 to find out what to learn next!](https://ninjality.com/blog/lets-learn-react-together-part-5)","<p>In the <a href=""https://ninjality.com/blog/lets-learn-react-together-part-3"">third part</a> of this series, we learned about props and PropTypes in React. I now want to get into the last fundamental concept of React and that is lifecycle methods. We technically already have used one of these methods, <code>getInitialState</code>, but there are many others that you can use to build useful components.</p>
<h2>Lifecycle of a React Component</h2>
<p>Every component goes through a lifecycle when it gets rendered. This simply means that a component is initially mounted, potentially updated, and finally unmounted. This is easier to understand with a visual, so check out this awesome diagram by Eduardo Bouças:</p>
<p data-height=""551"" data-theme-id=""0"" data-slug-hash=""ONNJWE"" data-default-tab=""result"" data-user=""tgoyer"" data-embed-version=""2"" class=""codepen"">See the Pen <a href=""https://codepen.io/tgoyer/pen/ONNJWE/"">React components lifecycle diagram</a> by Tim Goyer (<a href=""http://codepen.io/tgoyer"">@tgoyer</a>) on <a href=""http://codepen.io"">CodePen</a>.</p>
<script async src=""//assets.codepen.io/assets/embed/ei.js""></script>
<p>The useful aspect of this is being able to hook into any of these lifecycle methods, and provide extra functionality to the component. An extremely common method that is used is <code>componentDidMount</code>, which is called as soon as the component is rendered. A use case would be to display a loading indicator while fetching data from an Ajax request.</p>
<h2>The Code</h2>
<p>Let's create a new component that does exactly this by fetching the user's IP address via the <a href=""http://ipinfo.io/developers"">ipinfo.io API</a>. First, if you're following along, make sure that you have the code from part 3 by cloning the <a href=""https://github.com/ninjality/react-tutorial/tree/part-3"">GitHub repository</a>. In the <code>src/components</code> folder, create an <code>IPAddress.js</code> file:</p>
<pre><code>var React = require('react');

var IPAddress = React.createClass({

    getInitialState: function () {
        return {
            ip: null
        };
    },

    componentDidMount: function () {
      // Fetch data and update state here...
    },

    render: function () {
        if (this.state.ip === null) {
          return (
            &lt;div&gt;Fetching IP address...&lt;/div&gt;
          );
        }

        return (
          &lt;div&gt;Your IP Address is {this.state.ip}.&lt;/div&gt;
        );
    }

});

module.exports = IPAddress;</code></pre>
<p>It doesn't really do anything yet because the majority of the functionality will be in the <code>componentDidMount</code> method. Notice how initialState has an <code>ip</code> property where the user's IP address will be stored. In the render method, we're able to check if the IP is null to show a loading message. Otherwise, it will display the user's IP address.</p>
<p>We're ready to add code to the <code>componentDidMount</code> method. Let's add the following:</p>
<pre><code>componentDidMount: function () {
    var headers = new Headers();
    headers.append('Accept', 'application/json');

    fetch('http://ipinfo.io', {headers: headers})
    .then(function(response) {
        return response.json();
    }).then(function(json) {
        this.setState({ip: json.ip});
    }.bind(this));
},</code></pre>
<p>I am using the new <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"">Fetch API</a> here for a simple Ajax request, but keep in mind that browser support is still spotty for Fetch so make sure to load a polyfill in a real world scenario. Anyway, all that this method is doing is fetching data from ipinfo.io and when it receives the data, <code>this.setState()</code> is used to store the IP address.</p>
<p>This component is now ready, so let's add it to to <code>src/components/App.js</code>:</p>
<pre><code>var React = require('react');
var Button = require('./Button');
var IPAddress = require('./IPAddress');

var App = React.createClass({

    render: function () {

        return (
            &lt;div&gt;
                &lt;h1&gt;Hello!&lt;/h1&gt;
                {/* Let's add some props to Button: */}
                &lt;Button
                    initialText=""Tap Here""
                    clickedText=""Tapped!""
                    style={{
                        color: 'blue',
                    }}
                /&gt;

                {/* This is a default Button: */}
                &lt;Button /&gt;

                {/* This fetches user's IP and displays it: */}
                &lt;IPAddress /&gt;
            &lt;/div&gt;
        )

    }

});

module.exports = App;</code></pre>
<p>Now run <code>npm run enclave-serve</code> and open <code>http://localhost:8080/</code> in your browser. Your IP address should now be displayed after a few moments. Sweet, huh?</p>
<p>I only showed one new lifecycle methods here, but as you start to build bigger apps you will notice a need for other methods. For example, it may be useful to abort an Ajax request or to clear out data when a component is unmounted, so <code>componentWillUnmount</code> comes in handy there. The other methods are less often used but can be referred to in the <a href=""https://facebook.github.io/react/docs/component-specs.html"">React docs</a>.</p>
<h2>Closing</h2>
<p>That's it for this tutorial, and is the second to last one in this series. As always, you can get the code used in this part <a href=""https://github.com/ninjality/react-tutorial/tree/part-4"">on GitHub</a>. In the next part, I will close things off with some suggestions on what you can learn next, and other libraries to take a look at within the React ecosystem.</p>
<p><a href=""https://ninjality.com/blog/lets-learn-react-together-part-5"">Go to Part 5 to find out what to learn next!</a></p>","In the third part of this series, we learned about props and PropTypes in React. I now want to get into the last fundamental concept of React and that is lifecycle methods. We technically already have used one of these methods, getInitialState, but there are many others that you can use to build useful components.",lets-learn-react-together-part-4,Tutorials|Coding,sunny@ninjality.com,"2017-02-13 06:09:38","2017-02-13 06:09:38","2016-08-02 06:09:37"
33,"Let's Learn React Together: Part 5 - Future Learning","In the [fourth part](https://ninjality.com/blog/lets-learn-react-together-part-4) of this series, we learned about the last fundamental concept that is known as lifecycle methods. I want to close things off by discussing various other concepts and tools that are useful in advancing our knowledge in the React ecosystem.

## JavaScript (ES2015/ES6)

As we saw, React is mainly JavaScript. There are some things to learn/remember such as JSX, state, and method names, but the rest is just going to be utilizing the power of JavaScript. In particular, I've been slowly learning [ES2015](https://babeljs.io/docs/learn-es2015/) which is the next standard version that browsers are adopting. It provides a lot of nice new features that make coding so much faster, such as destructuring, for of loops, maps, and promises. I highly recommend you start transitioning over to writing ES2015 code, but wherever it makes sense to do.

## Build Tools

I kept build tools such as [Webpack](http://webpack.github.io/) out of the scope of this tutorial series to simplify things and keep the learning focused on React. You still don't have to worry about build tools thanks to the [create-react-app](https://github.com/facebookincubator/create-react-app) CLI tool and boilerplates, but keep in mind that learning Webpack reaps huge benefits such as being able to customize and add in anything that you want to your build process.

## Flux Libraries

We learned how to fetch and display data in a React component, but since React is focused on just the view/UI layer, this can get messy really fast. For large applications, you'll want a Flux-inspired library such as [Redux](http://redux.js.org/). All that Redux does is create a central store where data will be added and manipulated, and I highly recommend Wes Bos' video series [Learn Redux](https://learnredux.com/).

## URL Routing

In a real web app, you'll probably want multiple pages and URLs. This is where [React Router](https://github.com/reactjs/react-router) comes in to allow mapping certain URLs to components. This allows you to create a typical SPA (single page app) where the app never needs to reload.

## Server-side Rendering

One big appeal that React has on me is its ability to be rendered on the server-side. The two big benefits to this are SEO (search engine optimization) and performance. You can do this [from scratch](https://facebook.github.io/react/docs/environments.html), but there are a few nice tools such as [React Server](https://react-server.io/) and [MERN](http://mern.io/) that already handle this out of the box.

## Keep on learning!

That's it for this tutorial series, but use the suggestions from this article to continue your learning of React. We would love to know if this helped you in some way so leave a comment or [tweet us](https://twitter.com/ninjalitydesign). Also let us know what other topics you'd love to see in the future!","<p>In the <a href=""https://ninjality.com/blog/lets-learn-react-together-part-4"">fourth part</a> of this series, we learned about the last fundamental concept that is known as lifecycle methods. I want to close things off by discussing various other concepts and tools that are useful in advancing our knowledge in the React ecosystem.</p>
<h2>JavaScript (ES2015/ES6)</h2>
<p>As we saw, React is mainly JavaScript. There are some things to learn/remember such as JSX, state, and method names, but the rest is just going to be utilizing the power of JavaScript. In particular, I've been slowly learning <a href=""https://babeljs.io/docs/learn-es2015/"">ES2015</a> which is the next standard version that browsers are adopting. It provides a lot of nice new features that make coding so much faster, such as destructuring, for of loops, maps, and promises. I highly recommend you start transitioning over to writing ES2015 code, but wherever it makes sense to do.</p>
<h2>Build Tools</h2>
<p>I kept build tools such as <a href=""http://webpack.github.io/"">Webpack</a> out of the scope of this tutorial series to simplify things and keep the learning focused on React. You still don't have to worry about build tools thanks to the <a href=""https://github.com/facebookincubator/create-react-app"">create-react-app</a> CLI tool and boilerplates, but keep in mind that learning Webpack reaps huge benefits such as being able to customize and add in anything that you want to your build process.</p>
<h2>Flux Libraries</h2>
<p>We learned how to fetch and display data in a React component, but since React is focused on just the view/UI layer, this can get messy really fast. For large applications, you'll want a Flux-inspired library such as <a href=""http://redux.js.org/"">Redux</a>. All that Redux does is create a central store where data will be added and manipulated, and I highly recommend Wes Bos' video series <a href=""https://learnredux.com/"">Learn Redux</a>.</p>
<h2>URL Routing</h2>
<p>In a real web app, you'll probably want multiple pages and URLs. This is where <a href=""https://github.com/reactjs/react-router"">React Router</a> comes in to allow mapping certain URLs to components. This allows you to create a typical SPA (single page app) where the app never needs to reload.</p>
<h2>Server-side Rendering</h2>
<p>One big appeal that React has on me is its ability to be rendered on the server-side. The two big benefits to this are SEO (search engine optimization) and performance. You can do this <a href=""https://facebook.github.io/react/docs/environments.html"">from scratch</a>, but there are a few nice tools such as <a href=""https://react-server.io/"">React Server</a> and <a href=""http://mern.io/"">MERN</a> that already handle this out of the box.</p>
<h2>Keep on learning!</h2>
<p>That's it for this tutorial series, but use the suggestions from this article to continue your learning of React. We would love to know if this helped you in some way so leave a comment or <a href=""https://twitter.com/ninjalitydesign"">tweet us</a>. Also let us know what other topics you'd love to see in the future!</p>","In the fourth part of this series, we learned about the last fundamental concept that is known as lifecycle methods. I want to close things off by discussing various other concepts and tools that are useful in advancing our knowledge in the React ecosystem.",lets-learn-react-together-part-5,Tutorials|Coding,sunny@ninjality.com,"2017-02-13 06:11:02","2017-02-13 06:11:02","2016-08-05 06:11:01"
34,"Should you buy a vanity domain or a dot com?","For a long time, I’ve been a proponent of using a .com domain before you had other domain extensions. Now with the rise of different extensions from .beer .ninja to .webhost allows you to buy a vanity URL that better describes your company online, by just telling someone a domain. There is even a .blog domain coming so you can quickly setup a blog and have a custom domain saying your website is a blog. The problem is will someone know to go to a .blog over a .com. 

Within our company, we’ve split the domains between vanity URLs to using .com based on the products and branding. We have Codebee.io to show users the sites a developer-focused site, and we have SLK.Media to describe We're a Media company. We’ve also looked at more domains with custom URL’s to have a better brand and hopefully have our users remember our site. 

The problem I’ve heard and seen from users is when you tell them the domain is “SLK.Media” they’ll either ask for you to repeat or add a .com at the end of the whole domain. Now if you’re telling users your domain consistently, it may be hard for them to understand what the domain extension is, but if you're using social media or printing your domain out, you’ll find that the users see the domain and quickly write it out. 

All-in-all, the fact that dot-coms are becoming more and more scarce you’ll need to start branching out toward different domain extension if you want to buy domains in the coming years. We’ve already begun purchasing different domains in conjunction with our .com domains, but in a few cases, we cannot get the .com of our first choice. 

Tell us in the comments below if you're buying vanity domain extensions or thinking of more names that’ll you purchase a .com with!","<p>For a long time, I’ve been a proponent of using a .com domain before you had other domain extensions. Now with the rise of different extensions from .beer .ninja to .webhost allows you to buy a vanity URL that better describes your company online, by just telling someone a domain. There is even a .blog domain coming so you can quickly setup a blog and have a custom domain saying your website is a blog. The problem is will someone know to go to a .blog over a .com. </p>
<p>Within our company, we’ve split the domains between vanity URLs to using .com based on the products and branding. We have Codebee.io to show users the sites a developer-focused site, and we have SLK.Media to describe We're a Media company. We’ve also looked at more domains with custom URL’s to have a better brand and hopefully have our users remember our site. </p>
<p>The problem I’ve heard and seen from users is when you tell them the domain is “SLK.Media” they’ll either ask for you to repeat or add a .com at the end of the whole domain. Now if you’re telling users your domain consistently, it may be hard for them to understand what the domain extension is, but if you're using social media or printing your domain out, you’ll find that the users see the domain and quickly write it out. </p>
<p>All-in-all, the fact that dot-coms are becoming more and more scarce you’ll need to start branching out toward different domain extension if you want to buy domains in the coming years. We’ve already begun purchasing different domains in conjunction with our .com domains, but in a few cases, we cannot get the .com of our first choice. </p>
<p>Tell us in the comments below if you're buying vanity domain extensions or thinking of more names that’ll you purchase a .com with!</p>","For a long time, I’ve been a proponent of using a .com domain before you had other domain extensions. Now with the rise of different extensions from .beer .ninja to .webhost allows you to buy a vanity URL that better describes your company online, by just telling someone a domain. There is even a .blog domain coming so you can quickly setup a blog and have a custom domain saying your website is a blog. The problem is will someone know to go to a .blog over a .com.",should-you-buy-a-vanity-domain-or-a-dot-com,General,leon@ninjality.com,"2017-02-13 06:11:54","2017-02-13 06:11:54","2016-08-13 06:11:53"
35,"3 mistakes that will decrease user engagement","I’ve been blogging for years now, and I’ve learned a thing or two about what works and what doesn’t work. I’ve experimented with different methods to create a conversation around a new article, and I do it to not only create more value but also show other new readers there’s a thriving community on the blog. I also try and create a conversation around a new article for my purpose - I want to find new friends to talk to about what I’m interested in and at the very basic level network. When I’m doing this, I’m creating value for a blog post, but also a safe place where anyone feels they could ask questions or voice their concerns.  

There’s a lot that goes into understanding what readers will engage with, but there are a few things that will get the reader to share, comment, or otherwise interact with your content. The list I’ve put together are the top three reasons readers aren’t engaging with you or your content. 

## 1. You’re not asking for feedback/questions

The biggest thing for a reader is to find a reason to comment. They’re not going to leave a comment if they’re reading something and don’t have something prompting them to either answer a question or weigh in on an opinion you’ve made.  

I regularly ask questions on my technology blog, Digital Bounds. At the end of a post I ask for the reader to leave their thoughts, if they’re going to buy the device, or if they have other stories they’d like use to read. When I ask the questions, it won’t always spur someone to comment, but if 1 out of 30 people comment based on the question they’ll start a conversation which you can further by commenting back. 

## 2. You’re not including video, tweets, and other embeds

Are readers coming to your site and leaving after a few seconds? We’ll not everyone wants to read a thousand word article on the newest version of Android. If you drop a video in they might watch the 5-minute video on your site, and then be more inclined to read your thoughts and opinions after they understand what you're writing about. 

In my case, I often write about new gadgets or product launches. I can only explain a new phone or service in so many words before the topic of the article shifts towards something differently. If I include the product announcement video, they’ll understand first hand what the product or service is, with my spin on it too. I also include Tweets, SoundCloud embeds, and other Internet content to provide context and show everyone reading I not only keep my ear the ground but I’m also an expert on what I’m talking about. 

## 3. You’re not referencing other others work or including links to buy or find out more information 

Talking about others on your blog no matter how small you are will provide at least one share or one thank you comment. They’ll also have a smile on their face because someone recognized their work and praised them for working hard on something. I always reference someone else’s work in an article if they discovered or reported on something first. I often report on tech rumors and have to cite the original author to give credit but also let the readers go and confirm the news themselves. In other articles, I often recommend a product or podcast to buy or listen to. In those cases, I always link to the sites, SoundCloud, or iTunes to let readers listen or do their research on the product. 

All-in-all, I’m giving the readers one piece of the story and giving them the resources to go out and buy the thing or find out more on an article. They may leave the site, but they’ve found trust and may thank you for sharing your story or even leaving a comment that they loved what you recommended. 

## Wrap up

If you're not doing those few tasks on each post, you’re losing out on readers who want to read or comment. You’re not promoting them or providing them with the right resources for them to make their decisions based on your opinions or feedback. If you start to do these simple things you’ll find more readers are sharing your content, commenting and engaging with your articles. 

Along the way, you might find a friend or new coworking. I’ve started countless conversations on Twitter or comment sections which have turned into jobs or long time friends. Either way, you’re comments section, and social profiles will look more lively which could encourage more readers to engage with your content. 

Now tell us in the comments below what you think about this simple tips that will increase user engagement!","<p>I’ve been blogging for years now, and I’ve learned a thing or two about what works and what doesn’t work. I’ve experimented with different methods to create a conversation around a new article, and I do it to not only create more value but also show other new readers there’s a thriving community on the blog. I also try and create a conversation around a new article for my purpose - I want to find new friends to talk to about what I’m interested in and at the very basic level network. When I’m doing this, I’m creating value for a blog post, but also a safe place where anyone feels they could ask questions or voice their concerns.  </p>
<p>There’s a lot that goes into understanding what readers will engage with, but there are a few things that will get the reader to share, comment, or otherwise interact with your content. The list I’ve put together are the top three reasons readers aren’t engaging with you or your content. </p>
<h2>1. You’re not asking for feedback/questions</h2>
<p>The biggest thing for a reader is to find a reason to comment. They’re not going to leave a comment if they’re reading something and don’t have something prompting them to either answer a question or weigh in on an opinion you’ve made.  </p>
<p>I regularly ask questions on my technology blog, Digital Bounds. At the end of a post I ask for the reader to leave their thoughts, if they’re going to buy the device, or if they have other stories they’d like use to read. When I ask the questions, it won’t always spur someone to comment, but if 1 out of 30 people comment based on the question they’ll start a conversation which you can further by commenting back. </p>
<h2>2. You’re not including video, tweets, and other embeds</h2>
<p>Are readers coming to your site and leaving after a few seconds? We’ll not everyone wants to read a thousand word article on the newest version of Android. If you drop a video in they might watch the 5-minute video on your site, and then be more inclined to read your thoughts and opinions after they understand what you're writing about. </p>
<p>In my case, I often write about new gadgets or product launches. I can only explain a new phone or service in so many words before the topic of the article shifts towards something differently. If I include the product announcement video, they’ll understand first hand what the product or service is, with my spin on it too. I also include Tweets, SoundCloud embeds, and other Internet content to provide context and show everyone reading I not only keep my ear the ground but I’m also an expert on what I’m talking about. </p>
<h2>3. You’re not referencing other others work or including links to buy or find out more information</h2>
<p>Talking about others on your blog no matter how small you are will provide at least one share or one thank you comment. They’ll also have a smile on their face because someone recognized their work and praised them for working hard on something. I always reference someone else’s work in an article if they discovered or reported on something first. I often report on tech rumors and have to cite the original author to give credit but also let the readers go and confirm the news themselves. In other articles, I often recommend a product or podcast to buy or listen to. In those cases, I always link to the sites, SoundCloud, or iTunes to let readers listen or do their research on the product. </p>
<p>All-in-all, I’m giving the readers one piece of the story and giving them the resources to go out and buy the thing or find out more on an article. They may leave the site, but they’ve found trust and may thank you for sharing your story or even leaving a comment that they loved what you recommended. </p>
<h2>Wrap up</h2>
<p>If you're not doing those few tasks on each post, you’re losing out on readers who want to read or comment. You’re not promoting them or providing them with the right resources for them to make their decisions based on your opinions or feedback. If you start to do these simple things you’ll find more readers are sharing your content, commenting and engaging with your articles. </p>
<p>Along the way, you might find a friend or new coworking. I’ve started countless conversations on Twitter or comment sections which have turned into jobs or long time friends. Either way, you’re comments section, and social profiles will look more lively which could encourage more readers to engage with your content. </p>
<p>Now tell us in the comments below what you think about this simple tips that will increase user engagement!</p>","I’ve been blogging for years now, and I’ve learned a thing or two about what works and what doesn’t work. I’ve experimented with different methods to create a conversation around a new article, and I do it to not only create more value but also show other new readers there’s a thriving community on the blog. I also try and create a conversation around a new article for my purpose - I want to find new friends to talk to about what I’m interested in and at the very basic level network. When I’m doing this, I’m creating value for a blog post, but also a safe place where anyone feels they could ask questions or voice their concerns.",3-mistakes-that-will-decrease-user-engagment,General,leon@ninjality.com,"2017-02-13 06:13:02","2017-02-13 06:13:38","2016-09-02 06:13:00"
36,"Welcome to the new Ninjality","Ninjality has gone through multiple redesigns. With each iteration, we further realize what we should be focusing on. Our previous one in 2015 was quite significant, because we rebranded with a completely new logo, design, and marketing strategy. Today, we're releasing another redesign to kick off the year of 2017, and for many good reasons.

## Simplify our focus

We pride ourselves in being unique, so much so that our home page used to say that we were ""creating cutting-edge social experiences for the modern web."" While that sounds cool, even we didn't have a full idea of what that meant. Thus, we decided to simplify our focus to make it clear on what we actually did. Our new tagline is ""building websites that work"" and while that isn't unique, it's straight to the point.

This simplified language style is used throughout the new design, where we try to avoid jargon and explain things as they are. On the new home page, our work and services are showcased and explained clearly. To summarize, we build websites and web apps that work well on multiple devices, and we go to further lengths to help brand your company on social media.

## Grow our blog into a useful resource

While initially a place to post occasional announcements, we recently started to turn the blog into a resource where you could read our expertise (or our process in gaining it) on various topics revolving around design, coding, marketing, and business. In 2016, we've written 27 articles which have received high traction.

Realizing that this was something we enjoyed doing, it only made sense to have a design and platform which could facilitate that. Our previous CMS (content management system), Anchor, was lacking features that we now needed. Thus, after trying out different platforms, we happily settled on using [October CMS](http://octobercms.com/). This is a CMS that is built on top of Laravel, which is a web framework that we already used on previous projects. We felt right at home with October, and were able to add new features to the blog such as the series pages. For example, there is now a page for the [Let's Learn React Together series](/blog/series/lets-learn-react-together) which has a description and lists all of the tutorials in chronological order. Also, as you may notice on this article, we are now going to be adding large cover photos.

Expect to see a more in-depth review and tutorial of October soon.

## Build relationships with the community

On top of our work as a web design agency, we also want to be a part of the community. Here are some ways we wish to do that:

- Write tutorials and share advice on the blog, and allow discussions through Facebook Comments.
- Contribute to the [open source community](/opensource).
- Share and talk with everyone on social media.

## Showcase and learn new skills

And finally, we wanted to show off our possibilities. As mentioned before, we migrated over from Anchor to October which is a completely new platform for us. On the front-end side of things, we kept to just building out the UI without any large frameworks. A couple of tools and libraries worth mentioning:

- [Turbolinks](https://github.com/turbolinks/turbolinks) which helps speed up navigation. It fetches and renders pages via Ajax, so that our site feels like a single-page app.
- [cssnext](http://cssnext.io/) which is PostCSS plugin and an alternative to Sass or Less. It lets us use future CSS syntax.
- [socialshares](https://socialshar.es/) which is our own open source library for share buttons. We've recently released version 2 so please check it out for yourself.

## Closing thoughts

We hope that you enjoy the new design as much as we do, and that it makes things simpler in finding out what we do, reading our content, and interacting with us. If you have questions or suggestions, we'd love to hear them. Be sure to follow our [Twitter](https://twitter.com/NinjalityDesign), [Facebook](https://www.facebook.com/NinjalityDesign), and [LinkedIn](https://www.linkedin.com/company/ninjality) for updates when new articles are published, or [contact us](/contact) if you want to work on an idea together.","<p>Ninjality has gone through multiple redesigns. With each iteration, we further realize what we should be focusing on. Our previous one in 2015 was quite significant, because we rebranded with a completely new logo, design, and marketing strategy. Today, we're releasing another redesign to kick off the year of 2017, and for many good reasons.</p>
<h2>Simplify our focus</h2>
<p>We pride ourselves in being unique, so much so that our home page used to say that we were &quot;creating cutting-edge social experiences for the modern web.&quot; While that sounds cool, even we didn't have a full idea of what that meant. Thus, we decided to simplify our focus to make it clear on what we actually did. Our new tagline is &quot;building websites that work&quot; and while that isn't unique, it's straight to the point.</p>
<p>This simplified language style is used throughout the new design, where we try to avoid jargon and explain things as they are. On the new home page, our work and services are showcased and explained clearly. To summarize, we build websites and web apps that work well on multiple devices, and we go to further lengths to help brand your company on social media.</p>
<h2>Grow our blog into a useful resource</h2>
<p>While initially a place to post occasional announcements, we recently started to turn the blog into a resource where you could read our expertise (or our process in gaining it) on various topics revolving around design, coding, marketing, and business. In 2016, we've written 27 articles which have received high traction.</p>
<p>Realizing that this was something we enjoyed doing, it only made sense to have a design and platform which could facilitate that. Our previous CMS (content management system), Anchor, was lacking features that we now needed. Thus, after trying out different platforms, we happily settled on using <a href=""http://octobercms.com/"">October CMS</a>. This is a CMS that is built on top of Laravel, which is a web framework that we already used on previous projects. We felt right at home with October, and were able to add new features to the blog such as the series pages. For example, there is now a page for the <a href=""/blog/series/lets-learn-react-together"">Let's Learn React Together series</a> which has a description and lists all of the tutorials in chronological order. Also, as you may notice on this article, we are now going to be adding large cover photos.</p>
<p>Expect to see a more in-depth review and tutorial of October soon.</p>
<h2>Build relationships with the community</h2>
<p>On top of our work as a web design agency, we also want to be a part of the community. Here are some ways we wish to do that:</p>
<ul>
<li>Write tutorials and share advice on the blog, and allow discussions through Facebook Comments.</li>
<li>Contribute to the <a href=""/opensource"">open source community</a>.</li>
<li>Share and talk with everyone on social media.</li>
</ul>
<h2>Showcase and learn new skills</h2>
<p>And finally, we wanted to show off our possibilities. As mentioned before, we migrated over from Anchor to October which is a completely new platform for us. On the front-end side of things, we kept to just building out the UI without any large frameworks. A couple of tools and libraries worth mentioning:</p>
<ul>
<li><a href=""https://github.com/turbolinks/turbolinks"">Turbolinks</a> which helps speed up navigation. It fetches and renders pages via Ajax, so that our site feels like a single-page app.</li>
<li><a href=""http://cssnext.io/"">cssnext</a> which is PostCSS plugin and an alternative to Sass or Less. It lets us use future CSS syntax.</li>
<li><a href=""https://socialshar.es/"">socialshares</a> which is our own open source library for share buttons. We've recently released version 2 so please check it out for yourself.</li>
</ul>
<h2>Closing thoughts</h2>
<p>We hope that you enjoy the new design as much as we do, and that it makes things simpler in finding out what we do, reading our content, and interacting with us. If you have questions or suggestions, we'd love to hear them. Be sure to follow our <a href=""https://twitter.com/NinjalityDesign"">Twitter</a>, <a href=""https://www.facebook.com/NinjalityDesign"">Facebook</a>, and <a href=""https://www.linkedin.com/company/ninjality"">LinkedIn</a> for updates when new articles are published, or <a href=""/contact"">contact us</a> if you want to work on an idea together.</p>","Ninjality has gone through multiple redesigns. With each iteration, we further realize what we should be focusing on. Our previous one in 2015 was quite significant, because we rebranded with a completely new logo, design, and marketing strategy. Today, we're releasing another redesign to kick off the year of 2017, and for many good reasons.",redesign-2017,News,sunny@ninjality.com,"2017-02-16 15:30:05","2017-04-02 02:47:52","2017-02-16 13:50:00"
37,"Using Facebook Comments leads to more commenters","I use Facebook on a daily basis. I use it for getting my daily dose of news, whether it’s a fake news outlet or not. I also use Facebook for connecting with friends, sharing personal updates, and messaging others. The last thing I use Facebook for is work, from managing posts to now moderating comments. Yes, Facebook Comments are a huge driver of conversations off the core websites. They’re the easiest place for someone to leave feedback, leave a question, or leave an opinion. Facebook Comments can and are more widely being added to news websites from tech blogs to more mainstream sites.

The Facebook commenting system competes with Livefyre, Disqus, and publishers on commenting systems. The advantage of Facebook’s system is you’re always signed into Facebook, everyone has a Facebook account, and the comments can mirror on both the website and on Facebook. All those features make Facebook’s system a superior system compared to Disqus or other systems. While you’re able to use any account from Twitter, Facebook, or Google+, you ask users to go through a lengthy and a complicated login process that most folks don’t have time for these days. Back in the days, it made more sense to open up to everyone, but today there are 2 billion Facebook users with millions and millions of active users. That amount of active users gives you a giant pool of possible commenters. 

Everything from the simple setup to numerous features gives website owners an advantage over other sites. We’ve moved all our commenting systems to Facebook’s to boost conversation on the site. We’ll hit the key points on why we made the change and what difference it has had on our sites. 

## Digital Bounds Case Study

While [Digital Bounds](http://digitalbounds.com/) sees thousands of monthly views, we’ve been unable to convert those readers to commenters. It's not just one problem but multiple issues we needed to address. There was no one commenting thus leading others not to comment. The other complaint we’ve seen is they didn’t want to sign up to comment. While we had ways to authorize comments through Facebook, Twitter, Google+ and other networks, users didn’t want to go through the process of having to sign in. It leads to comment sections going unused, something that personally bothered me. 

As such, our team has been tossing around the idea of using Facebook's commenting section on the website. The small A/B testing we started doing was showing different users Disqus comments and showing another user Facebook Comments. The change was significant, but with most users not commenting, as such, we didn’t think we’d see a backlash. We saw the opposite. We had dozens of comments posted on the site in the course of the week. While we still struggle to convert readers to commenters, we’ve had some evidence Facebook comments can lead to more commenters. 
## Comment Mirroring


![driving-mirror-mirror-rear-mirror-reflection-nature.jpg](/storage/app/uploads/public/58b/9e7/5ba/58b9e75ba2c5c294815104.jpg)

Comment Mirroring is the feature which allows Facebook comment sections to reflect on a webpage and a status update on a Facebook Page. It’s a simple idea but can lead to a more engaged audience. If readers see the article webpage has dozens of comments, they’ll want to join the conversation. The same idea works on Facebook status updates. If there are a few shares and a dozen comments they’ll jump into the conversation by first reading the article than navigating back to Facebook and leaving a comment. Those comments will appear on both Facebook and the web page. 

The direct correlation between the better performance of the webpage will also mean increased performance on Facebook.

## Easy Integration

![macbook-internet-computers.jpg](/storage/app/uploads/public/58b/9e7/d92/58b9e7d925b34382671335.jpg)

At first, our team wanted to move our comments sections to Facebook’s system, but the worry was around integration. We didn’t know how easy it was to add the comments onto our websites and turn on commenting mirroring. While diving into the code of the webpage isn’t always ideal, it only took 5 minutes to add in. 

There is only a few pieces of code to enable the comments, with a lot of documentation from Facebook around standard errors and even common mistakes made. To turn on comment mirroring is done through a click of a button. Easy right!?
## Trusting Facebook


![wooden-green-door-locked-with-padlock.jpg](/storage/app/uploads/public/58b/9e7/96d/58b9e796d4b37451799664.jpg)

Another issue we faced was trusting Facebook. We have Instant Articles turned on, Facebook Comments, and we are using other Facebook tools on our sites. We all know all too well how Facebook can change their minds on how publishers make money, reach their audience, or how their pages look. 

We’ve put a lot of faith in Facebook to do what’s best for their community of publishers. While we know they will always look out for them, they’ll always need to have publishers on their side. We will keep an eye on Facebook at all times in case they decide to change the way they do business. 

## TL;DR

Facebook Comments are one of the easiest ways to integrate third-party comments into your blog or website. We’ve seen an increase of comments, plus users love how fast it is—there's no need to sign in. They’re already using Facebook on their phones and browsers, so they’re always signed in.

The comment mirroring keeps your website and Facebook page look more active and encourages users to comment. Overall, I’m not sure why it took us so long to adopt the Facebook commenting system.","<p>I use Facebook on a daily basis. I use it for getting my daily dose of news, whether it’s a fake news outlet or not. I also use Facebook for connecting with friends, sharing personal updates, and messaging others. The last thing I use Facebook for is work, from managing posts to now moderating comments. Yes, Facebook Comments are a huge driver of conversations off the core websites. They’re the easiest place for someone to leave feedback, leave a question, or leave an opinion. Facebook Comments can and are more widely being added to news websites from tech blogs to more mainstream sites.</p>
<p>The Facebook commenting system competes with Livefyre, Disqus, and publishers on commenting systems. The advantage of Facebook’s system is you’re always signed into Facebook, everyone has a Facebook account, and the comments can mirror on both the website and on Facebook. All those features make Facebook’s system a superior system compared to Disqus or other systems. While you’re able to use any account from Twitter, Facebook, or Google+, you ask users to go through a lengthy and a complicated login process that most folks don’t have time for these days. Back in the days, it made more sense to open up to everyone, but today there are 2 billion Facebook users with millions and millions of active users. That amount of active users gives you a giant pool of possible commenters. </p>
<p>Everything from the simple setup to numerous features gives website owners an advantage over other sites. We’ve moved all our commenting systems to Facebook’s to boost conversation on the site. We’ll hit the key points on why we made the change and what difference it has had on our sites. </p>
<h2>Digital Bounds Case Study</h2>
<p>While <a href=""http://digitalbounds.com/"">Digital Bounds</a> sees thousands of monthly views, we’ve been unable to convert those readers to commenters. It's not just one problem but multiple issues we needed to address. There was no one commenting thus leading others not to comment. The other complaint we’ve seen is they didn’t want to sign up to comment. While we had ways to authorize comments through Facebook, Twitter, Google+ and other networks, users didn’t want to go through the process of having to sign in. It leads to comment sections going unused, something that personally bothered me. </p>
<p>As such, our team has been tossing around the idea of using Facebook's commenting section on the website. The small A/B testing we started doing was showing different users Disqus comments and showing another user Facebook Comments. The change was significant, but with most users not commenting, as such, we didn’t think we’d see a backlash. We saw the opposite. We had dozens of comments posted on the site in the course of the week. While we still struggle to convert readers to commenters, we’ve had some evidence Facebook comments can lead to more commenters. </p>
<h2>Comment Mirroring</h2>
<p><img src=""/storage/app/uploads/public/58b/9e7/5ba/58b9e75ba2c5c294815104.jpg"" alt=""driving-mirror-mirror-rear-mirror-reflection-nature.jpg"" /></p>
<p>Comment Mirroring is the feature which allows Facebook comment sections to reflect on a webpage and a status update on a Facebook Page. It’s a simple idea but can lead to a more engaged audience. If readers see the article webpage has dozens of comments, they’ll want to join the conversation. The same idea works on Facebook status updates. If there are a few shares and a dozen comments they’ll jump into the conversation by first reading the article than navigating back to Facebook and leaving a comment. Those comments will appear on both Facebook and the web page. </p>
<p>The direct correlation between the better performance of the webpage will also mean increased performance on Facebook.</p>
<h2>Easy Integration</h2>
<p><img src=""/storage/app/uploads/public/58b/9e7/d92/58b9e7d925b34382671335.jpg"" alt=""macbook-internet-computers.jpg"" /></p>
<p>At first, our team wanted to move our comments sections to Facebook’s system, but the worry was around integration. We didn’t know how easy it was to add the comments onto our websites and turn on commenting mirroring. While diving into the code of the webpage isn’t always ideal, it only took 5 minutes to add in. </p>
<p>There is only a few pieces of code to enable the comments, with a lot of documentation from Facebook around standard errors and even common mistakes made. To turn on comment mirroring is done through a click of a button. Easy right!?</p>
<h2>Trusting Facebook</h2>
<p><img src=""/storage/app/uploads/public/58b/9e7/96d/58b9e796d4b37451799664.jpg"" alt=""wooden-green-door-locked-with-padlock.jpg"" /></p>
<p>Another issue we faced was trusting Facebook. We have Instant Articles turned on, Facebook Comments, and we are using other Facebook tools on our sites. We all know all too well how Facebook can change their minds on how publishers make money, reach their audience, or how their pages look. </p>
<p>We’ve put a lot of faith in Facebook to do what’s best for their community of publishers. While we know they will always look out for them, they’ll always need to have publishers on their side. We will keep an eye on Facebook at all times in case they decide to change the way they do business. </p>
<h2>TL;DR</h2>
<p>Facebook Comments are one of the easiest ways to integrate third-party comments into your blog or website. We’ve seen an increase of comments, plus users love how fast it is—there's no need to sign in. They’re already using Facebook on their phones and browsers, so they’re always signed in.</p>
<p>The comment mirroring keeps your website and Facebook page look more active and encourages users to comment. Overall, I’m not sure why it took us so long to adopt the Facebook commenting system.</p>","I use Facebook on a daily basis. I use it for getting my daily dose of news, whether it’s a fake news outlet or not. I also use Facebook for connecting with friends, sharing personal updates, and messaging others. The last thing I use Facebook for is work, from managing posts to now moderating comments. Yes, Facebook Comments are a huge driver of conversations off the core websites. They’re the easiest place for someone to leave feedback, leave a question, or leave an opinion. Facebook Comments can and are more widely being added to news websites from tech blogs to more mainstream sites.",facebook-comments,General,leon@ninjality.com,"2017-03-03 13:37:35","2017-03-05 01:27:06","2017-03-04 10:20:00"
38,"Using Turbolinks to speed up your site","In a world of single-page apps (SPAs) that are rendered by the browser, it is hard to consider building any other way; you get a lot of benefits such as performance of almost instant-loading pages. However, there are still good use cases for building traditional server-rendered websites such as those powered by a CMS (content management system) like WordPress. We [recently redesigned ninjality.com](https://ninjality.com/blog/redesign-2017), and we chose to use October CMS to help with managing content such as this article. Choosing a CMS doesn't mean that you have to give up on the benefits of SPAs, so I want to show how we used the [Turbolinks library](https://github.com/turbolinks/turbolinks) to make our site feel like it was built in a modern JavaScript framework.

## Understanding PJAX

To help better understand what Turbolinks does, it is important to learn the concept of [PJAX](https://pjax.herokuapp.com/) which has actually been around for many years. PJAX stands for pushState + Ajax, and uses both those technologies to intercept link clicks so that JavaScript is able to update the URL and load content via Ajax. Initially, both Turbolinks and PJAX required backend integration so that the Ajax responses would only contain the page title and content. While this is still ideal for performance, Turbolinks as a JavaScript-only library simply works out of the box by manually parsing the title and content out of the full HTML. A fun fact if you're new to Turbolinks is that it used to exist as a Rails-only Ruby gem, and PJAX had a JS library that relied on jQuery. Now, Turbolinks is a standalone library that you can integrate into any website.

## Installing Turbolinks

You simply need to include the Turbolinks JS library into your page. [View the README](https://github.com/turbolinks/turbolinks#installation) for instructions, but let's assume that you're using some form of bundler with npm:

```
npm install turbolinks --save
```

Now you need to import and initialize Turbolinks:

```
var Turbolinks = require('turbolinks')

Turbolinks.start()
```

If your site is very simple, then you're already done. Most of the time you'll need some extra setup though.

## Integrating your website

If you already have some JavaScript running on your site, then you're most likely listening for a page load or domready event. In the case of Ninjality, we have code highlighting, smooth scroll, image zoom, share buttons, and many other libraries that would normally look something like this:

```
document.addEventListener('DOMContentLoaded', function () {
  // initialize scripts....
})
```

However, now that pages can be loaded over Ajax, we need another event to know when those pages load, otherwise our scripts will only fire once (when the user manually visits the site for the first time). Thankfully Turbolinks provides such an event:

```
document.addEventListener('turbolinks:load', function () {
  // initialize scripts....
})
```

As you can see, a simple change from `DOMContentLoaded` to `turbolinks:load` will fix your scripts. Well, most of them. Let's fix some common gotchyas in the next section.

## Some common gotchyas

You're most likely using Google Analytics, Disqus, social widgets, and other third-party tools that are loaded via inline `<script>` snippets. How do you transfer these over to the `turbolinks:load` event?

You'll need a dynamic script loader. The [load-script](https://github.com/eldargab/load-script) library is what we use on Ninjality. As usual, install it through npm:

```
npm install load-script --save
```

Now you can use Google Analytics again:

```
var Turbolinks = require('turbolinks')
var loadScript = require('load-script')

Turbolinks.start()

document.addEventListener('turbolinks:load', function () {
  // initialize scripts...

  // Google Analytics
  if (typeof ga === 'undefined') {
    loadScript('https://www.google-analytics.com/analytics.js', function () {
      window.ga = window.ga || function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date
      ga('create', 'YOUR-TRACKER-ID', 'auto')
      ga('send', 'pageview')
    })
  } else {
    ga('send', 'pageview')
  }
})
```

Since we integrate Facebook Comments, the same had to be done here as well:

```
if (typeof FB === 'undefined') {
  loadScript('https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.8&appId=YOUR-FB-APP-ID')
} else {
  FB.XFBML.parse()
}
```

Unfortunately, we had to take an extra step to get Facebook Comments to work properly. This meant including the `data-turbolinks-permanent` attribute on `<div id=""fb-root"">`:

```
<div id=""fb-root"" data-turbolinks-permanent></div>
```

Finally, the last gotchya you need to be careful of is when including scripts in the `<body>`. Make sure that you add the `data-turbolinks-eval=""false""` attribute:

```
<script src=""bundle.js"" data-turbolinks-eval=""false""></script>
```

While Turbolinks claims to properly resolve inline scripts, we had issues with our JavaScript running multiple times during page navigations.

## Closing thoughts

For many content-based websites that need administrative features, a front end framework like React is overkill. October CMS allows us to have a simple setup with search engine optimization and an admin interface in mind. By integrating Turbolinks, we also were able to compromise between the benefits of a server-rendered website and a single-page app. Do keep in mind that Turbolinks is not a replacement for building an SPA, because you don't get other benefits like state management or quick UI development with Turbolinks. Leave a comment or [tweet @NinjalityDesign](https://twitter.com/NinjalityDesign) if this article helped you integrate Turbolinks into a project!","<p>In a world of single-page apps (SPAs) that are rendered by the browser, it is hard to consider building any other way; you get a lot of benefits such as performance of almost instant-loading pages. However, there are still good use cases for building traditional server-rendered websites such as those powered by a CMS (content management system) like WordPress. We <a href=""https://ninjality.com/blog/redesign-2017"">recently redesigned ninjality.com</a>, and we chose to use October CMS to help with managing content such as this article. Choosing a CMS doesn't mean that you have to give up on the benefits of SPAs, so I want to show how we used the <a href=""https://github.com/turbolinks/turbolinks"">Turbolinks library</a> to make our site feel like it was built in a modern JavaScript framework.</p>
<h2>Understanding PJAX</h2>
<p>To help better understand what Turbolinks does, it is important to learn the concept of <a href=""https://pjax.herokuapp.com/"">PJAX</a> which has actually been around for many years. PJAX stands for pushState + Ajax, and uses both those technologies to intercept link clicks so that JavaScript is able to update the URL and load content via Ajax. Initially, both Turbolinks and PJAX required backend integration so that the Ajax responses would only contain the page title and content. While this is still ideal for performance, Turbolinks as a JavaScript-only library simply works out of the box by manually parsing the title and content out of the full HTML. A fun fact if you're new to Turbolinks is that it used to exist as a Rails-only Ruby gem, and PJAX had a JS library that relied on jQuery. Now, Turbolinks is a standalone library that you can integrate into any website.</p>
<h2>Installing Turbolinks</h2>
<p>You simply need to include the Turbolinks JS library into your page. <a href=""https://github.com/turbolinks/turbolinks#installation"">View the README</a> for instructions, but let's assume that you're using some form of bundler with npm:</p>
<pre><code>npm install turbolinks --save</code></pre>
<p>Now you need to import and initialize Turbolinks:</p>
<pre><code>var Turbolinks = require('turbolinks')

Turbolinks.start()</code></pre>
<p>If your site is very simple, then you're already done. Most of the time you'll need some extra setup though.</p>
<h2>Integrating your website</h2>
<p>If you already have some JavaScript running on your site, then you're most likely listening for a page load or domready event. In the case of Ninjality, we have code highlighting, smooth scroll, image zoom, share buttons, and many other libraries that would normally look something like this:</p>
<pre><code>document.addEventListener('DOMContentLoaded', function () {
  // initialize scripts....
})</code></pre>
<p>However, now that pages can be loaded over Ajax, we need another event to know when those pages load, otherwise our scripts will only fire once (when the user manually visits the site for the first time). Thankfully Turbolinks provides such an event:</p>
<pre><code>document.addEventListener('turbolinks:load', function () {
  // initialize scripts....
})</code></pre>
<p>As you can see, a simple change from <code>DOMContentLoaded</code> to <code>turbolinks:load</code> will fix your scripts. Well, most of them. Let's fix some common gotchyas in the next section.</p>
<h2>Some common gotchyas</h2>
<p>You're most likely using Google Analytics, Disqus, social widgets, and other third-party tools that are loaded via inline <code>&lt;script&gt;</code> snippets. How do you transfer these over to the <code>turbolinks:load</code> event?</p>
<p>You'll need a dynamic script loader. The <a href=""https://github.com/eldargab/load-script"">load-script</a> library is what we use on Ninjality. As usual, install it through npm:</p>
<pre><code>npm install load-script --save</code></pre>
<p>Now you can use Google Analytics again:</p>
<pre><code>var Turbolinks = require('turbolinks')
var loadScript = require('load-script')

Turbolinks.start()

document.addEventListener('turbolinks:load', function () {
  // initialize scripts...

  // Google Analytics
  if (typeof ga === 'undefined') {
    loadScript('https://www.google-analytics.com/analytics.js', function () {
      window.ga = window.ga || function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date
      ga('create', 'YOUR-TRACKER-ID', 'auto')
      ga('send', 'pageview')
    })
  } else {
    ga('send', 'pageview')
  }
})</code></pre>
<p>Since we integrate Facebook Comments, the same had to be done here as well:</p>
<pre><code>if (typeof FB === 'undefined') {
  loadScript('https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.8&amp;appId=YOUR-FB-APP-ID')
} else {
  FB.XFBML.parse()
}</code></pre>
<p>Unfortunately, we had to take an extra step to get Facebook Comments to work properly. This meant including the <code>data-turbolinks-permanent</code> attribute on <code>&lt;div id=""fb-root""&gt;</code>:</p>
<pre><code>&lt;div id=""fb-root"" data-turbolinks-permanent&gt;&lt;/div&gt;</code></pre>
<p>Finally, the last gotchya you need to be careful of is when including scripts in the <code>&lt;body&gt;</code>. Make sure that you add the <code>data-turbolinks-eval=""false""</code> attribute:</p>
<pre><code>&lt;script src=""bundle.js"" data-turbolinks-eval=""false""&gt;&lt;/script&gt;</code></pre>
<p>While Turbolinks claims to properly resolve inline scripts, we had issues with our JavaScript running multiple times during page navigations.</p>
<h2>Closing thoughts</h2>
<p>For many content-based websites that need administrative features, a front end framework like React is overkill. October CMS allows us to have a simple setup with search engine optimization and an admin interface in mind. By integrating Turbolinks, we also were able to compromise between the benefits of a server-rendered website and a single-page app. Do keep in mind that Turbolinks is not a replacement for building an SPA, because you don't get other benefits like state management or quick UI development with Turbolinks. Leave a comment or <a href=""https://twitter.com/NinjalityDesign"">tweet @NinjalityDesign</a> if this article helped you integrate Turbolinks into a project!</p>","In a world of single-page apps (SPAs) that are rendered by the browser, it is hard to consider building any other way; you get a lot of benefits such as performance of almost instant-loading pages. However, there are still good use cases for building traditional server-rendered websites such as those powered by a CMS (content management system) like WordPress. We recently redesigned ninjality.com, and we chose to use October CMS to help with managing content such as this article. Choosing a CMS doesn't mean that you have to give up on the benefits of SPAs, so I want to show how we used the Turbolinks library to make our site feel like it was built in a modern JavaScript framework.",turbolinks-site-speed,Tutorials|Coding,sunny@ninjality.com,"2017-04-23 17:18:49","2017-04-24 22:18:47","2017-04-24 18:15:00"
39,"Getting started freelancing","I’m a freelance technology reporter. I work with multiple clients each month plus I work for myself. Each month I invoice clients and generate money from YouTube ads, display ads, and through Amazon Affiliate. A lot of my success is due to hard work and through trial and error. When I first started freelancing, I had no clue what I was doing. I didn’t know about taxes, invoicing, or best practices. Now, after a year of working, I’ve managed to get a better handle on freelancing. I know what my time is worth, how to pay taxes each quarter properly, and what are the best tools for managing my busy life. 

Freelancing gives many a way to work for themselves. I wanted to freelance because I wouldn’t have anyone bossing me around. Yes, I’d have clients I need to please and keep happy, but I can opt out of bad or nagging clients. I’m able to pick and choose who I work for and what I charge them. When I first started writing, I didn’t know my worth. I would write for pennies on the dollar. While yes it helped build my portfolio, I could have charged more back than. I have an extensive backlog of articles on [Digital Bounds](http://digitalbounds.com/), some I’m very proud of! Those articles are unpaid in a manner. I write them then I use affiliate links and ads to make money possibly. 

## Quickbooks Self-employed 

There are other options around to do all your business accounting, but they all mainly focus on invoicing clients. [Quickbooks](https://selfemployed.intuit.com/) does receipt management, sending invoices, and helps you see what your quarterly tax payments are. If you’re unsure if you need to pay quarterly taxes, [Policy Genius](https://www.policygenius.com/blog/freelancers-taxes-quarterly-annually/) has a whole article on the topic. It took me awhile to understand if I needed to pay taxes yearly or quarterly until Quickbooks showed my deductions vs. my income. Most quarters I end up paying, but a few quarters here and there I'm able to skip out because my deductions allowed for a low or little tax payment. 

Quickbooks self-employed is ideal for YouTubers, bloggers, and anyone making a buck on the internet. Quickbooks shows you where to pay your taxes, how much, and can interface with Turbo Tax at the end of the year. It cost $12 a month, but you get Turbo Tax business at the end of the year. I wouldn’t opt for any other service now!
PayPal
While I have an LLC setup with a business bank account, I often use the PayPal account more often. A lot of my clients prefer to pay me through the PayPal account because they use it to manage their money or it’s easier than using a bank transfer or paying through Quickbooks. While I hate the PayPal fees, I write them off as a business expense which helps keep my tax bill low. 

I have the PayPal Business Debit Card which lets me use ATMs and pay with my balance. There is also backup funding which charges your on hand debit card or bank account, so you’ll never get denied. 

If you’re not using PayPal, you’re going to have a hard time freelancing these days. The service is still a core part of many people’s lives and businesses. 

## MeetEdgar

Are you a writer, blogger, YouTuber or do anything where you want to share your work through social media? [MeetEdgar](https://meetedgar.com/) is the best social media management tool that’ll let you reuse old social media post. Most importantly it’ll help you cut down on time you spend managing your social media accounts. You’ll import an RSS feed or manually enter a post that can be sorted by topic, whether it’s an evergreen post, or if you only want it posted once. Before Edgar, I would add new social media post into an Excel worksheet with the title, link, and any other media that would go along with the post. It was a hassle. I tried Buffer, Hootsuite, and other social media tools but none of them let me put my content in there and forget about it. Now I check Edgar once a week and the rest of the week it posts timely social updates on my business social media accounts. 

Edgar is $79 a month. I know, it might be outside of your budget, but it’s going to save you a ton of time. 

## Trello

[Trello](https://trello.com/) is the best to-do manager around. You’re able to adjust your needs from managing an editorial calendar or creating a shopping list for your family. Within SLK Media we use it as an editorial calendar, a way to manage our bills, a way to manage our employee's task, and most importantly an operations chart to know what bugs and problems we have to address. Trello is a free tool, so you’re able to create hundreds of Trello boards for whatever your needs are. You’re able to invite dozens of employees and other clients to one board. It’s perfect if you're working with someone who needs multiple updates to an app, article, or YouTube video. 

Trello is used by thousands of companies, so there’s always a way for it to fit your needs. Trello offers dozens of different board examples to help you understand how to use it to manage expenses, editorial calendars, or other to-do needs. If you do need help setting one up one of us at Ninjality can consult with your company. 

## Rescue Time

Knowing where your time goes is important. You’re freelancing so the most important thing you have is your time. Before I started time tracking, I was unclear on how many hours a day I was working. Some clients want to bill by the hour versus a per contract or per article basis. 

[Rescue Time](https://www.rescuetime.com/dashboard) will track what apps, sites, and apps your using. You’ll have an idea how long you edited a podcast, video, or how long it took to write an article. If you’re not billing per hour, then it’ll give you an idea what your time is worth. Now I’ll charge $15 per 100 words over $5 or $6 per hundred words because I know my time is worth more when I’m spending an hour or two writing some smaller articles. 

There is an iOS, Android, Mac and Windows app so you can track all your life including social media usage. There is a paid tier, but the free version works just as well. I have used it for over a year now, and it has helped me bill clients who want hourly or even contracts.","<p>I’m a freelance technology reporter. I work with multiple clients each month plus I work for myself. Each month I invoice clients and generate money from YouTube ads, display ads, and through Amazon Affiliate. A lot of my success is due to hard work and through trial and error. When I first started freelancing, I had no clue what I was doing. I didn’t know about taxes, invoicing, or best practices. Now, after a year of working, I’ve managed to get a better handle on freelancing. I know what my time is worth, how to pay taxes each quarter properly, and what are the best tools for managing my busy life. </p>
<p>Freelancing gives many a way to work for themselves. I wanted to freelance because I wouldn’t have anyone bossing me around. Yes, I’d have clients I need to please and keep happy, but I can opt out of bad or nagging clients. I’m able to pick and choose who I work for and what I charge them. When I first started writing, I didn’t know my worth. I would write for pennies on the dollar. While yes it helped build my portfolio, I could have charged more back than. I have an extensive backlog of articles on <a href=""http://digitalbounds.com/"">Digital Bounds</a>, some I’m very proud of! Those articles are unpaid in a manner. I write them then I use affiliate links and ads to make money possibly. </p>
<h2>Quickbooks Self-employed</h2>
<p>There are other options around to do all your business accounting, but they all mainly focus on invoicing clients. <a href=""https://selfemployed.intuit.com/"">Quickbooks</a> does receipt management, sending invoices, and helps you see what your quarterly tax payments are. If you’re unsure if you need to pay quarterly taxes, <a href=""https://www.policygenius.com/blog/freelancers-taxes-quarterly-annually/"">Policy Genius</a> has a whole article on the topic. It took me awhile to understand if I needed to pay taxes yearly or quarterly until Quickbooks showed my deductions vs. my income. Most quarters I end up paying, but a few quarters here and there I'm able to skip out because my deductions allowed for a low or little tax payment. </p>
<p>Quickbooks self-employed is ideal for YouTubers, bloggers, and anyone making a buck on the internet. Quickbooks shows you where to pay your taxes, how much, and can interface with Turbo Tax at the end of the year. It cost $12 a month, but you get Turbo Tax business at the end of the year. I wouldn’t opt for any other service now!
PayPal
While I have an LLC setup with a business bank account, I often use the PayPal account more often. A lot of my clients prefer to pay me through the PayPal account because they use it to manage their money or it’s easier than using a bank transfer or paying through Quickbooks. While I hate the PayPal fees, I write them off as a business expense which helps keep my tax bill low. </p>
<p>I have the PayPal Business Debit Card which lets me use ATMs and pay with my balance. There is also backup funding which charges your on hand debit card or bank account, so you’ll never get denied. </p>
<p>If you’re not using PayPal, you’re going to have a hard time freelancing these days. The service is still a core part of many people’s lives and businesses. </p>
<h2>MeetEdgar</h2>
<p>Are you a writer, blogger, YouTuber or do anything where you want to share your work through social media? <a href=""https://meetedgar.com/"">MeetEdgar</a> is the best social media management tool that’ll let you reuse old social media post. Most importantly it’ll help you cut down on time you spend managing your social media accounts. You’ll import an RSS feed or manually enter a post that can be sorted by topic, whether it’s an evergreen post, or if you only want it posted once. Before Edgar, I would add new social media post into an Excel worksheet with the title, link, and any other media that would go along with the post. It was a hassle. I tried Buffer, Hootsuite, and other social media tools but none of them let me put my content in there and forget about it. Now I check Edgar once a week and the rest of the week it posts timely social updates on my business social media accounts. </p>
<p>Edgar is $79 a month. I know, it might be outside of your budget, but it’s going to save you a ton of time. </p>
<h2>Trello</h2>
<p><a href=""https://trello.com/"">Trello</a> is the best to-do manager around. You’re able to adjust your needs from managing an editorial calendar or creating a shopping list for your family. Within SLK Media we use it as an editorial calendar, a way to manage our bills, a way to manage our employee's task, and most importantly an operations chart to know what bugs and problems we have to address. Trello is a free tool, so you’re able to create hundreds of Trello boards for whatever your needs are. You’re able to invite dozens of employees and other clients to one board. It’s perfect if you're working with someone who needs multiple updates to an app, article, or YouTube video. </p>
<p>Trello is used by thousands of companies, so there’s always a way for it to fit your needs. Trello offers dozens of different board examples to help you understand how to use it to manage expenses, editorial calendars, or other to-do needs. If you do need help setting one up one of us at Ninjality can consult with your company. </p>
<h2>Rescue Time</h2>
<p>Knowing where your time goes is important. You’re freelancing so the most important thing you have is your time. Before I started time tracking, I was unclear on how many hours a day I was working. Some clients want to bill by the hour versus a per contract or per article basis. </p>
<p><a href=""https://www.rescuetime.com/dashboard"">Rescue Time</a> will track what apps, sites, and apps your using. You’ll have an idea how long you edited a podcast, video, or how long it took to write an article. If you’re not billing per hour, then it’ll give you an idea what your time is worth. Now I’ll charge $15 per 100 words over $5 or $6 per hundred words because I know my time is worth more when I’m spending an hour or two writing some smaller articles. </p>
<p>There is an iOS, Android, Mac and Windows app so you can track all your life including social media usage. There is a paid tier, but the free version works just as well. I have used it for over a year now, and it has helped me bill clients who want hourly or even contracts.</p>","When I first started freelancing, I had no clue what I was doing. I didn’t know about taxes, invoicing, or best practices. Now, after a year of working, I’ve managed to get a better handle on freelancing. I know what my time is worth, how to pay taxes each quarter properly, and what are the best tools for managing my busy life.",getting-started-freelancing,General,leon@ninjality.com,"2017-05-18 23:43:49","2017-05-18 23:57:53","2017-05-18 19:00:00"
